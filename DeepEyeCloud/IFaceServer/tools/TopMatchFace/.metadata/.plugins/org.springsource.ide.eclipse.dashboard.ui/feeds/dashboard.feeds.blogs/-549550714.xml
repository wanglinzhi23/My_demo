<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2017-01-18T17:04:10Z</updated>
  <entry>
    <title>Spring Cloud Data Flow for Cloud Foundry 1.1 GA released</title>
    <link rel="alternate" href="https://spring.io/blog/2017/01/18/spring-cloud-data-flow-for-cloud-foundry-1-1-ga-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Eric Bottard</name>
    </author>
    <id>tag:spring.io,2017-01-09:2772</id>
    <updated>2017-01-18T17:04:10Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;We are pleased to announce the general availability of &lt;a href="http://cloud.spring.io/spring-cloud-dataflow/"&gt;Spring Cloud Data Flow&lt;/a&gt; for Cloud Foundry version 1.1.0.RELEASE.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In addition to all the bells and whistles of &lt;a href="https://spring.io/blog/2016/11/23/spring-cloud-data-flow-1-1-ga-released"&gt;Spring Cloud Data Flow 1.1.2&lt;/a&gt; that this release builds upon, the Cloud Foundry specifics include:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Memory Optimizations:&lt;/strong&gt; After much troubleshooting, we are pleased to deliver a memory efficient SCDF server in this release. With the changes now, regardless of how many stream/task deployments and concurrency, we have observed the memory usage of the server stay within the 200MB range as opposed to 1G or over to an eventual crash in previous 1.0.0.RELEASE. If you experienced spurious crashes previously, we highly recommend upgrading to 1.1.0.RELEASE right away.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Maven Cache and Disk Optimizations:&lt;/strong&gt; We have improved the way Maven caching is applied and used. There is a new LRU (Least Recently Used) design on top of the maven cache to allow us to be more proactive about the cache size as opposed to letting it grow indefinitely, which if not governed, leads to out of disk space errors for the application container where the server is running.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tasks Support:&lt;/strong&gt; In the latest PCF 1.9 release, the Task component graduated from being experimental to production-ready feature capability. Spring Cloud Data Flow¡¯s Task support for Cloud Foundry closely followed this development and with this release, we have removed the ¡°experimental¡± clause from our side, too. Spring Cloud Data Flow¡¯s Task support is production-ready when used on PCF 1.9. &lt;em&gt;One can still try this functionality on older PCF releases, PCF 1.8 for example, but the feature capabilities neither guaranteed nor supported on older PCF releases since is it classified as ¡±experimental¡±.&lt;/em&gt;&lt;/p&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The Task database schema changed slightly with this release. For folks upgrading from 1.0.0.RELEASE to 1.1.0.RELEASE, please review the &lt;a href="http://docs.spring.io/spring-cloud-dataflow/docs/1.1.0.RELEASE/reference/htmlsingle/#configuration-rdbms"&gt;migration steps&lt;/a&gt; included in the reference guide.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Improved Error Handling:&lt;/strong&gt; Building on the latest version of the &lt;a href="https://github.com/spring-cloud/spring-cloud-deployer-cloudfoundry"&gt;Spring Cloud Deployer for Cloud Foundry project&lt;/a&gt;, interaction with the Cloud Controller REST API has been made more resilient, being more pro-active in dealing with the occasional server-side error.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;strong&gt;Important Notice:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;There have been changes to the environment variables used by Spring Cloud Data Flow¡¯s Cloud Foundry Server. Please make sure to review the &lt;a href="http://docs.spring.io/spring-cloud-dataflow-server-cloudfoundry/docs/1.1.0.RELEASE/reference/htmlsingle/#_configuration_reference"&gt;reference guide&lt;/a&gt; for the latest changes to the environment variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The random app name generation feature gets an update. If this feature is enabled, you¡¯ll notice that the name stays within the 63 character limit, to comply with RFC1035 when used as a hostname.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;strong&gt;Get Started!&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Head over to the &lt;a href="http://cloud.spring.io/spring-cloud-dataflow-server-cloudfoundry/"&gt;Spring Cloud Data Flow for Cloud Foundry project page&lt;/a&gt; and follow the &lt;strong&gt;Quick Start&lt;/strong&gt; section. Be sure to browse the &lt;a href="http://docs.spring.io/spring-cloud-dataflow-server-cloudfoundry/docs/1.1.0.RELEASE/reference/htmlsingle/"&gt;reference documentation&lt;/a&gt; for this release.&lt;/p&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Spring Integration Extension for SMB 0.5.0 is Available</title>
    <link rel="alternate" href="https://spring.io/blog/2017/01/18/spring-integration-extension-for-smb-0-5-0-is-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Artem Bilan</name>
    </author>
    <id>tag:spring.io,2017-01-18:2790</id>
    <updated>2017-01-18T16:03:52Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the Spring Integration team I¡¯d like to announce release of one more Spring Integration Extension.
This time it is Spring Integration for &lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block"&gt;Server Message Block&lt;/a&gt; and its artifact is &lt;code&gt;spring-integration-smb.0.5.0.RELEASE&lt;/code&gt;, which is available in the &lt;a href="https://repo.spring.io/release/"&gt;Release Repository&lt;/a&gt; and Maven Central.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The project has been around for some time but only recently gained enough community traction to warrant a release.
So, first of all, big thanks to you, the community, for your contributions!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;a href="https://jcifs.samba.org/"&gt;Java CIFS Client Library&lt;/a&gt; has been chosen as a Java implementation for the CIFS/SMB networking protocol.
Its &lt;code&gt;SmbFile&lt;/code&gt; abstraction is simply wrapped to the Spring Integration "Remote File" foundations like &lt;code&gt;SmbSession&lt;/code&gt;, &lt;code&gt;SmbRemoteFileTemplate&lt;/code&gt; etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The SMB Channel Adapters and support classes implementations are fully similar to existing components for &lt;a href="http://docs.spring.io/spring-integration/reference/html/ftp.html"&gt;(S)FTP&lt;/a&gt; or &lt;a href="https://github.com/spring-projects/spring-integration-aws"&gt;AWS S3&lt;/a&gt; protocols.
So, if you familiar with those components, it is pretty straightforward to use this extension.
But any way here are several words about existing components:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="smb-inbound-channel-adapter"&gt;&lt;a class="anchor" href="#smb-inbound-channel-adapter"&gt;&lt;/a&gt;SMB Inbound Channel Adapter&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;To download SMB files locally the &lt;code&gt;SmbInboundFileSynchronizingMessageSource&lt;/code&gt; is provided.
It is simple extension of the &lt;code&gt;AbstractInboundFileSynchronizingMessageSource&lt;/code&gt; which requires &lt;code&gt;SmbInboundFileSynchronizer&lt;/code&gt; injection.
For filtering remote files you still can use any existing &lt;code&gt;FileListFilter&lt;/code&gt; implementations, but particular &lt;code&gt;SmbRegexPatternFileListFilter&lt;/code&gt; and &lt;code&gt;SmbSimplePatternFileListFilter&lt;/code&gt; are provided.
For XML configuration the &lt;code&gt;&amp;lt;int-smb:inbound-channel-adapter&amp;gt;&lt;/code&gt; component is provided.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="smb-outbound-channel-adapter"&gt;&lt;a class="anchor" href="#smb-outbound-channel-adapter"&gt;&lt;/a&gt;SMB Outbound Channel Adapter&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;There is no (yet) some SMB specific requirements for files transferring to SMB, so for XML &lt;code&gt;&amp;lt;int-smb:outbound-channel-adapter&amp;gt;&lt;/code&gt; component we simply reuse an existing &lt;code&gt;FileTransferringMessageHandler&lt;/code&gt;.
In case of Java configuration that &lt;code&gt;FileTransferringMessageHandler&lt;/code&gt; should be supplied with the &lt;code&gt;SmbSessionFactory&lt;/code&gt; (or &lt;code&gt;SmbRemoteFileTemplate&lt;/code&gt;) and that all!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@ServiceActivator(inputChannel = "storeToSmb")
@Bean
public MessageHandler smbMessageHandler(SmbSessionFactory smbSessionFactory) {
    FileTransferringMessageHandler&amp;lt;SmbFile&amp;gt; handler =
                new FileTransferringMessageHandler&amp;lt;&amp;gt;(smbSessionFactory);
    handler.setRemoteDirectoryExpression(
                new LiteralExpression("remote-target-dir"));
    handler.setFileNameGenerator(m -&amp;gt;
                m.getHeaders().get(FileHeaders.FILENAME, String.class) + ".test");
    handler.setAutoCreateDirectory(true);
    return handler;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We would like to hear any feedback from the Community before we go straight forward to the &lt;code&gt;1.0.0.RELEASE&lt;/code&gt;, so, do not hesitate to contact with us via any available communication channel!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-integration-extensions/tree/master/spring-integration-smb"&gt;Project Page&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-integration"&gt;Help&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-integration"&gt;Chat&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - January 17th, 2017</title>
    <link rel="alternate" href="https://spring.io/blog/2017/01/17/this-week-in-spring-january-17th-2017" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2017-01-17:2789</id>
    <updated>2017-01-17T09:54:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! We&amp;rsquo;ve got a lot to get into this week - even &lt;em&gt;more&lt;/em&gt; so than usual! So, let&amp;rsquo;s get into it!&lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" data-partner="tweetdeck"&gt;&lt;p lang="en" dir="ltr"&gt;Starting to put together topics for the next season of Spring Tips: what would you like to see discussed?&lt;/p&gt;&amp;mdash; Josh Long (ÁúÖ®´º, ???) (@starbuxman) &lt;a href="https://twitter.com/starbuxman/status/819903565342851076"&gt;January 13, 2017&lt;/a&gt;&lt;/blockquote&gt;&lt;br/&gt;&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;This week there are a &lt;em&gt;lot&lt;/em&gt; of great SpringOne Platform 2016 replays available online thanks to our very own &lt;a href="http://twitter.com/PieterHumphrey"&gt;Pieter Humphrey&lt;/a&gt;!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Don&amp;rsquo;t miss St¨¦phane Maldini&amp;rsquo;s SpringOne Platform (S1P) 2016 talk introducing &lt;a href="https://spring.io/blog/2017/01/16/springone-platform-2016-replay-reactor-3-0-a-jvm-foundation-for-java-8-and-reactive-streams"&gt;Reactor 3.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;or this S1P 2016 talk by Sebastien Deleuze and Stephane Maldini &lt;a href="https://spring.io/blog/2017/01/16/springone-platform-2016-replay-a-lite-rx-api-for-the-jvm"&gt;on reactive programming options for the JVM&lt;/a&gt; (introducing Reactor and RxJava, among others)&lt;/li&gt;
  &lt;li&gt;Yahoo! &lt;a href="https://twitter.com/mgrzejszczak/status/819955779000213505"&gt;Marcin just tweeted&lt;/a&gt; some exciting news: &lt;a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_pact_converter"&gt;Pact support has been added to Spring Cloud Contract&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Noriaki Tatsumi ( from Capital One) gave a nice S1P 2016 talk on &lt;a href="https://spring.io/blog/2017/01/16/springone-platform-2016-replay-operating-a-high-velocity-large-organization-with-spring-cloud-microservices"&gt;operating a high velocity organization with Spring Cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Google&amp;rsquo;s Ray Tsang and Bret McGowen put together a nice &lt;a href="https://spring.io/blog/2017/01/16/springone-platform-2016-replay-grpc-101-for-spring-developers"&gt;talk on using gRPC for Spring Developers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;in this S1P 2016 talk, Ben Hale, Paul Harris and Stephane Maldini introduce some &lt;a href="https://spring.io/blog/2017/01/16/springone-platform-2016-replay-designing-implementing-and-using-reactive-apis"&gt;of the nuance of building reactive APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ryan Baxter has just announced &lt;a href="https://spring.io/blog/2017/01/12/spring-cloud-camden-sr4-is-available"&gt;Spring Cloud Camden.SR4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Glenn Renfro just &lt;a href="https://spring.io/blog/2017/01/10/spring-cloud-task-1-1-2-release-is-now-available"&gt;announced Spring Cloud Task 1.1.2.RELEASE&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;speaking of Spring Cloud Contract, I really dig this post by epages&amp;rsquo; Mathias on building &lt;a href="https://developer.epages.com/blog/2017/01/17/how-to-test-eventbased-services-using-contracts.html"&gt;and testing event-driven microservices with Spring Cloud Contract&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I &lt;em&gt;loved&lt;/em&gt; our very own Toshiaki Maki&amp;rsquo;s exhaustive repository demonstrating how to &lt;a href="https://github.com/making/spring-boot-db-samples"&gt;use Spring Boot with a larger number of different SQL persistence technologies&lt;/a&gt;. &lt;em&gt;Great&lt;/em&gt; resource! Bookmark this!&lt;/li&gt;
  &lt;li&gt;and speaking of persistence options, I really enjoyed community hero &lt;a href="https://www.youtube.com/shared?ci=N3HpOiGbM60"&gt;Michael Simmons&amp;rsquo; talk on JOOQ and Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Hortonworks&amp;rsquo;s Tim Spann got a few great posts on &lt;a href="https://community.hortonworks.com/topics/microservice.html"&gt;using Spring Boot with Apache Phoenix or Apache Hive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Martin Westergaard Lassen has put together a nice post on his top favorite seven (ahem! six.. :D) &lt;a href="http://container-solutions.com/my-top-7-favourite-features-of-spring-boot/"&gt;features of Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I really liked this post by Apigee&amp;rsquo;s Alan Ho on the reasons &lt;a href="http://sdtimes.com/guest-view-microservices-death-diffusing-monolith-time-bomb/"&gt;that organizations diffuse monolithic time-bombs&lt;/a&gt;: &amp;ldquo;If the monolithic stack doesn¡¯t go, the good developers will&amp;rdquo;&lt;/li&gt;
  &lt;li&gt;Yahoo! just open-sourced their &lt;a href="http://sdtimes.com/yahoo-open-sources-continuous-delivery-tool-screwdriver/"&gt;continuous delivery platform called Screwdriver&lt;/a&gt;. This has little or nothing to do with Spring or Pivotal, directly, yet, but it&amp;rsquo;s yet another contender in the ever expanding ecosystem of continuous delivery tools, along with Pivotal&amp;rsquo;s Concourse, Netlfix Spinnaker (to which Pivotal, Google, Microsoft and Netflix all commit and contribute), Jenkins and so many more. Remember, at the end of the day, the most important metric for organizational agility isn&amp;rsquo;t cloud computing or microservices, it&amp;rsquo;s the ability to continuously (quickly and safely) deliver value to the customer.&lt;/li&gt;
  &lt;li&gt;This is super cool! Now you &lt;a href="https://blog.switchbit.io/camel-spring-cloud-stream/"&gt;can use Apache Camel with Spring Cloud Stream&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;this is a topic near and dear to my heart: using &lt;a href="https://github.com/aglassman/coffee-bot"&gt;a Spring Boot Slack bot to notify people of the availability of coffee&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Hurray! &lt;a href="https://github.com/spring-cloud/spring-cloud-commons/issues/162"&gt;Cloud Foundry surgical routing is now supported in Spring Cloud Ribbon-based load-balancing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;want to consume of the Spring Cloud Services from .NET applications? &lt;a href="https://www.altoros.com/blog/enabling-dotnet-core-microservices-with-steeltoe-and-pivotal-cloud-foundry/"&gt;Check out this post on Steeltoe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Evan Brown put &lt;a href="https://cloudplatform.googleblog.com/2017/01/partnering-on-open-source-Google-and-Pivotal-engineers-talk-Cloud-Foundry-on-GCP.html"&gt;together a succinct blog&lt;/a&gt; introducing a replay of a talk on how to deploy Pivotal Cloud Foundry on Google Cloud Platform. &lt;a href="https://www.youtube.com/watch?v=TBsc7kiog5Q"&gt;Check out this talk on BOSH and Cloud Foundry Basics for Google Cloud Platform, pt. 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;want to learn how to use Spring Cloud Security (and its OAuth support for clients) with &lt;a href="https://developers.redhat.com/blog/2017/01/05/spring-boot-and-oauth2-with-keycloak/"&gt;RedHat&amp;rsquo;s Keycloak? Check this blog out by RedHat&amp;rsquo;s Kamesh out&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>SpringOne Platform 2016 Replay: Reactor 3.0, a JVM foundation for Java 8 and Reactive Streams</title>
    <link rel="alternate" href="https://spring.io/blog/2017/01/16/springone-platform-2016-replay-reactor-3-0-a-jvm-foundation-for-java-8-and-reactive-streams" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2017-01-17:2788</id>
    <updated>2017-01-16T19:51:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne Platform 2016.&lt;br/&gt;Speaker: St¨¦phane Maldini&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/reactor-30-a-jvm-foundation-for-java-8-and-reactive-streams"&gt;http://www.slideshare.net/SpringCentral/reactor-30-a-jvm-foundation-for-java-8-and-reactive-streams&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The apparent simplicity of the publisher/subscriber model as exposed in Reactive-Streams can be deceiving. The relatively fast release cycle for libraries in that space is not a myth, concurrency is hard. To keep out undesired side-effects, most Reactive projects have adopted a vertical approach potentially excluding developers from decision-making around execution model or sometimes language.&lt;/p&gt;
&lt;p&gt;What if we were able to leave the developer in control, positioning as a robust foundation and making the most of the now industrial standard Java 8 ?&lt;/p&gt;
&lt;p&gt;What if we hardened this foundation through open-source and research collaboration, with a direct feedback loop from Pivotal engineering ?&lt;/p&gt;
&lt;p&gt;In essence, that&amp;rsquo;s what we aim to achieve with Reactor 2.5. This session is an invitation to explore how the new Reactor design, structure and features can progressively help you go Reactive and show how it plays out in your applications today and tomorrow.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/ctZGFTI3XI8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne Platform 2016 Replay: A lite Rx API for the JVM</title>
    <link rel="alternate" href="https://spring.io/blog/2017/01/16/springone-platform-2016-replay-a-lite-rx-api-for-the-jvm" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2017-01-17:2787</id>
    <updated>2017-01-16T19:48:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne Platform 2016.&lt;br/&gt;Speakers: Sebastien Deleuze, Stephane Maldini&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/a-lite-rx-api-for-the-jvm"&gt;http://www.slideshare.net/SpringCentral/a-lite-rx-api-for-the-jvm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RxJava is a fully fledged and widely used solution to develop Reactive applications, but some interesting alternatives exist. After an overview of the main Reactive APIs available and of Spring Boot Reactive support, this workshop introduces how to develop Reactive applications using Reactor Core 2.5-a powerful and fast alternative. We will learn how to use Flux (N values) and Mono (single value) types with various exercises. This new API (which is the core of Reactor 2.5) is a game changer in the world of Reactive API on the JVM thanks to its Reactive eXtensions-based API (natively based on Reactive Streams and Java 8) and its unmatched performance.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Rrna-uwYL1o" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne Platform 2016 Replay: Operating a High Velocity Large Organization with Spring Cloud Microservices</title>
    <link rel="alternate" href="https://spring.io/blog/2017/01/16/springone-platform-2016-replay-operating-a-high-velocity-large-organization-with-spring-cloud-microservices" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2017-01-17:2785</id>
    <updated>2017-01-16T18:45:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne Platform 2016.&lt;br/&gt;Speakers: Noriaki Tatsumi, Capital One&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/operating-a-high-velocity-large-organization-with-spring-cloud-microservices"&gt;http://www.slideshare.net/SpringCentral/operating-a-high-velocity-large-organization-with-spring-cloud-microservices&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Releases are hard for many large organizations with complex systems. Challenges like manual processes, change approvals, compliances, legacy systems, varying deployment targets, and scheduled downtimes prevent companies from releasing fast and frequently. Many of us know that when Continuous Delivery is embraced and microservices architecture is done right, those challenges can become things of the past. Some high performing companies like Netflix have successfully demonstrated the concept. Now it&amp;rsquo;s your turn. This presentation prepares you to build a microservices architecture that&amp;rsquo;s not only reliable, resilient, and scalable but also addresses the challenges large organizations typically face.&lt;/p&gt;
&lt;p&gt;One of the missions of Capital One&amp;rsquo;s Security and Technology Analytics division is to improve detection and prevention of cyberattacks across all of the Capital One enterprise systems. We envision, create, deploy, and maintain critical security tools powered by streaming big data, state of the art machine learning, micro-services architecture, and beautiful visualizations both in the cloud and our data centers. We have a need to build, test, and release software fast and frequently with multiple teams in a reliable way. The security analysts and the data scientists frequently introduce new feature requirements and experiments in small batches. The presentation is based on our approach and experience.&lt;/p&gt;
&lt;p&gt;We will dive into the technical details on how Spring Cloud empowers developers to build the patterns and components of microservices foundation quickly. The subtopics include:&lt;/p&gt;
&lt;p&gt;Core patterns and components of microservices architecture and their roles&lt;br/&gt;Identification of common challenges large organizations face and how microservices architecture addresses them&lt;br/&gt;Building a reusable, sharable, and portable microservices foundation&lt;br/&gt;Sample code and demos to show how easily developers can get started with building microservices architecture using Spring Cloud&lt;br/&gt;We will conclude the presentation by realizing how feasible and realistic it is for your organization to be the next high velocity organization that leverages the benefits of microservices, powered by Spring Cloud.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Uc1El9Zc1Yg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne Platform 2016 Replay: gRPC 101 for Spring developers</title>
    <link rel="alternate" href="https://spring.io/blog/2017/01/16/springone-platform-2016-replay-grpc-101-for-spring-developers" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2017-01-17:2784</id>
    <updated>2017-01-16T18:23:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne Platform 2016&lt;br/&gt;Speakers: Ray Tsang, Bret McGowen, Google&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/grpc-101-for-spring-developers"&gt;http://www.slideshare.net/SpringCentral/grpc-101-for-spring-developers&lt;/a&gt;&lt;br/&gt;gRPC is a high performance, open source, general RPC framework that puts mobile and HTTP/2 first. gRPC is based on many years of Google&amp;rsquo;s experience in building distributed systems - it is designed to be low latency, bandwidth and CPU efficient, to create massively distributed systems that span data centers, as well as power mobile apps, real-time communications, IoT devices and APIs. It&amp;rsquo;s also interoperable between multiple languages.&lt;/p&gt;
&lt;p&gt;But beyond that fact that it&amp;rsquo;s more efficient than REST, we&amp;rsquo;ll look into how to use gRPC&amp;rsquo;s streaming API, where you can establish server-side streaming, client-side streaming, and bidirectional streaming! This allows developers to build sophisticated real-time applications with ease.&lt;/p&gt;
&lt;p&gt;In addition to learning about gRPC and HTTP/2 concepts with code and demonstrations, we&amp;rsquo;ll also deep dive into integration with existing build systems such as Maven and Gradle, but also frameworks such as Spring Boot and RxJava.&lt;/p&gt;
&lt;p&gt;Writing/using a Spring Boot starter to run gRPC server&lt;br/&gt;Configuring projects to generate gRPC stub code&lt;br/&gt;Integrating w/ RxJava&amp;rsquo;s observable sequences, which matches very well with gRPC&amp;rsquo;s Stream Observable constructs&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/BOW7jd136Ok" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne Platform 2016 Replay: Designing, Implementing, and Using Reactive APIs</title>
    <link rel="alternate" href="https://spring.io/blog/2017/01/16/springone-platform-2016-replay-designing-implementing-and-using-reactive-apis" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2017-01-17:2783</id>
    <updated>2017-01-16T18:07:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne Platform 2016.&lt;br/&gt;Speakers: - Ben Hale, Paul Harris, Stephane Maldini&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/designing-implementing-and-using-reactive-apis"&gt;http://www.slideshare.net/SpringCentral/designing-implementing-and-using-reactive-apis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Java community is on the cusp of a major change in programming model. As the industry moves towards high-performance micro-service architectures, the need for a reactive programming model becomes clear. In this session, the lead developers of the Cloud Foundry Java Client will talk about what led them to choose a reactive API. Using that project as a lens, they&amp;rsquo;ll explore how they designed and implemented this API using Project Reactor and what users will expect when using a reactive API. If you are a developer looking to provide reactive APIs, this is your chance to gain the experience of team building a large, production-ready reactive library.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/VN3SzWPsIuU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Camden.SR4 Is Available</title>
    <link rel="alternate" href="https://spring.io/blog/2017/01/12/spring-cloud-camden-sr4-is-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Ryan Baxter</name>
    </author>
    <id>tag:spring.io,2017-01-12:2782</id>
    <updated>2017-01-12T19:32:52Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team, I am pleased to announce that Camden Service Release 4 of &lt;a href="http://cloud.spring.io"&gt;Spring Cloud&lt;/a&gt; is available today. The release can be found in our &lt;a href="http://repo.spring.io/release"&gt;Spring Release repository&lt;/a&gt; and &lt;a href="http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-cloud-dependencies%22"&gt;Maven Central&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release includes primarily bug fixes. Release notes can be found on our &lt;a href="https://github.com/spring-projects/spring-cloud/wiki"&gt;wiki&lt;/a&gt;.&lt;/p&gt;&lt;h4&gt;&lt;a href="#the-following-modules-were-updated-as-part-of-camden-sr4" class="anchor" name="the-following-modules-were-updated-as-part-of-camden-sr4"&gt;&lt;/a&gt;The following modules were updated as part of Camden.SR4:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Cloud Commons &lt;a href="https://github.com/spring-cloud/spring-cloud-commons/milestone/21?closed=1"&gt;1.1.7.RELEASE&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Cloud Netflix &lt;a href="https://github.com/spring-cloud/spring-cloud-netflix/milestone/35?closed=1"&gt;1.2.4.RELEASE&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Cloud Sleuth &lt;a href="https://github.com/spring-cloud/spring-cloud-sleuth/milestone/20?closed=1"&gt;1.1.1.RELEASE&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Cloud Contract &lt;a href="https://github.com/spring-cloud/spring-cloud-contract/milestone/7?closed=1"&gt;1.0.3.RELEASE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And, as always, we welcome feedback: either on &lt;a href="https://github.com/spring-cloud"&gt;GitHub&lt;/a&gt;, on &lt;a href="https://gitter.im/spring-cloud/spring-cloud"&gt;Gitter&lt;/a&gt;, on &lt;a href="http://stackoverflow.com/questions/tagged/spring-cloud"&gt;Stack Overflow&lt;/a&gt;, or on &lt;a href="https://twitter.com/SpringCloud"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Task 1.1.2.RELEASE is now available</title>
    <link rel="alternate" href="https://spring.io/blog/2017/01/10/spring-cloud-task-1-1-2-release-is-now-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Glenn Renfro</name>
    </author>
    <id>tag:spring.io,2017-01-10:2774</id>
    <updated>2017-01-10T19:58:03Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce that Spring Cloud Task 1.1.2.RELEASE is now available via Github, Pivotal download repository, and Maven Central. &lt;/p&gt;
&lt;p&gt;The main driver for this Spring Cloud Task release is to correct an error in the dependencies within the 1.1.1.RELEASE.&lt;/p&gt;&lt;h2&gt;&lt;a href="#what-do-you-think" class="anchor" name="what-do-you-think"&gt;&lt;/a&gt;What do you think?&lt;/h2&gt;
&lt;p&gt;We look forward to your feedback on these new features in &lt;a href="https://github.com/spring-cloud/spring-cloud-task/issues"&gt;Github&lt;/a&gt;, &lt;a href="http://stackoverflow.com/tags/spring-cloud-task"&gt;StackOverflow&lt;/a&gt;, or to me directly via Twitter &lt;a href="https://twitter.com/michaelminella"&gt;@michaelminella&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cloud.spring.io/spring-cloud-task/"&gt;Spring Cloud Task Home&lt;/a&gt; | &lt;a href="https://github.com/spring-cloud/spring-cloud-task"&gt;Source on GitHub&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-cloud-task/current/reference/htmlsingle/"&gt;Reference Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - January 10th, 2017</title>
    <link rel="alternate" href="https://spring.io/blog/2017/01/10/this-week-in-spring-january-10th-2017" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2017-01-10:2773</id>
    <updated>2017-01-10T07:45:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week I&amp;rsquo;m in San Francisco and &lt;a href="https://www.meetup.com/NYC-SUG/events/236521420/"&gt;New York City&lt;/a&gt; talking to developers and toiling on the final edits to the O&amp;rsquo;Reilly book &lt;a href="http://shop.oreilly.com/product/0636920038252.do"&gt;&lt;em&gt;Cloud Native Java&lt;/em&gt;&lt;/a&gt; (almost there!). Also, marketing ninja &lt;a href="https://www.twitter.com/pieterhumphrey"&gt;Pieter Humphrey&lt;/a&gt; is ramping up the S1P 2016 replays, so fasten your seat belt and check the &lt;a href="https://www.youtube.com/playlist?list=PLgGXSWYM2FpOSZW9G9QpHbOv_PIWRO8sj"&gt;S1P 2016 YouTube playlist&lt;/a&gt; for the most current releases. We&amp;rsquo;ve got a lot to cover this week so let&amp;rsquo;s get to it! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Cloud Task ninja &lt;a href="https://spring.io/blog/2017/01/06/spring-cloud-task-1-1-1-release-is-now-available"&gt;Glen Renfro just announced Spring Cloud Task 1.1.1&lt;/a&gt; with a fast following, bug-fix only, &lt;a href="https://spring.io/blog/2017/01/10/spring-cloud-task-1-1-2-release-is-now-available"&gt;1.1.2 release&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;our latest and greatest &lt;a href="https://spring.io/blog/2017/01/06/spring-boot-1-5-0-rc1-available-now"&gt;Spring Boot team member Madhura Bhave just announced Spring Boot 1.5.0.RC1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Integration guru &lt;a href="https://spring.io/blog/2017/01/05/spring-integration-5-0-milestone-2-available"&gt;Artem Bilan just announced Spring Integration 5.0.M2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Batch and Spring Cloud Task lead &lt;a href="https://spring.io/blog/2017/01/04/spring-batch-4-0-0-m1-is-now-available"&gt;Michael Minella just announced Spring Batch 4.0&lt;/a&gt; complete with a lot of niceties and - in particular a feature I&amp;rsquo;ve wanted &lt;em&gt;forever&lt;/em&gt; - an easy way to build instances of the more sophisticated &lt;code&gt;ItemReader&lt;/code&gt; and &lt;code&gt;ItemWriter&lt;/code&gt; intances, including the &lt;code&gt;FlatFileItemReader&lt;/code&gt;! This is been a long time in coming and I can&amp;rsquo;t wait for this release. This rounds out the already epic Java configuration story for Spring Batch.&lt;/li&gt;
  &lt;li&gt;Spring IO Platform lead Andy Wilkinson just announced &lt;a href="https://spring.io/blog/2017/01/04/spring-io-platform-athens-sr2"&gt;Spring IO Platform Athens SR2&lt;/a&gt;, which brings with it new revisions of Spring Boot, Spring Retry, Spring AMQP and so much more&lt;/li&gt;
  &lt;li&gt;Spring framework ninja and Kotlin afficianado Sebastien Deleuze just blogged about some of the coming improvements to support &lt;a href="https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0"&gt;the Kotlin language in Spring framework 5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Microservice developers working on security and service disovery won&amp;rsquo;t want to miss Spencer Gibb&amp;rsquo;s &lt;a href="https://spring.io/blog/2017/01/10/springone-platform-2016-replay-spring-cloud-with-consul-and-vault"&gt;S1P 2016 replay: Spring Cloud with Consul and Vault&lt;/a&gt;. If you are new to Vault, &lt;a href="https://www.twitter.com/mp911de"&gt;Mark Paluch&lt;/a&gt; has you covered with a &lt;a href="https://spring.io/blog/2017/01/03/springone-platform-2016-replay-managing-secrets-at-scale"&gt;S1P replay&lt;/a&gt; that was published last week in Spring.&lt;/li&gt;
  &lt;li&gt;Catch Spring Data lead Oliver Gierke as he delivers a &lt;a href="https://spring.io/blog/2017/01/10/springone-platform-2016-replay-advanced-spring-data-rest"&gt;Spring Data REST deep dive&lt;/a&gt; at S1P 2016, now on youtube!&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2017/01/10/springone-platform-2016-replay-let-s-visualize-your-spring-boot-applications"&gt;Shin Tanimoto&amp;rsquo;s S1P 2016 session&lt;/a&gt; offers techniques for visualizing microservices built by Spring Boot applications using Elasticsearch, Kibana and Spring Cloud Sleuth.&lt;/li&gt;
  &lt;li&gt;Apache Geode and Pivotal Gemfire enthusiasts won&amp;rsquo;t want to miss this masterclass from &lt;a href="http://www.urbandictionary.com/define.php?term=A%20really%20hoopy%20frood"&gt;hoopy froods&lt;/a&gt; &lt;a href="https://twitter.com/john_blum"&gt;John Blum&lt;/a&gt; and &lt;a href="https://www.twitter.com/lukewshannon"&gt;Luke Shannon&lt;/a&gt; about &lt;a href="https://spring.io/blog/2017/01/10/springone-platform-2016-replay-spring-data-and-in-memory-data-management-in-action"&gt;Spring Data and in memory data management in action&lt;/a&gt;, recorded at S1P 2016.&lt;/li&gt;
  &lt;li&gt;Using Spring Boot on Cloud Foundry? Scott Frederick shows you how to wield autoconfiguration and the Java Buildpack like a boss to access platform and off-platform services &lt;a href="https://spring.io/blog/2017/01/10/springone-platform-2016-replay-consuming-data-services-with-spring-apps-on-cloud-foundry"&gt;in his talk recorded at S1P 2016&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Are you a Apache Cassandra user? Spring Data experts Mark Paluch, John Blum talk about the community module turned 1st class project, &lt;a href="https://spring.io/blog/2017/01/10/springone-platform-2016-replay-sneek-peek-at-spring-data-cassandra"&gt;Spring Data Cassandra in this S1P 2016 replay&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Pivotal&amp;rsquo;s very own Ben Wilcock put together a very nice example project that demonstrates &lt;a href="https://github.com/benwilcock/pcf-spring-cloud-services-demo"&gt;how to use Spring Cloud Services with Pivotal Cloud Foundry&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;He &lt;em&gt;also&lt;/em&gt; put together a handy &lt;a href="https://github.com/benwilcock/spring-cloud-contracts"&gt;demo of Spring Cloud Contracts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Our very own Toshiaki Maki Making put together a nice post on some of the &lt;a href="https://blog.ik.am/entries/401"&gt;niceties in Spring Boot 1.5 and how they integrate with the Pivotal Apps Manager for Cloud Foundry&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Daniel Olszewski has put together a quick and easy look at &lt;a href="http://dolszewski.com/spring/multiple-ttl-caches-in-spring-boot/"&gt;configuring time-to-live values for the Spring Cache abstraction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I liked this German-language &lt;a href="http://blog.sogeo.services/blog/2017/01/01/rest-service-mit-spring-boot.html"&gt;post on building REST services with Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jose Praveen did a &lt;a href="https://dzone.com/articles/integrate-h2-database-in-your-spring-boot-applicat"&gt;nice job demonstrating how to integrate an H2 database with a Spring Boot application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I liked Sam Chu&amp;rsquo;s Chinese-language post on &lt;a href="http://samchu.logdown.com/posts/1272942-springboot-data-set-multiple-mongodb"&gt;setting up multiple MongoDB connections in a Spring application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;this is a well-thought out look at how to &lt;a href="http://www.bbenson.co/post/spring-validations-with-examples/"&gt;do validation of JSON payloads in a REST API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>SpringOne Platform 2016 Replay: Spring Cloud with Consul and Vault</title>
    <link rel="alternate" href="https://spring.io/blog/2017/01/10/springone-platform-2016-replay-spring-cloud-with-consul-and-vault" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2017-01-10:2775</id>
    <updated>2017-01-10T07:44:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne Platform 2016.&lt;br/&gt;Speaker: Spencer Gibb&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/spring-cloud-with-consul-and-vault"&gt;http://www.slideshare.net/SpringCentral/spring-cloud-with-consul-and-vault&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Historically it is difficult to store and configure secrets within applications. In the new age of microservices, it is also a challenge to register instances for discovery. Fortunately, Consul and Vault make securing secrets a breeze. Consul&amp;rsquo;s Service Registration mechanism makes easy work of service discovery. When combined with Spring Boot&amp;rsquo;s auto configuration we can leverage Consul and Vault by simply updating our classpath.&lt;/p&gt;
&lt;p&gt;In this session we will discuss how to integrate Spring Boot applications with Consul and Vault for Service Discovery, Configuration, Secrets, Event Bus and more. We will show how Spring implements various api&amp;rsquo;s using Consul and Vault including: Spring Cloud Discovery, Spring Environment &amp;amp; Spring Cloud Stream. Come ready to integrate your enterprise applications with Consul and Vault.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/cJUTIyvCd70" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne Platform 2016 Replay: Advanced Spring Data REST</title>
    <link rel="alternate" href="https://spring.io/blog/2017/01/10/springone-platform-2016-replay-advanced-spring-data-rest" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2017-01-10:2780</id>
    <updated>2017-01-10T07:43:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne Platform 2016.&lt;br/&gt;Speaker: Oliver Gierke&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/advanced-spring-data-rest"&gt;http://www.slideshare.net/SpringCentral/advanced-spring-data-rest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Data REST provides a solid foundation to build domain-driven REST webservices leveraging hypermedia. It takes away the boilerplate part of the development and allows you to concentrate and easily hook code to cover more advanced scenarios, like custom state transitions. The talk is going to look into which means the library provides to easily integrate manually coded REST resources, tweak representations and work with lookup types (database backed value types) and especially focusses on the features added in recent releases.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/iSO_3bhn7QU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne Platform 2016 Replay: Let's visualize your spring boot applications</title>
    <link rel="alternate" href="https://spring.io/blog/2017/01/10/springone-platform-2016-replay-let-s-visualize-your-spring-boot-applications" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2017-01-10:2779</id>
    <updated>2017-01-10T07:42:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne Platform 2016.&lt;br/&gt;Speaker: Shin Tanimoto&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/lets-visualize-your-spring-boot-applications"&gt;http://www.slideshare.net/SpringCentral/lets-visualize-your-spring-boot-applications&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the microservice era, working with tens of hundreds of services leads to difficulties getting a grasp of the application health such as error frequency, server resources, response times and throughput. It is said visualization tools can help us command a view of the whole system and detect problems in the early stages or prevent them from occurring, but the important thing is to choose proper tools and create dashboards the right way.&lt;/p&gt;
&lt;p&gt;This session offers techniques for visualizing microservices built by Spring Boot applications using Elasticsearch, Kibana and Spring Cloud Sleuth. Besides visualizing server resources and access logs, service dependencies and performance bottlenecks, and business statuses such as conversion rate are also visualized. Let&amp;rsquo;s have fun diving into visualizing your applications.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/5jNVtWvN8CM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne Platform 2016 Replay: Spring Data and In-memory Data Management in Action</title>
    <link rel="alternate" href="https://spring.io/blog/2017/01/10/springone-platform-2016-replay-spring-data-and-in-memory-data-management-in-action" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2017-01-10:2778</id>
    <updated>2017-01-10T07:41:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne Platform 2016.&lt;br/&gt;Speakers: John Blum, Luke Shannon&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/spring-data-and-inmemory-data-management-in-action-64852094"&gt;http://www.slideshare.net/SpringCentral/spring-data-and-inmemory-data-management-in-action-64852094&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this session we will be presenting and coding a live Spring Boot-based application powered by Apache Geode (a.k.a. Pivotal GemFire) running on Cloud Foundry. Attendees will learn in-memory computing and data management concepts including data access and querying using Spring Data Repositories and GemFire OQL, complex/real-time event processing with GemFire CQs, data affinity using GemFire Functions conveniently implemented and executed with Spring Data GemFire Function annotation support and finally effective testing strategies and techniques for testing highly-concurrent, distributed applications using Spring&amp;rsquo;s test framework along with JUnit, Mockito and MultithreadedTC.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/HndaF5iiNaQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne Platform 2016 Replay: Consuming Data Services with Spring Apps on Cloud Foundry</title>
    <link rel="alternate" href="https://spring.io/blog/2017/01/10/springone-platform-2016-replay-consuming-data-services-with-spring-apps-on-cloud-foundry" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2017-01-10:2777</id>
    <updated>2017-01-10T07:40:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne Platform 2016.&lt;br/&gt;Speakers: Scott Frederick&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/consuming-data-services-with-spring-apps-on-cloud-foundry"&gt;http://www.slideshare.net/SpringCentral/consuming-data-services-with-spring-apps-on-cloud-foundry&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Applications running on Cloud Foundry often need to connect to data services such as relational databases, document and data structure stores, and messaging services. Spring Cloud Connectors, Spring Boot and Cloud Foundry make it easy to connect Java and Spring applications to these types of data sources. Spring Boot and the Cloud Foundry Java Buildpack provide auto-configuration capabilities that make it possible to connect to data services with no application code changes for simple use cases, yet back away gracefully when custom configuration of connections is required.&lt;/p&gt;
&lt;p&gt;This talk will cover how these auto-configuration mechanisms work, their limitations, and how to explicitly configure connections when the need arises.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/g3DbtW5lwqY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne Platform 2016 Replay: Sneek Peek at Spring Data Cassandra</title>
    <link rel="alternate" href="https://spring.io/blog/2017/01/10/springone-platform-2016-replay-sneek-peek-at-spring-data-cassandra" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2017-01-10:2776</id>
    <updated>2017-01-10T07:39:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne Platform 2016.&lt;br/&gt;Speakers: Mark Paluch, John Blum&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/sneak-peek-at-spring-data-cassandra"&gt;http://www.slideshare.net/SpringCentral/sneak-peek-at-spring-data-cassandra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Data Cassandra was a community-maintained module for several years. The Spring Data team promotes the Cassandra module with the Ingalls release train to a core module. Project leads John Blum and Mark Paluch will guide you through the upcoming changes in Spring Data Cassandra and give you an impression what to expect from the upcoming version.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/5TLON0AkXzE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Task 1.1.1.RELEASE is now available</title>
    <link rel="alternate" href="https://spring.io/blog/2017/01/06/spring-cloud-task-1-1-1-release-is-now-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Glenn Renfro</name>
    </author>
    <id>tag:spring.io,2017-01-06:2771</id>
    <updated>2017-01-06T22:23:21Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce that Spring Cloud Task 1.1.1.RELEASE is now available via Github, Pivotal download repository, and Maven Central. &lt;/p&gt;
&lt;p&gt;The main driver for this Spring Cloud Task release is to replace the MYISAM engine that is used to create TASK_SEQ table for the MySQL database with the InnoDB engine. &lt;/p&gt;
&lt;p&gt;For more information please look at the following Github &lt;a href="https://github.com/spring-cloud/spring-cloud-task/issues/262"&gt;issue&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#what-do-you-think" class="anchor" name="what-do-you-think"&gt;&lt;/a&gt;What do you think?&lt;/h2&gt;
&lt;p&gt;We look forward to your feedback on these new features in &lt;a href="https://github.com/spring-cloud/spring-cloud-task/issues"&gt;Github&lt;/a&gt;, &lt;a href="http://stackoverflow.com/tags/spring-cloud-task"&gt;StackOverflow&lt;/a&gt;, or to me directly via Twitter &lt;a href="https://twitter.com/michaelminella"&gt;@michaelminella&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cloud.spring.io/spring-cloud-task/"&gt;Spring Cloud Task Home&lt;/a&gt; | &lt;a href="https://github.com/spring-cloud/spring-cloud-task"&gt;Source on GitHub&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-cloud-task/current/reference/htmlsingle/"&gt;Reference Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 1.5.0 RC1 Available Now</title>
    <link rel="alternate" href="https://spring.io/blog/2017/01/06/spring-boot-1-5-0-rc1-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Madhura</name>
    </author>
    <id>tag:spring.io,2017-01-06:2770</id>
    <updated>2017-01-06T21:02:52Z</updated>
    <content type="html">&lt;p&gt;Spring Boot v1.5.0.RC1 is available now from the &lt;a href="http://repo.spring.io/milestone/"&gt;Spring milestone repository&lt;/a&gt;. This release closes over &lt;a href="https://github.com/spring-projects/spring-boot/milestone/69?closed=1"&gt;220 issues and pull requests&lt;/a&gt;! Thanks to everyone that has contributed!&lt;/p&gt;
&lt;p&gt;Highlights of the new release include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Out of the box security for actuators&lt;/li&gt;
  &lt;li&gt;Auto-configured &lt;code&gt;@IntegrationComponentScan&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Auto-detection of &lt;code&gt;spring.jpa.database&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Support for Apache Kafka&lt;/li&gt;
  &lt;li&gt;Support for Cloud Foundry and actuator integration&lt;/li&gt;
  &lt;li&gt;Support for embedded in-memory LDAP server and auto-configuration for any compliant LDAP server&lt;/li&gt;
  &lt;li&gt;Upgrades to Spring Data Ingalls, Jetty 9.4, JooQ 3.9, AssertJ 2.6.0, Hikari 2.5 and Neo4J 2.1 and more&lt;/li&gt;
  &lt;li&gt;Upgrades to several Maven plugins&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a complete list of changes, and upgrade instructions, see the &lt;a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-1.5-Release-Notes"&gt;Spring Boot 1.5 Release Notes&lt;/a&gt; on the WIKI and the updated &lt;a href="http://docs.spring.io/spring-boot/docs/1.5.0.RC1/reference/htmlsingle/"&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please do try &lt;code&gt;1.5.0.RC1&lt;/code&gt; on your projects and let us know if you find any &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;problems&lt;/a&gt;. Check &lt;a href="http://projects.spring.io/spring-boot/"&gt;the QuickStart instruction&lt;/a&gt; to upgrade your project to &lt;code&gt;1.5.0.RC1&lt;/code&gt; or generate an empty project on &lt;a href="https://start.spring.io"&gt;https://start.spring.io&lt;/a&gt; for a concrete example. &lt;/p&gt;
&lt;p&gt;Stay tuned for the upcoming &lt;code&gt;1.5.0.RELEASE&lt;/code&gt; scheduled for the end of the month!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle"&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Integration 5.0 Milestone 2 Available</title>
    <link rel="alternate" href="https://spring.io/blog/2017/01/05/spring-integration-5-0-milestone-2-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Artem Bilan</name>
    </author>
    <id>tag:spring.io,2017-01-05:2762</id>
    <updated>2017-01-05T20:18:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the Spring Integration team I¡¯d like to announce the Second Milestone of Spring Integration &lt;a href="https://jira.spring.io/jira/secure/ReleaseNote.jspa?projectId=10121&amp;amp;version=15774"&gt;5.0&lt;/a&gt;, which is available in the &lt;a href="https://repo.spring.io/milestone/"&gt;Milestone Repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Some highlights of this release since the &lt;a href="https://spring.io/blog/2016/12/02/spring-integration-5-0-milestone-1-available"&gt;previous&lt;/a&gt; Milestone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Of course, first of all, big thanks to you, the community, for your contributions!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="mongodb-improvements"&gt;&lt;a class="anchor" href="#mongodb-improvements"&gt;&lt;/a&gt;MongoDb Improvements&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MongoDbOutboundGateway&lt;/code&gt; - for performing queries or any arbitrary operation on the collection&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An initial Java DSL support for MongoDB components&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The MongoDb component now can use &lt;code&gt;org.springframework.data.mongodb.core.query.Query&lt;/code&gt; API in their expressions&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@Bean
public IntegrationFlow mongoDbGatewayFlow() {
    return f -&amp;gt; f
        .handle(MongoDb.outboundGateway(this.mongoTemplate)
                            .collectionCallback(MongoCollection::count)
                            .collectionNameFunction(m -&amp;gt;
                                           m.getHeaders().get("collection")));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="messaginggateway-and-java-dsl"&gt;&lt;a class="anchor" href="#messaginggateway-and-java-dsl"&gt;&lt;/a&gt;@MessagingGateway and Java DSL&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The Java DSL &lt;code&gt;IntegrationFlow&lt;/code&gt; can now start from the interface marked with &lt;code&gt;@MessagingGateway&lt;/code&gt;, and all the method calls on the target proxy bean will perform sending &lt;code&gt;Message&lt;/code&gt; to the downstream &lt;code&gt;IntegrationFlow&lt;/code&gt;.
This lets you omit &lt;code&gt;@IntegrationComponentScan&lt;/code&gt; and extra channels configuration.
For example a simple gateway for Control Bus component:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@MessagingGateway
public interface ControlBusGateway {

    void send(String command);

}
...
@Bean
public IntegrationFlow controlBusFlow() {
    return IntegrationFlows.from(ControlBusGateway.class)
                 .controlBus()
                 .get();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="reactive-streams-support"&gt;&lt;a class="anchor" href="#reactive-streams-support"&gt;&lt;/a&gt;Reactive Streams Support&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;And of course some news from the Reactive Streams subject.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;code&gt;MessageChannelReactiveUtils&lt;/code&gt; can be used to adapt any &lt;code&gt;MessageChannel&lt;/code&gt; to the &lt;code&gt;org.reactivestreams.Publisher&lt;/code&gt;.
This can be useful when you would like to "flux" an upstream data via integration loosely coupled manner from one side and reactive back pressure from another:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@Autowired
private PollableChannel queueChannel;
...
Flux.from(MessageChannelReactiveUtils.&amp;lt;String&amp;gt;toPublisher(this.queueChannel))
                   .map(Message::getPayload)
                   .map(String::toUpperCase)
                   .doOnNext(results::add)
                   .subscribe(v -&amp;gt; done.countDown());&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This technique is used now in the existing &lt;code&gt;IntegrationFlowDefinition.toReactivePublisher()&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@Bean
public Publisher&amp;lt;Message&amp;lt;Integer&amp;gt;&amp;gt; pollableReactiveFlow() {
    return IntegrationFlows
             .from("inputChannel")
             .split(s -&amp;gt; s.delimiters(","))
             .&amp;lt;String, Integer&amp;gt;transform(Integer::parseInt)
             .channel(MessageChannels.queue())
             .toReactivePublisher();
}
...
@Autowired
@Qualifier("pollableReactiveFlow")
private Publisher&amp;lt;Message&amp;lt;Integer&amp;gt;&amp;gt; pollablePublisher;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;code&gt;ReactiveChannel&lt;/code&gt; now has ability to subscribe to upstream &lt;code&gt;Publisher&lt;/code&gt; alongside with the regular (but back pressure) &lt;code&gt;send(Message&amp;lt;?&amp;gt;)&lt;/code&gt; implementation.
This allowed us to introduce a feature like start an &lt;code&gt;IntegrationFlow&lt;/code&gt; from the &lt;code&gt;Publisher&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;Flux&amp;lt;Message&amp;lt;?&amp;gt;&amp;gt; messageFlux = Flux.just("1,2,3,4")
        .map(v -&amp;gt; v.split(","))
        .flatMapIterable(Arrays::asList)
        .map(Integer::parseInt)
        .map(GenericMessage&amp;lt;Integer&amp;gt;::new);

QueueChannel resultChannel = new QueueChannel();

IntegrationFlow integrationFlow =
        IntegrationFlows.from(messageFlux)
                .&amp;lt;Integer, Integer&amp;gt;transform(p -&amp;gt; p * 2)
                .channel(resultChannel)
                .get();

this.integrationFlowContext.registration(integrationFlow)
        .register();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Such wise and placing &lt;code&gt;ReactiveChannel&lt;/code&gt; in between endpoints (&lt;code&gt;MessageChannels.reactive()&lt;/code&gt;), we can reach the best of both integration and reactive worlds!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;See &lt;a href="http://docs.spring.io/spring-integration/docs/5.0.0.M2/reference/html/whats-new.html"&gt;What&amp;#8217;s New&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We are going to provide more features and improvement in the next Milestones, so, stay tuned and don&amp;#8217;t hesitate to come back to us for any feedback!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-integration/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-integration"&gt;GitHub&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-integration"&gt;Help&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-integration/reference/html/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-integration"&gt;Chat&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
</feed>
