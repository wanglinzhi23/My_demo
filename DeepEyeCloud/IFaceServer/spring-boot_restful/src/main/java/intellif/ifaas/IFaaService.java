/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package intellif.ifaas;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-8-31")
public class IFaaService {

  public interface Iface {

    public List<T_IF_FACERECT> face_detect_extract(String inputImgName, long tId, int extType) throws org.apache.thrift.TException;

    public List<T_IF_FACERECT> image_detect_extract(String inputImgName, long fromImgId) throws org.apache.thrift.TException;

    public T_MulAlgFeatureExtRsp multip_feature_query(T_MulAlgFeatureExtReq tMulFeatureExtPara) throws org.apache.thrift.TException;

    public double face_feature_verify(String inputFace0, String inputFace1) throws org.apache.thrift.TException;

    public double mulalg_feature_verify(String inputFace0, String inputFace1, int type) throws org.apache.thrift.TException;

    public double face_feature_compare(int faceType0, long faceId0, int faceType1, long faceId1) throws org.apache.thrift.TException;

    public int task_surveillance_create(T_IF_TASK_INFO info) throws org.apache.thrift.TException;

    public int task_surveillance_terminate(long taskId) throws org.apache.thrift.TException;

    public int task_snaper_create(int sourceType, long sourceId) throws org.apache.thrift.TException;

    public int task_snaper_terminate(int sourceType, long sourceId) throws org.apache.thrift.TException;

    public int iface_engin_ioctrl(int type, long para0, long para1, long para2, long para3) throws org.apache.thrift.TException;

    public int multi_face_verify_url(List<String> listPaths) throws org.apache.thrift.TException;

    public int multi_face_verify_bin(List<ByteBuffer> listImgDat) throws org.apache.thrift.TException;

    public double multi_face_compare_bin(ByteBuffer imgdata1, ByteBuffer imgdata2) throws org.apache.thrift.TException;

    public int multi_image_import(List<ByteBuffer> listImgInfo, int type, int srcType, long srcId) throws org.apache.thrift.TException;

    /**
     * **********************************************************************************
     * inputImgName  ImgPath
     * feceId
     * return string json { 'Rect':{ 'bottom':403,'left':680,'right':774,'top':309}}
     * *************************************************************************************
     * 
     * @param inputImgName
     * @param feceId
     */
    public String face_detect_rect(String inputImgName, long feceId) throws org.apache.thrift.TException;

    public T_CapRstOndemand capture_on_demand(long srcId) throws org.apache.thrift.TException;

    public int iface_merge_ctrl(String inputJsonParam) throws org.apache.thrift.TException;

    public int iface_add_camera(long dwCameraId, String strIpcAdr, int dwIpcPort, String strIpcUsr, String strIpcPwd, int dwEngineId) throws org.apache.thrift.TException;

    public T_ProgressQueryRst query_prgress_rate(int QueryType, int ProgressId) throws org.apache.thrift.TException;

    public int engine_update_status(String status) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void face_detect_extract(String inputImgName, long tId, int extType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void image_detect_extract(String inputImgName, long fromImgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void multip_feature_query(T_MulAlgFeatureExtReq tMulFeatureExtPara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void face_feature_verify(String inputFace0, String inputFace1, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void mulalg_feature_verify(String inputFace0, String inputFace1, int type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void face_feature_compare(int faceType0, long faceId0, int faceType1, long faceId1, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void task_surveillance_create(T_IF_TASK_INFO info, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void task_surveillance_terminate(long taskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void task_snaper_create(int sourceType, long sourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void task_snaper_terminate(int sourceType, long sourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void iface_engin_ioctrl(int type, long para0, long para1, long para2, long para3, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void multi_face_verify_url(List<String> listPaths, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void multi_face_verify_bin(List<ByteBuffer> listImgDat, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void multi_face_compare_bin(ByteBuffer imgdata1, ByteBuffer imgdata2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void multi_image_import(List<ByteBuffer> listImgInfo, int type, int srcType, long srcId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void face_detect_rect(String inputImgName, long feceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void capture_on_demand(long srcId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void iface_merge_ctrl(String inputJsonParam, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void iface_add_camera(long dwCameraId, String strIpcAdr, int dwIpcPort, String strIpcUsr, String strIpcPwd, int dwEngineId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void query_prgress_rate(int QueryType, int ProgressId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void engine_update_status(String status, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<T_IF_FACERECT> face_detect_extract(String inputImgName, long tId, int extType) throws org.apache.thrift.TException
    {
      send_face_detect_extract(inputImgName, tId, extType);
      return recv_face_detect_extract();
    }

    public void send_face_detect_extract(String inputImgName, long tId, int extType) throws org.apache.thrift.TException
    {
      face_detect_extract_args args = new face_detect_extract_args();
      args.setInputImgName(inputImgName);
      args.setTId(tId);
      args.setExtType(extType);
      sendBase("face_detect_extract", args);
    }

    public List<T_IF_FACERECT> recv_face_detect_extract() throws org.apache.thrift.TException
    {
      face_detect_extract_result result = new face_detect_extract_result();
      receiveBase(result, "face_detect_extract");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "face_detect_extract failed: unknown result");
    }

    public List<T_IF_FACERECT> image_detect_extract(String inputImgName, long fromImgId) throws org.apache.thrift.TException
    {
      send_image_detect_extract(inputImgName, fromImgId);
      return recv_image_detect_extract();
    }

    public void send_image_detect_extract(String inputImgName, long fromImgId) throws org.apache.thrift.TException
    {
      image_detect_extract_args args = new image_detect_extract_args();
      args.setInputImgName(inputImgName);
      args.setFromImgId(fromImgId);
      sendBase("image_detect_extract", args);
    }

    public List<T_IF_FACERECT> recv_image_detect_extract() throws org.apache.thrift.TException
    {
      image_detect_extract_result result = new image_detect_extract_result();
      receiveBase(result, "image_detect_extract");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "image_detect_extract failed: unknown result");
    }

    public T_MulAlgFeatureExtRsp multip_feature_query(T_MulAlgFeatureExtReq tMulFeatureExtPara) throws org.apache.thrift.TException
    {
      send_multip_feature_query(tMulFeatureExtPara);
      return recv_multip_feature_query();
    }

    public void send_multip_feature_query(T_MulAlgFeatureExtReq tMulFeatureExtPara) throws org.apache.thrift.TException
    {
      multip_feature_query_args args = new multip_feature_query_args();
      args.setTMulFeatureExtPara(tMulFeatureExtPara);
      sendBase("multip_feature_query", args);
    }

    public T_MulAlgFeatureExtRsp recv_multip_feature_query() throws org.apache.thrift.TException
    {
      multip_feature_query_result result = new multip_feature_query_result();
      receiveBase(result, "multip_feature_query");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "multip_feature_query failed: unknown result");
    }

    public double face_feature_verify(String inputFace0, String inputFace1) throws org.apache.thrift.TException
    {
      send_face_feature_verify(inputFace0, inputFace1);
      return recv_face_feature_verify();
    }

    public void send_face_feature_verify(String inputFace0, String inputFace1) throws org.apache.thrift.TException
    {
      face_feature_verify_args args = new face_feature_verify_args();
      args.setInputFace0(inputFace0);
      args.setInputFace1(inputFace1);
      sendBase("face_feature_verify", args);
    }

    public double recv_face_feature_verify() throws org.apache.thrift.TException
    {
      face_feature_verify_result result = new face_feature_verify_result();
      receiveBase(result, "face_feature_verify");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "face_feature_verify failed: unknown result");
    }

    public double mulalg_feature_verify(String inputFace0, String inputFace1, int type) throws org.apache.thrift.TException
    {
      send_mulalg_feature_verify(inputFace0, inputFace1, type);
      return recv_mulalg_feature_verify();
    }

    public void send_mulalg_feature_verify(String inputFace0, String inputFace1, int type) throws org.apache.thrift.TException
    {
      mulalg_feature_verify_args args = new mulalg_feature_verify_args();
      args.setInputFace0(inputFace0);
      args.setInputFace1(inputFace1);
      args.setType(type);
      sendBase("mulalg_feature_verify", args);
    }

    public double recv_mulalg_feature_verify() throws org.apache.thrift.TException
    {
      mulalg_feature_verify_result result = new mulalg_feature_verify_result();
      receiveBase(result, "mulalg_feature_verify");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "mulalg_feature_verify failed: unknown result");
    }

    public double face_feature_compare(int faceType0, long faceId0, int faceType1, long faceId1) throws org.apache.thrift.TException
    {
      send_face_feature_compare(faceType0, faceId0, faceType1, faceId1);
      return recv_face_feature_compare();
    }

    public void send_face_feature_compare(int faceType0, long faceId0, int faceType1, long faceId1) throws org.apache.thrift.TException
    {
      face_feature_compare_args args = new face_feature_compare_args();
      args.setFaceType0(faceType0);
      args.setFaceId0(faceId0);
      args.setFaceType1(faceType1);
      args.setFaceId1(faceId1);
      sendBase("face_feature_compare", args);
    }

    public double recv_face_feature_compare() throws org.apache.thrift.TException
    {
      face_feature_compare_result result = new face_feature_compare_result();
      receiveBase(result, "face_feature_compare");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "face_feature_compare failed: unknown result");
    }

    public int task_surveillance_create(T_IF_TASK_INFO info) throws org.apache.thrift.TException
    {
      send_task_surveillance_create(info);
      return recv_task_surveillance_create();
    }

    public void send_task_surveillance_create(T_IF_TASK_INFO info) throws org.apache.thrift.TException
    {
      task_surveillance_create_args args = new task_surveillance_create_args();
      args.setInfo(info);
      sendBase("task_surveillance_create", args);
    }

    public int recv_task_surveillance_create() throws org.apache.thrift.TException
    {
      task_surveillance_create_result result = new task_surveillance_create_result();
      receiveBase(result, "task_surveillance_create");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "task_surveillance_create failed: unknown result");
    }

    public int task_surveillance_terminate(long taskId) throws org.apache.thrift.TException
    {
      send_task_surveillance_terminate(taskId);
      return recv_task_surveillance_terminate();
    }

    public void send_task_surveillance_terminate(long taskId) throws org.apache.thrift.TException
    {
      task_surveillance_terminate_args args = new task_surveillance_terminate_args();
      args.setTaskId(taskId);
      sendBase("task_surveillance_terminate", args);
    }

    public int recv_task_surveillance_terminate() throws org.apache.thrift.TException
    {
      task_surveillance_terminate_result result = new task_surveillance_terminate_result();
      receiveBase(result, "task_surveillance_terminate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "task_surveillance_terminate failed: unknown result");
    }

    public int task_snaper_create(int sourceType, long sourceId) throws org.apache.thrift.TException
    {
      send_task_snaper_create(sourceType, sourceId);
      return recv_task_snaper_create();
    }

    public void send_task_snaper_create(int sourceType, long sourceId) throws org.apache.thrift.TException
    {
      task_snaper_create_args args = new task_snaper_create_args();
      args.setSourceType(sourceType);
      args.setSourceId(sourceId);
      sendBase("task_snaper_create", args);
    }

    public int recv_task_snaper_create() throws org.apache.thrift.TException
    {
      task_snaper_create_result result = new task_snaper_create_result();
      receiveBase(result, "task_snaper_create");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "task_snaper_create failed: unknown result");
    }

    public int task_snaper_terminate(int sourceType, long sourceId) throws org.apache.thrift.TException
    {
      send_task_snaper_terminate(sourceType, sourceId);
      return recv_task_snaper_terminate();
    }

    public void send_task_snaper_terminate(int sourceType, long sourceId) throws org.apache.thrift.TException
    {
      task_snaper_terminate_args args = new task_snaper_terminate_args();
      args.setSourceType(sourceType);
      args.setSourceId(sourceId);
      sendBase("task_snaper_terminate", args);
    }

    public int recv_task_snaper_terminate() throws org.apache.thrift.TException
    {
      task_snaper_terminate_result result = new task_snaper_terminate_result();
      receiveBase(result, "task_snaper_terminate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "task_snaper_terminate failed: unknown result");
    }

    public int iface_engin_ioctrl(int type, long para0, long para1, long para2, long para3) throws org.apache.thrift.TException
    {
      send_iface_engin_ioctrl(type, para0, para1, para2, para3);
      return recv_iface_engin_ioctrl();
    }

    public void send_iface_engin_ioctrl(int type, long para0, long para1, long para2, long para3) throws org.apache.thrift.TException
    {
      iface_engin_ioctrl_args args = new iface_engin_ioctrl_args();
      args.setType(type);
      args.setPara0(para0);
      args.setPara1(para1);
      args.setPara2(para2);
      args.setPara3(para3);
      sendBase("iface_engin_ioctrl", args);
    }

    public int recv_iface_engin_ioctrl() throws org.apache.thrift.TException
    {
      iface_engin_ioctrl_result result = new iface_engin_ioctrl_result();
      receiveBase(result, "iface_engin_ioctrl");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "iface_engin_ioctrl failed: unknown result");
    }

    public int multi_face_verify_url(List<String> listPaths) throws org.apache.thrift.TException
    {
      send_multi_face_verify_url(listPaths);
      return recv_multi_face_verify_url();
    }

    public void send_multi_face_verify_url(List<String> listPaths) throws org.apache.thrift.TException
    {
      multi_face_verify_url_args args = new multi_face_verify_url_args();
      args.setListPaths(listPaths);
      sendBase("multi_face_verify_url", args);
    }

    public int recv_multi_face_verify_url() throws org.apache.thrift.TException
    {
      multi_face_verify_url_result result = new multi_face_verify_url_result();
      receiveBase(result, "multi_face_verify_url");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "multi_face_verify_url failed: unknown result");
    }

    public int multi_face_verify_bin(List<ByteBuffer> listImgDat) throws org.apache.thrift.TException
    {
      send_multi_face_verify_bin(listImgDat);
      return recv_multi_face_verify_bin();
    }

    public void send_multi_face_verify_bin(List<ByteBuffer> listImgDat) throws org.apache.thrift.TException
    {
      multi_face_verify_bin_args args = new multi_face_verify_bin_args();
      args.setListImgDat(listImgDat);
      sendBase("multi_face_verify_bin", args);
    }

    public int recv_multi_face_verify_bin() throws org.apache.thrift.TException
    {
      multi_face_verify_bin_result result = new multi_face_verify_bin_result();
      receiveBase(result, "multi_face_verify_bin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "multi_face_verify_bin failed: unknown result");
    }

    public double multi_face_compare_bin(ByteBuffer imgdata1, ByteBuffer imgdata2) throws org.apache.thrift.TException
    {
      send_multi_face_compare_bin(imgdata1, imgdata2);
      return recv_multi_face_compare_bin();
    }

    public void send_multi_face_compare_bin(ByteBuffer imgdata1, ByteBuffer imgdata2) throws org.apache.thrift.TException
    {
      multi_face_compare_bin_args args = new multi_face_compare_bin_args();
      args.setImgdata1(imgdata1);
      args.setImgdata2(imgdata2);
      sendBase("multi_face_compare_bin", args);
    }

    public double recv_multi_face_compare_bin() throws org.apache.thrift.TException
    {
      multi_face_compare_bin_result result = new multi_face_compare_bin_result();
      receiveBase(result, "multi_face_compare_bin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "multi_face_compare_bin failed: unknown result");
    }

    public int multi_image_import(List<ByteBuffer> listImgInfo, int type, int srcType, long srcId) throws org.apache.thrift.TException
    {
      send_multi_image_import(listImgInfo, type, srcType, srcId);
      return recv_multi_image_import();
    }

    public void send_multi_image_import(List<ByteBuffer> listImgInfo, int type, int srcType, long srcId) throws org.apache.thrift.TException
    {
      multi_image_import_args args = new multi_image_import_args();
      args.setListImgInfo(listImgInfo);
      args.setType(type);
      args.setSrcType(srcType);
      args.setSrcId(srcId);
      sendBase("multi_image_import", args);
    }

    public int recv_multi_image_import() throws org.apache.thrift.TException
    {
      multi_image_import_result result = new multi_image_import_result();
      receiveBase(result, "multi_image_import");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "multi_image_import failed: unknown result");
    }

    public String face_detect_rect(String inputImgName, long feceId) throws org.apache.thrift.TException
    {
      send_face_detect_rect(inputImgName, feceId);
      return recv_face_detect_rect();
    }

    public void send_face_detect_rect(String inputImgName, long feceId) throws org.apache.thrift.TException
    {
      face_detect_rect_args args = new face_detect_rect_args();
      args.setInputImgName(inputImgName);
      args.setFeceId(feceId);
      sendBase("face_detect_rect", args);
    }

    public String recv_face_detect_rect() throws org.apache.thrift.TException
    {
      face_detect_rect_result result = new face_detect_rect_result();
      receiveBase(result, "face_detect_rect");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "face_detect_rect failed: unknown result");
    }

    public T_CapRstOndemand capture_on_demand(long srcId) throws org.apache.thrift.TException
    {
      send_capture_on_demand(srcId);
      return recv_capture_on_demand();
    }

    public void send_capture_on_demand(long srcId) throws org.apache.thrift.TException
    {
      capture_on_demand_args args = new capture_on_demand_args();
      args.setSrcId(srcId);
      sendBase("capture_on_demand", args);
    }

    public T_CapRstOndemand recv_capture_on_demand() throws org.apache.thrift.TException
    {
      capture_on_demand_result result = new capture_on_demand_result();
      receiveBase(result, "capture_on_demand");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "capture_on_demand failed: unknown result");
    }

    public int iface_merge_ctrl(String inputJsonParam) throws org.apache.thrift.TException
    {
      send_iface_merge_ctrl(inputJsonParam);
      return recv_iface_merge_ctrl();
    }

    public void send_iface_merge_ctrl(String inputJsonParam) throws org.apache.thrift.TException
    {
      iface_merge_ctrl_args args = new iface_merge_ctrl_args();
      args.setInputJsonParam(inputJsonParam);
      sendBase("iface_merge_ctrl", args);
    }

    public int recv_iface_merge_ctrl() throws org.apache.thrift.TException
    {
      iface_merge_ctrl_result result = new iface_merge_ctrl_result();
      receiveBase(result, "iface_merge_ctrl");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "iface_merge_ctrl failed: unknown result");
    }

    public int iface_add_camera(long dwCameraId, String strIpcAdr, int dwIpcPort, String strIpcUsr, String strIpcPwd, int dwEngineId) throws org.apache.thrift.TException
    {
      send_iface_add_camera(dwCameraId, strIpcAdr, dwIpcPort, strIpcUsr, strIpcPwd, dwEngineId);
      return recv_iface_add_camera();
    }

    public void send_iface_add_camera(long dwCameraId, String strIpcAdr, int dwIpcPort, String strIpcUsr, String strIpcPwd, int dwEngineId) throws org.apache.thrift.TException
    {
      iface_add_camera_args args = new iface_add_camera_args();
      args.setDwCameraId(dwCameraId);
      args.setStrIpcAdr(strIpcAdr);
      args.setDwIpcPort(dwIpcPort);
      args.setStrIpcUsr(strIpcUsr);
      args.setStrIpcPwd(strIpcPwd);
      args.setDwEngineId(dwEngineId);
      sendBase("iface_add_camera", args);
    }

    public int recv_iface_add_camera() throws org.apache.thrift.TException
    {
      iface_add_camera_result result = new iface_add_camera_result();
      receiveBase(result, "iface_add_camera");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "iface_add_camera failed: unknown result");
    }

    public T_ProgressQueryRst query_prgress_rate(int QueryType, int ProgressId) throws org.apache.thrift.TException
    {
      send_query_prgress_rate(QueryType, ProgressId);
      return recv_query_prgress_rate();
    }

    public void send_query_prgress_rate(int QueryType, int ProgressId) throws org.apache.thrift.TException
    {
      query_prgress_rate_args args = new query_prgress_rate_args();
      args.setQueryType(QueryType);
      args.setProgressId(ProgressId);
      sendBase("query_prgress_rate", args);
    }

    public T_ProgressQueryRst recv_query_prgress_rate() throws org.apache.thrift.TException
    {
      query_prgress_rate_result result = new query_prgress_rate_result();
      receiveBase(result, "query_prgress_rate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query_prgress_rate failed: unknown result");
    }

    public int engine_update_status(String status) throws org.apache.thrift.TException
    {
      send_engine_update_status(status);
      return recv_engine_update_status();
    }

    public void send_engine_update_status(String status) throws org.apache.thrift.TException
    {
      engine_update_status_args args = new engine_update_status_args();
      args.setStatus(status);
      sendBase("engine_update_status", args);
    }

    public int recv_engine_update_status() throws org.apache.thrift.TException
    {
      engine_update_status_result result = new engine_update_status_result();
      receiveBase(result, "engine_update_status");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "engine_update_status failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void face_detect_extract(String inputImgName, long tId, int extType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      face_detect_extract_call method_call = new face_detect_extract_call(inputImgName, tId, extType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class face_detect_extract_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inputImgName;
      private long tId;
      private int extType;
      public face_detect_extract_call(String inputImgName, long tId, int extType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inputImgName = inputImgName;
        this.tId = tId;
        this.extType = extType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("face_detect_extract", org.apache.thrift.protocol.TMessageType.CALL, 0));
        face_detect_extract_args args = new face_detect_extract_args();
        args.setInputImgName(inputImgName);
        args.setTId(tId);
        args.setExtType(extType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<T_IF_FACERECT> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_face_detect_extract();
      }
    }

    public void image_detect_extract(String inputImgName, long fromImgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      image_detect_extract_call method_call = new image_detect_extract_call(inputImgName, fromImgId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class image_detect_extract_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inputImgName;
      private long fromImgId;
      public image_detect_extract_call(String inputImgName, long fromImgId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inputImgName = inputImgName;
        this.fromImgId = fromImgId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("image_detect_extract", org.apache.thrift.protocol.TMessageType.CALL, 0));
        image_detect_extract_args args = new image_detect_extract_args();
        args.setInputImgName(inputImgName);
        args.setFromImgId(fromImgId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<T_IF_FACERECT> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_image_detect_extract();
      }
    }

    public void multip_feature_query(T_MulAlgFeatureExtReq tMulFeatureExtPara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multip_feature_query_call method_call = new multip_feature_query_call(tMulFeatureExtPara, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multip_feature_query_call extends org.apache.thrift.async.TAsyncMethodCall {
      private T_MulAlgFeatureExtReq tMulFeatureExtPara;
      public multip_feature_query_call(T_MulAlgFeatureExtReq tMulFeatureExtPara, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tMulFeatureExtPara = tMulFeatureExtPara;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multip_feature_query", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multip_feature_query_args args = new multip_feature_query_args();
        args.setTMulFeatureExtPara(tMulFeatureExtPara);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public T_MulAlgFeatureExtRsp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multip_feature_query();
      }
    }

    public void face_feature_verify(String inputFace0, String inputFace1, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      face_feature_verify_call method_call = new face_feature_verify_call(inputFace0, inputFace1, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class face_feature_verify_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inputFace0;
      private String inputFace1;
      public face_feature_verify_call(String inputFace0, String inputFace1, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inputFace0 = inputFace0;
        this.inputFace1 = inputFace1;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("face_feature_verify", org.apache.thrift.protocol.TMessageType.CALL, 0));
        face_feature_verify_args args = new face_feature_verify_args();
        args.setInputFace0(inputFace0);
        args.setInputFace1(inputFace1);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_face_feature_verify();
      }
    }

    public void mulalg_feature_verify(String inputFace0, String inputFace1, int type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mulalg_feature_verify_call method_call = new mulalg_feature_verify_call(inputFace0, inputFace1, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mulalg_feature_verify_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inputFace0;
      private String inputFace1;
      private int type;
      public mulalg_feature_verify_call(String inputFace0, String inputFace1, int type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inputFace0 = inputFace0;
        this.inputFace1 = inputFace1;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mulalg_feature_verify", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mulalg_feature_verify_args args = new mulalg_feature_verify_args();
        args.setInputFace0(inputFace0);
        args.setInputFace1(inputFace1);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_mulalg_feature_verify();
      }
    }

    public void face_feature_compare(int faceType0, long faceId0, int faceType1, long faceId1, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      face_feature_compare_call method_call = new face_feature_compare_call(faceType0, faceId0, faceType1, faceId1, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class face_feature_compare_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int faceType0;
      private long faceId0;
      private int faceType1;
      private long faceId1;
      public face_feature_compare_call(int faceType0, long faceId0, int faceType1, long faceId1, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.faceType0 = faceType0;
        this.faceId0 = faceId0;
        this.faceType1 = faceType1;
        this.faceId1 = faceId1;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("face_feature_compare", org.apache.thrift.protocol.TMessageType.CALL, 0));
        face_feature_compare_args args = new face_feature_compare_args();
        args.setFaceType0(faceType0);
        args.setFaceId0(faceId0);
        args.setFaceType1(faceType1);
        args.setFaceId1(faceId1);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_face_feature_compare();
      }
    }

    public void task_surveillance_create(T_IF_TASK_INFO info, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      task_surveillance_create_call method_call = new task_surveillance_create_call(info, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class task_surveillance_create_call extends org.apache.thrift.async.TAsyncMethodCall {
      private T_IF_TASK_INFO info;
      public task_surveillance_create_call(T_IF_TASK_INFO info, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.info = info;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("task_surveillance_create", org.apache.thrift.protocol.TMessageType.CALL, 0));
        task_surveillance_create_args args = new task_surveillance_create_args();
        args.setInfo(info);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_task_surveillance_create();
      }
    }

    public void task_surveillance_terminate(long taskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      task_surveillance_terminate_call method_call = new task_surveillance_terminate_call(taskId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class task_surveillance_terminate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long taskId;
      public task_surveillance_terminate_call(long taskId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskId = taskId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("task_surveillance_terminate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        task_surveillance_terminate_args args = new task_surveillance_terminate_args();
        args.setTaskId(taskId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_task_surveillance_terminate();
      }
    }

    public void task_snaper_create(int sourceType, long sourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      task_snaper_create_call method_call = new task_snaper_create_call(sourceType, sourceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class task_snaper_create_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int sourceType;
      private long sourceId;
      public task_snaper_create_call(int sourceType, long sourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sourceType = sourceType;
        this.sourceId = sourceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("task_snaper_create", org.apache.thrift.protocol.TMessageType.CALL, 0));
        task_snaper_create_args args = new task_snaper_create_args();
        args.setSourceType(sourceType);
        args.setSourceId(sourceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_task_snaper_create();
      }
    }

    public void task_snaper_terminate(int sourceType, long sourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      task_snaper_terminate_call method_call = new task_snaper_terminate_call(sourceType, sourceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class task_snaper_terminate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int sourceType;
      private long sourceId;
      public task_snaper_terminate_call(int sourceType, long sourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sourceType = sourceType;
        this.sourceId = sourceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("task_snaper_terminate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        task_snaper_terminate_args args = new task_snaper_terminate_args();
        args.setSourceType(sourceType);
        args.setSourceId(sourceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_task_snaper_terminate();
      }
    }

    public void iface_engin_ioctrl(int type, long para0, long para1, long para2, long para3, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      iface_engin_ioctrl_call method_call = new iface_engin_ioctrl_call(type, para0, para1, para2, para3, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class iface_engin_ioctrl_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int type;
      private long para0;
      private long para1;
      private long para2;
      private long para3;
      public iface_engin_ioctrl_call(int type, long para0, long para1, long para2, long para3, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.type = type;
        this.para0 = para0;
        this.para1 = para1;
        this.para2 = para2;
        this.para3 = para3;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("iface_engin_ioctrl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        iface_engin_ioctrl_args args = new iface_engin_ioctrl_args();
        args.setType(type);
        args.setPara0(para0);
        args.setPara1(para1);
        args.setPara2(para2);
        args.setPara3(para3);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_iface_engin_ioctrl();
      }
    }

    public void multi_face_verify_url(List<String> listPaths, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multi_face_verify_url_call method_call = new multi_face_verify_url_call(listPaths, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multi_face_verify_url_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> listPaths;
      public multi_face_verify_url_call(List<String> listPaths, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listPaths = listPaths;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multi_face_verify_url", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multi_face_verify_url_args args = new multi_face_verify_url_args();
        args.setListPaths(listPaths);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multi_face_verify_url();
      }
    }

    public void multi_face_verify_bin(List<ByteBuffer> listImgDat, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multi_face_verify_bin_call method_call = new multi_face_verify_bin_call(listImgDat, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multi_face_verify_bin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ByteBuffer> listImgDat;
      public multi_face_verify_bin_call(List<ByteBuffer> listImgDat, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listImgDat = listImgDat;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multi_face_verify_bin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multi_face_verify_bin_args args = new multi_face_verify_bin_args();
        args.setListImgDat(listImgDat);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multi_face_verify_bin();
      }
    }

    public void multi_face_compare_bin(ByteBuffer imgdata1, ByteBuffer imgdata2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multi_face_compare_bin_call method_call = new multi_face_compare_bin_call(imgdata1, imgdata2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multi_face_compare_bin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer imgdata1;
      private ByteBuffer imgdata2;
      public multi_face_compare_bin_call(ByteBuffer imgdata1, ByteBuffer imgdata2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.imgdata1 = imgdata1;
        this.imgdata2 = imgdata2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multi_face_compare_bin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multi_face_compare_bin_args args = new multi_face_compare_bin_args();
        args.setImgdata1(imgdata1);
        args.setImgdata2(imgdata2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multi_face_compare_bin();
      }
    }

    public void multi_image_import(List<ByteBuffer> listImgInfo, int type, int srcType, long srcId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multi_image_import_call method_call = new multi_image_import_call(listImgInfo, type, srcType, srcId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multi_image_import_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ByteBuffer> listImgInfo;
      private int type;
      private int srcType;
      private long srcId;
      public multi_image_import_call(List<ByteBuffer> listImgInfo, int type, int srcType, long srcId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listImgInfo = listImgInfo;
        this.type = type;
        this.srcType = srcType;
        this.srcId = srcId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multi_image_import", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multi_image_import_args args = new multi_image_import_args();
        args.setListImgInfo(listImgInfo);
        args.setType(type);
        args.setSrcType(srcType);
        args.setSrcId(srcId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multi_image_import();
      }
    }

    public void face_detect_rect(String inputImgName, long feceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      face_detect_rect_call method_call = new face_detect_rect_call(inputImgName, feceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class face_detect_rect_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inputImgName;
      private long feceId;
      public face_detect_rect_call(String inputImgName, long feceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inputImgName = inputImgName;
        this.feceId = feceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("face_detect_rect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        face_detect_rect_args args = new face_detect_rect_args();
        args.setInputImgName(inputImgName);
        args.setFeceId(feceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_face_detect_rect();
      }
    }

    public void capture_on_demand(long srcId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      capture_on_demand_call method_call = new capture_on_demand_call(srcId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class capture_on_demand_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long srcId;
      public capture_on_demand_call(long srcId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.srcId = srcId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("capture_on_demand", org.apache.thrift.protocol.TMessageType.CALL, 0));
        capture_on_demand_args args = new capture_on_demand_args();
        args.setSrcId(srcId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public T_CapRstOndemand getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_capture_on_demand();
      }
    }

    public void iface_merge_ctrl(String inputJsonParam, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      iface_merge_ctrl_call method_call = new iface_merge_ctrl_call(inputJsonParam, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class iface_merge_ctrl_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inputJsonParam;
      public iface_merge_ctrl_call(String inputJsonParam, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inputJsonParam = inputJsonParam;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("iface_merge_ctrl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        iface_merge_ctrl_args args = new iface_merge_ctrl_args();
        args.setInputJsonParam(inputJsonParam);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_iface_merge_ctrl();
      }
    }

    public void iface_add_camera(long dwCameraId, String strIpcAdr, int dwIpcPort, String strIpcUsr, String strIpcPwd, int dwEngineId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      iface_add_camera_call method_call = new iface_add_camera_call(dwCameraId, strIpcAdr, dwIpcPort, strIpcUsr, strIpcPwd, dwEngineId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class iface_add_camera_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long dwCameraId;
      private String strIpcAdr;
      private int dwIpcPort;
      private String strIpcUsr;
      private String strIpcPwd;
      private int dwEngineId;
      public iface_add_camera_call(long dwCameraId, String strIpcAdr, int dwIpcPort, String strIpcUsr, String strIpcPwd, int dwEngineId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dwCameraId = dwCameraId;
        this.strIpcAdr = strIpcAdr;
        this.dwIpcPort = dwIpcPort;
        this.strIpcUsr = strIpcUsr;
        this.strIpcPwd = strIpcPwd;
        this.dwEngineId = dwEngineId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("iface_add_camera", org.apache.thrift.protocol.TMessageType.CALL, 0));
        iface_add_camera_args args = new iface_add_camera_args();
        args.setDwCameraId(dwCameraId);
        args.setStrIpcAdr(strIpcAdr);
        args.setDwIpcPort(dwIpcPort);
        args.setStrIpcUsr(strIpcUsr);
        args.setStrIpcPwd(strIpcPwd);
        args.setDwEngineId(dwEngineId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_iface_add_camera();
      }
    }

    public void query_prgress_rate(int QueryType, int ProgressId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_prgress_rate_call method_call = new query_prgress_rate_call(QueryType, ProgressId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_prgress_rate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int QueryType;
      private int ProgressId;
      public query_prgress_rate_call(int QueryType, int ProgressId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.QueryType = QueryType;
        this.ProgressId = ProgressId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query_prgress_rate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_prgress_rate_args args = new query_prgress_rate_args();
        args.setQueryType(QueryType);
        args.setProgressId(ProgressId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public T_ProgressQueryRst getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query_prgress_rate();
      }
    }

    public void engine_update_status(String status, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      engine_update_status_call method_call = new engine_update_status_call(status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class engine_update_status_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String status;
      public engine_update_status_call(String status, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("engine_update_status", org.apache.thrift.protocol.TMessageType.CALL, 0));
        engine_update_status_args args = new engine_update_status_args();
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_engine_update_status();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("face_detect_extract", new face_detect_extract());
      processMap.put("image_detect_extract", new image_detect_extract());
      processMap.put("multip_feature_query", new multip_feature_query());
      processMap.put("face_feature_verify", new face_feature_verify());
      processMap.put("mulalg_feature_verify", new mulalg_feature_verify());
      processMap.put("face_feature_compare", new face_feature_compare());
      processMap.put("task_surveillance_create", new task_surveillance_create());
      processMap.put("task_surveillance_terminate", new task_surveillance_terminate());
      processMap.put("task_snaper_create", new task_snaper_create());
      processMap.put("task_snaper_terminate", new task_snaper_terminate());
      processMap.put("iface_engin_ioctrl", new iface_engin_ioctrl());
      processMap.put("multi_face_verify_url", new multi_face_verify_url());
      processMap.put("multi_face_verify_bin", new multi_face_verify_bin());
      processMap.put("multi_face_compare_bin", new multi_face_compare_bin());
      processMap.put("multi_image_import", new multi_image_import());
      processMap.put("face_detect_rect", new face_detect_rect());
      processMap.put("capture_on_demand", new capture_on_demand());
      processMap.put("iface_merge_ctrl", new iface_merge_ctrl());
      processMap.put("iface_add_camera", new iface_add_camera());
      processMap.put("query_prgress_rate", new query_prgress_rate());
      processMap.put("engine_update_status", new engine_update_status());
      return processMap;
    }

    public static class face_detect_extract<I extends Iface> extends org.apache.thrift.ProcessFunction<I, face_detect_extract_args> {
      public face_detect_extract() {
        super("face_detect_extract");
      }

      public face_detect_extract_args getEmptyArgsInstance() {
        return new face_detect_extract_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public face_detect_extract_result getResult(I iface, face_detect_extract_args args) throws org.apache.thrift.TException {
        face_detect_extract_result result = new face_detect_extract_result();
        result.success = iface.face_detect_extract(args.inputImgName, args.tId, args.extType);
        return result;
      }
    }

    public static class image_detect_extract<I extends Iface> extends org.apache.thrift.ProcessFunction<I, image_detect_extract_args> {
      public image_detect_extract() {
        super("image_detect_extract");
      }

      public image_detect_extract_args getEmptyArgsInstance() {
        return new image_detect_extract_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public image_detect_extract_result getResult(I iface, image_detect_extract_args args) throws org.apache.thrift.TException {
        image_detect_extract_result result = new image_detect_extract_result();
        result.success = iface.image_detect_extract(args.inputImgName, args.fromImgId);
        return result;
      }
    }

    public static class multip_feature_query<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multip_feature_query_args> {
      public multip_feature_query() {
        super("multip_feature_query");
      }

      public multip_feature_query_args getEmptyArgsInstance() {
        return new multip_feature_query_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public multip_feature_query_result getResult(I iface, multip_feature_query_args args) throws org.apache.thrift.TException {
        multip_feature_query_result result = new multip_feature_query_result();
        result.success = iface.multip_feature_query(args.tMulFeatureExtPara);
        return result;
      }
    }

    public static class face_feature_verify<I extends Iface> extends org.apache.thrift.ProcessFunction<I, face_feature_verify_args> {
      public face_feature_verify() {
        super("face_feature_verify");
      }

      public face_feature_verify_args getEmptyArgsInstance() {
        return new face_feature_verify_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public face_feature_verify_result getResult(I iface, face_feature_verify_args args) throws org.apache.thrift.TException {
        face_feature_verify_result result = new face_feature_verify_result();
        result.success = iface.face_feature_verify(args.inputFace0, args.inputFace1);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class mulalg_feature_verify<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mulalg_feature_verify_args> {
      public mulalg_feature_verify() {
        super("mulalg_feature_verify");
      }

      public mulalg_feature_verify_args getEmptyArgsInstance() {
        return new mulalg_feature_verify_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public mulalg_feature_verify_result getResult(I iface, mulalg_feature_verify_args args) throws org.apache.thrift.TException {
        mulalg_feature_verify_result result = new mulalg_feature_verify_result();
        result.success = iface.mulalg_feature_verify(args.inputFace0, args.inputFace1, args.type);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class face_feature_compare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, face_feature_compare_args> {
      public face_feature_compare() {
        super("face_feature_compare");
      }

      public face_feature_compare_args getEmptyArgsInstance() {
        return new face_feature_compare_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public face_feature_compare_result getResult(I iface, face_feature_compare_args args) throws org.apache.thrift.TException {
        face_feature_compare_result result = new face_feature_compare_result();
        result.success = iface.face_feature_compare(args.faceType0, args.faceId0, args.faceType1, args.faceId1);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class task_surveillance_create<I extends Iface> extends org.apache.thrift.ProcessFunction<I, task_surveillance_create_args> {
      public task_surveillance_create() {
        super("task_surveillance_create");
      }

      public task_surveillance_create_args getEmptyArgsInstance() {
        return new task_surveillance_create_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public task_surveillance_create_result getResult(I iface, task_surveillance_create_args args) throws org.apache.thrift.TException {
        task_surveillance_create_result result = new task_surveillance_create_result();
        result.success = iface.task_surveillance_create(args.info);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class task_surveillance_terminate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, task_surveillance_terminate_args> {
      public task_surveillance_terminate() {
        super("task_surveillance_terminate");
      }

      public task_surveillance_terminate_args getEmptyArgsInstance() {
        return new task_surveillance_terminate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public task_surveillance_terminate_result getResult(I iface, task_surveillance_terminate_args args) throws org.apache.thrift.TException {
        task_surveillance_terminate_result result = new task_surveillance_terminate_result();
        result.success = iface.task_surveillance_terminate(args.taskId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class task_snaper_create<I extends Iface> extends org.apache.thrift.ProcessFunction<I, task_snaper_create_args> {
      public task_snaper_create() {
        super("task_snaper_create");
      }

      public task_snaper_create_args getEmptyArgsInstance() {
        return new task_snaper_create_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public task_snaper_create_result getResult(I iface, task_snaper_create_args args) throws org.apache.thrift.TException {
        task_snaper_create_result result = new task_snaper_create_result();
        result.success = iface.task_snaper_create(args.sourceType, args.sourceId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class task_snaper_terminate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, task_snaper_terminate_args> {
      public task_snaper_terminate() {
        super("task_snaper_terminate");
      }

      public task_snaper_terminate_args getEmptyArgsInstance() {
        return new task_snaper_terminate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public task_snaper_terminate_result getResult(I iface, task_snaper_terminate_args args) throws org.apache.thrift.TException {
        task_snaper_terminate_result result = new task_snaper_terminate_result();
        result.success = iface.task_snaper_terminate(args.sourceType, args.sourceId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class iface_engin_ioctrl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, iface_engin_ioctrl_args> {
      public iface_engin_ioctrl() {
        super("iface_engin_ioctrl");
      }

      public iface_engin_ioctrl_args getEmptyArgsInstance() {
        return new iface_engin_ioctrl_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public iface_engin_ioctrl_result getResult(I iface, iface_engin_ioctrl_args args) throws org.apache.thrift.TException {
        iface_engin_ioctrl_result result = new iface_engin_ioctrl_result();
        result.success = iface.iface_engin_ioctrl(args.type, args.para0, args.para1, args.para2, args.para3);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class multi_face_verify_url<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multi_face_verify_url_args> {
      public multi_face_verify_url() {
        super("multi_face_verify_url");
      }

      public multi_face_verify_url_args getEmptyArgsInstance() {
        return new multi_face_verify_url_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public multi_face_verify_url_result getResult(I iface, multi_face_verify_url_args args) throws org.apache.thrift.TException {
        multi_face_verify_url_result result = new multi_face_verify_url_result();
        result.success = iface.multi_face_verify_url(args.listPaths);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class multi_face_verify_bin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multi_face_verify_bin_args> {
      public multi_face_verify_bin() {
        super("multi_face_verify_bin");
      }

      public multi_face_verify_bin_args getEmptyArgsInstance() {
        return new multi_face_verify_bin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public multi_face_verify_bin_result getResult(I iface, multi_face_verify_bin_args args) throws org.apache.thrift.TException {
        multi_face_verify_bin_result result = new multi_face_verify_bin_result();
        result.success = iface.multi_face_verify_bin(args.listImgDat);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class multi_face_compare_bin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multi_face_compare_bin_args> {
      public multi_face_compare_bin() {
        super("multi_face_compare_bin");
      }

      public multi_face_compare_bin_args getEmptyArgsInstance() {
        return new multi_face_compare_bin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public multi_face_compare_bin_result getResult(I iface, multi_face_compare_bin_args args) throws org.apache.thrift.TException {
        multi_face_compare_bin_result result = new multi_face_compare_bin_result();
        result.success = iface.multi_face_compare_bin(args.imgdata1, args.imgdata2);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class multi_image_import<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multi_image_import_args> {
      public multi_image_import() {
        super("multi_image_import");
      }

      public multi_image_import_args getEmptyArgsInstance() {
        return new multi_image_import_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public multi_image_import_result getResult(I iface, multi_image_import_args args) throws org.apache.thrift.TException {
        multi_image_import_result result = new multi_image_import_result();
        result.success = iface.multi_image_import(args.listImgInfo, args.type, args.srcType, args.srcId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class face_detect_rect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, face_detect_rect_args> {
      public face_detect_rect() {
        super("face_detect_rect");
      }

      public face_detect_rect_args getEmptyArgsInstance() {
        return new face_detect_rect_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public face_detect_rect_result getResult(I iface, face_detect_rect_args args) throws org.apache.thrift.TException {
        face_detect_rect_result result = new face_detect_rect_result();
        result.success = iface.face_detect_rect(args.inputImgName, args.feceId);
        return result;
      }
    }

    public static class capture_on_demand<I extends Iface> extends org.apache.thrift.ProcessFunction<I, capture_on_demand_args> {
      public capture_on_demand() {
        super("capture_on_demand");
      }

      public capture_on_demand_args getEmptyArgsInstance() {
        return new capture_on_demand_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public capture_on_demand_result getResult(I iface, capture_on_demand_args args) throws org.apache.thrift.TException {
        capture_on_demand_result result = new capture_on_demand_result();
        result.success = iface.capture_on_demand(args.srcId);
        return result;
      }
    }

    public static class iface_merge_ctrl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, iface_merge_ctrl_args> {
      public iface_merge_ctrl() {
        super("iface_merge_ctrl");
      }

      public iface_merge_ctrl_args getEmptyArgsInstance() {
        return new iface_merge_ctrl_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public iface_merge_ctrl_result getResult(I iface, iface_merge_ctrl_args args) throws org.apache.thrift.TException {
        iface_merge_ctrl_result result = new iface_merge_ctrl_result();
        result.success = iface.iface_merge_ctrl(args.inputJsonParam);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class iface_add_camera<I extends Iface> extends org.apache.thrift.ProcessFunction<I, iface_add_camera_args> {
      public iface_add_camera() {
        super("iface_add_camera");
      }

      public iface_add_camera_args getEmptyArgsInstance() {
        return new iface_add_camera_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public iface_add_camera_result getResult(I iface, iface_add_camera_args args) throws org.apache.thrift.TException {
        iface_add_camera_result result = new iface_add_camera_result();
        result.success = iface.iface_add_camera(args.dwCameraId, args.strIpcAdr, args.dwIpcPort, args.strIpcUsr, args.strIpcPwd, args.dwEngineId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class query_prgress_rate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_prgress_rate_args> {
      public query_prgress_rate() {
        super("query_prgress_rate");
      }

      public query_prgress_rate_args getEmptyArgsInstance() {
        return new query_prgress_rate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_prgress_rate_result getResult(I iface, query_prgress_rate_args args) throws org.apache.thrift.TException {
        query_prgress_rate_result result = new query_prgress_rate_result();
        result.success = iface.query_prgress_rate(args.QueryType, args.ProgressId);
        return result;
      }
    }

    public static class engine_update_status<I extends Iface> extends org.apache.thrift.ProcessFunction<I, engine_update_status_args> {
      public engine_update_status() {
        super("engine_update_status");
      }

      public engine_update_status_args getEmptyArgsInstance() {
        return new engine_update_status_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public engine_update_status_result getResult(I iface, engine_update_status_args args) throws org.apache.thrift.TException {
        engine_update_status_result result = new engine_update_status_result();
        result.success = iface.engine_update_status(args.status);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("face_detect_extract", new face_detect_extract());
      processMap.put("image_detect_extract", new image_detect_extract());
      processMap.put("multip_feature_query", new multip_feature_query());
      processMap.put("face_feature_verify", new face_feature_verify());
      processMap.put("mulalg_feature_verify", new mulalg_feature_verify());
      processMap.put("face_feature_compare", new face_feature_compare());
      processMap.put("task_surveillance_create", new task_surveillance_create());
      processMap.put("task_surveillance_terminate", new task_surveillance_terminate());
      processMap.put("task_snaper_create", new task_snaper_create());
      processMap.put("task_snaper_terminate", new task_snaper_terminate());
      processMap.put("iface_engin_ioctrl", new iface_engin_ioctrl());
      processMap.put("multi_face_verify_url", new multi_face_verify_url());
      processMap.put("multi_face_verify_bin", new multi_face_verify_bin());
      processMap.put("multi_face_compare_bin", new multi_face_compare_bin());
      processMap.put("multi_image_import", new multi_image_import());
      processMap.put("face_detect_rect", new face_detect_rect());
      processMap.put("capture_on_demand", new capture_on_demand());
      processMap.put("iface_merge_ctrl", new iface_merge_ctrl());
      processMap.put("iface_add_camera", new iface_add_camera());
      processMap.put("query_prgress_rate", new query_prgress_rate());
      processMap.put("engine_update_status", new engine_update_status());
      return processMap;
    }

    public static class face_detect_extract<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, face_detect_extract_args, List<T_IF_FACERECT>> {
      public face_detect_extract() {
        super("face_detect_extract");
      }

      public face_detect_extract_args getEmptyArgsInstance() {
        return new face_detect_extract_args();
      }

      public AsyncMethodCallback<List<T_IF_FACERECT>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<T_IF_FACERECT>>() { 
          public void onComplete(List<T_IF_FACERECT> o) {
            face_detect_extract_result result = new face_detect_extract_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            face_detect_extract_result result = new face_detect_extract_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, face_detect_extract_args args, org.apache.thrift.async.AsyncMethodCallback<List<T_IF_FACERECT>> resultHandler) throws TException {
        iface.face_detect_extract(args.inputImgName, args.tId, args.extType,resultHandler);
      }
    }

    public static class image_detect_extract<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, image_detect_extract_args, List<T_IF_FACERECT>> {
      public image_detect_extract() {
        super("image_detect_extract");
      }

      public image_detect_extract_args getEmptyArgsInstance() {
        return new image_detect_extract_args();
      }

      public AsyncMethodCallback<List<T_IF_FACERECT>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<T_IF_FACERECT>>() { 
          public void onComplete(List<T_IF_FACERECT> o) {
            image_detect_extract_result result = new image_detect_extract_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            image_detect_extract_result result = new image_detect_extract_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, image_detect_extract_args args, org.apache.thrift.async.AsyncMethodCallback<List<T_IF_FACERECT>> resultHandler) throws TException {
        iface.image_detect_extract(args.inputImgName, args.fromImgId,resultHandler);
      }
    }

    public static class multip_feature_query<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multip_feature_query_args, T_MulAlgFeatureExtRsp> {
      public multip_feature_query() {
        super("multip_feature_query");
      }

      public multip_feature_query_args getEmptyArgsInstance() {
        return new multip_feature_query_args();
      }

      public AsyncMethodCallback<T_MulAlgFeatureExtRsp> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<T_MulAlgFeatureExtRsp>() { 
          public void onComplete(T_MulAlgFeatureExtRsp o) {
            multip_feature_query_result result = new multip_feature_query_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            multip_feature_query_result result = new multip_feature_query_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, multip_feature_query_args args, org.apache.thrift.async.AsyncMethodCallback<T_MulAlgFeatureExtRsp> resultHandler) throws TException {
        iface.multip_feature_query(args.tMulFeatureExtPara,resultHandler);
      }
    }

    public static class face_feature_verify<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, face_feature_verify_args, Double> {
      public face_feature_verify() {
        super("face_feature_verify");
      }

      public face_feature_verify_args getEmptyArgsInstance() {
        return new face_feature_verify_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            face_feature_verify_result result = new face_feature_verify_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            face_feature_verify_result result = new face_feature_verify_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, face_feature_verify_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.face_feature_verify(args.inputFace0, args.inputFace1,resultHandler);
      }
    }

    public static class mulalg_feature_verify<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mulalg_feature_verify_args, Double> {
      public mulalg_feature_verify() {
        super("mulalg_feature_verify");
      }

      public mulalg_feature_verify_args getEmptyArgsInstance() {
        return new mulalg_feature_verify_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            mulalg_feature_verify_result result = new mulalg_feature_verify_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            mulalg_feature_verify_result result = new mulalg_feature_verify_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, mulalg_feature_verify_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.mulalg_feature_verify(args.inputFace0, args.inputFace1, args.type,resultHandler);
      }
    }

    public static class face_feature_compare<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, face_feature_compare_args, Double> {
      public face_feature_compare() {
        super("face_feature_compare");
      }

      public face_feature_compare_args getEmptyArgsInstance() {
        return new face_feature_compare_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            face_feature_compare_result result = new face_feature_compare_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            face_feature_compare_result result = new face_feature_compare_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, face_feature_compare_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.face_feature_compare(args.faceType0, args.faceId0, args.faceType1, args.faceId1,resultHandler);
      }
    }

    public static class task_surveillance_create<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, task_surveillance_create_args, Integer> {
      public task_surveillance_create() {
        super("task_surveillance_create");
      }

      public task_surveillance_create_args getEmptyArgsInstance() {
        return new task_surveillance_create_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            task_surveillance_create_result result = new task_surveillance_create_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            task_surveillance_create_result result = new task_surveillance_create_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, task_surveillance_create_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.task_surveillance_create(args.info,resultHandler);
      }
    }

    public static class task_surveillance_terminate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, task_surveillance_terminate_args, Integer> {
      public task_surveillance_terminate() {
        super("task_surveillance_terminate");
      }

      public task_surveillance_terminate_args getEmptyArgsInstance() {
        return new task_surveillance_terminate_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            task_surveillance_terminate_result result = new task_surveillance_terminate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            task_surveillance_terminate_result result = new task_surveillance_terminate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, task_surveillance_terminate_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.task_surveillance_terminate(args.taskId,resultHandler);
      }
    }

    public static class task_snaper_create<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, task_snaper_create_args, Integer> {
      public task_snaper_create() {
        super("task_snaper_create");
      }

      public task_snaper_create_args getEmptyArgsInstance() {
        return new task_snaper_create_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            task_snaper_create_result result = new task_snaper_create_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            task_snaper_create_result result = new task_snaper_create_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, task_snaper_create_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.task_snaper_create(args.sourceType, args.sourceId,resultHandler);
      }
    }

    public static class task_snaper_terminate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, task_snaper_terminate_args, Integer> {
      public task_snaper_terminate() {
        super("task_snaper_terminate");
      }

      public task_snaper_terminate_args getEmptyArgsInstance() {
        return new task_snaper_terminate_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            task_snaper_terminate_result result = new task_snaper_terminate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            task_snaper_terminate_result result = new task_snaper_terminate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, task_snaper_terminate_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.task_snaper_terminate(args.sourceType, args.sourceId,resultHandler);
      }
    }

    public static class iface_engin_ioctrl<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, iface_engin_ioctrl_args, Integer> {
      public iface_engin_ioctrl() {
        super("iface_engin_ioctrl");
      }

      public iface_engin_ioctrl_args getEmptyArgsInstance() {
        return new iface_engin_ioctrl_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            iface_engin_ioctrl_result result = new iface_engin_ioctrl_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            iface_engin_ioctrl_result result = new iface_engin_ioctrl_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, iface_engin_ioctrl_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.iface_engin_ioctrl(args.type, args.para0, args.para1, args.para2, args.para3,resultHandler);
      }
    }

    public static class multi_face_verify_url<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multi_face_verify_url_args, Integer> {
      public multi_face_verify_url() {
        super("multi_face_verify_url");
      }

      public multi_face_verify_url_args getEmptyArgsInstance() {
        return new multi_face_verify_url_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            multi_face_verify_url_result result = new multi_face_verify_url_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            multi_face_verify_url_result result = new multi_face_verify_url_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, multi_face_verify_url_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.multi_face_verify_url(args.listPaths,resultHandler);
      }
    }

    public static class multi_face_verify_bin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multi_face_verify_bin_args, Integer> {
      public multi_face_verify_bin() {
        super("multi_face_verify_bin");
      }

      public multi_face_verify_bin_args getEmptyArgsInstance() {
        return new multi_face_verify_bin_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            multi_face_verify_bin_result result = new multi_face_verify_bin_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            multi_face_verify_bin_result result = new multi_face_verify_bin_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, multi_face_verify_bin_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.multi_face_verify_bin(args.listImgDat,resultHandler);
      }
    }

    public static class multi_face_compare_bin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multi_face_compare_bin_args, Double> {
      public multi_face_compare_bin() {
        super("multi_face_compare_bin");
      }

      public multi_face_compare_bin_args getEmptyArgsInstance() {
        return new multi_face_compare_bin_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            multi_face_compare_bin_result result = new multi_face_compare_bin_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            multi_face_compare_bin_result result = new multi_face_compare_bin_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, multi_face_compare_bin_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.multi_face_compare_bin(args.imgdata1, args.imgdata2,resultHandler);
      }
    }

    public static class multi_image_import<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multi_image_import_args, Integer> {
      public multi_image_import() {
        super("multi_image_import");
      }

      public multi_image_import_args getEmptyArgsInstance() {
        return new multi_image_import_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            multi_image_import_result result = new multi_image_import_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            multi_image_import_result result = new multi_image_import_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, multi_image_import_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.multi_image_import(args.listImgInfo, args.type, args.srcType, args.srcId,resultHandler);
      }
    }

    public static class face_detect_rect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, face_detect_rect_args, String> {
      public face_detect_rect() {
        super("face_detect_rect");
      }

      public face_detect_rect_args getEmptyArgsInstance() {
        return new face_detect_rect_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            face_detect_rect_result result = new face_detect_rect_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            face_detect_rect_result result = new face_detect_rect_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, face_detect_rect_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.face_detect_rect(args.inputImgName, args.feceId,resultHandler);
      }
    }

    public static class capture_on_demand<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, capture_on_demand_args, T_CapRstOndemand> {
      public capture_on_demand() {
        super("capture_on_demand");
      }

      public capture_on_demand_args getEmptyArgsInstance() {
        return new capture_on_demand_args();
      }

      public AsyncMethodCallback<T_CapRstOndemand> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<T_CapRstOndemand>() { 
          public void onComplete(T_CapRstOndemand o) {
            capture_on_demand_result result = new capture_on_demand_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            capture_on_demand_result result = new capture_on_demand_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, capture_on_demand_args args, org.apache.thrift.async.AsyncMethodCallback<T_CapRstOndemand> resultHandler) throws TException {
        iface.capture_on_demand(args.srcId,resultHandler);
      }
    }

    public static class iface_merge_ctrl<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, iface_merge_ctrl_args, Integer> {
      public iface_merge_ctrl() {
        super("iface_merge_ctrl");
      }

      public iface_merge_ctrl_args getEmptyArgsInstance() {
        return new iface_merge_ctrl_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            iface_merge_ctrl_result result = new iface_merge_ctrl_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            iface_merge_ctrl_result result = new iface_merge_ctrl_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, iface_merge_ctrl_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.iface_merge_ctrl(args.inputJsonParam,resultHandler);
      }
    }

    public static class iface_add_camera<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, iface_add_camera_args, Integer> {
      public iface_add_camera() {
        super("iface_add_camera");
      }

      public iface_add_camera_args getEmptyArgsInstance() {
        return new iface_add_camera_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            iface_add_camera_result result = new iface_add_camera_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            iface_add_camera_result result = new iface_add_camera_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, iface_add_camera_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.iface_add_camera(args.dwCameraId, args.strIpcAdr, args.dwIpcPort, args.strIpcUsr, args.strIpcPwd, args.dwEngineId,resultHandler);
      }
    }

    public static class query_prgress_rate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, query_prgress_rate_args, T_ProgressQueryRst> {
      public query_prgress_rate() {
        super("query_prgress_rate");
      }

      public query_prgress_rate_args getEmptyArgsInstance() {
        return new query_prgress_rate_args();
      }

      public AsyncMethodCallback<T_ProgressQueryRst> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<T_ProgressQueryRst>() { 
          public void onComplete(T_ProgressQueryRst o) {
            query_prgress_rate_result result = new query_prgress_rate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            query_prgress_rate_result result = new query_prgress_rate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, query_prgress_rate_args args, org.apache.thrift.async.AsyncMethodCallback<T_ProgressQueryRst> resultHandler) throws TException {
        iface.query_prgress_rate(args.QueryType, args.ProgressId,resultHandler);
      }
    }

    public static class engine_update_status<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, engine_update_status_args, Integer> {
      public engine_update_status() {
        super("engine_update_status");
      }

      public engine_update_status_args getEmptyArgsInstance() {
        return new engine_update_status_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            engine_update_status_result result = new engine_update_status_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            engine_update_status_result result = new engine_update_status_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, engine_update_status_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.engine_update_status(args.status,resultHandler);
      }
    }

  }

  public static class face_detect_extract_args implements org.apache.thrift.TBase<face_detect_extract_args, face_detect_extract_args._Fields>, java.io.Serializable, Cloneable, Comparable<face_detect_extract_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("face_detect_extract_args");

    private static final org.apache.thrift.protocol.TField INPUT_IMG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("inputImgName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField T_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField EXT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("extType", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new face_detect_extract_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new face_detect_extract_argsTupleSchemeFactory());
    }

    public String inputImgName; // required
    public long tId; // required
    public int extType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INPUT_IMG_NAME((short)1, "inputImgName"),
      T_ID((short)2, "tId"),
      EXT_TYPE((short)3, "extType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INPUT_IMG_NAME
            return INPUT_IMG_NAME;
          case 2: // T_ID
            return T_ID;
          case 3: // EXT_TYPE
            return EXT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TID_ISSET_ID = 0;
    private static final int __EXTTYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INPUT_IMG_NAME, new org.apache.thrift.meta_data.FieldMetaData("inputImgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.T_ID, new org.apache.thrift.meta_data.FieldMetaData("tId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("extType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(face_detect_extract_args.class, metaDataMap);
    }

    public face_detect_extract_args() {
    }

    public face_detect_extract_args(
      String inputImgName,
      long tId,
      int extType)
    {
      this();
      this.inputImgName = inputImgName;
      this.tId = tId;
      setTIdIsSet(true);
      this.extType = extType;
      setExtTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public face_detect_extract_args(face_detect_extract_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetInputImgName()) {
        this.inputImgName = other.inputImgName;
      }
      this.tId = other.tId;
      this.extType = other.extType;
    }

    public face_detect_extract_args deepCopy() {
      return new face_detect_extract_args(this);
    }

    @Override
    public void clear() {
      this.inputImgName = null;
      setTIdIsSet(false);
      this.tId = 0;
      setExtTypeIsSet(false);
      this.extType = 0;
    }

    public String getInputImgName() {
      return this.inputImgName;
    }

    public face_detect_extract_args setInputImgName(String inputImgName) {
      this.inputImgName = inputImgName;
      return this;
    }

    public void unsetInputImgName() {
      this.inputImgName = null;
    }

    /** Returns true if field inputImgName is set (has been assigned a value) and false otherwise */
    public boolean isSetInputImgName() {
      return this.inputImgName != null;
    }

    public void setInputImgNameIsSet(boolean value) {
      if (!value) {
        this.inputImgName = null;
      }
    }

    public long getTId() {
      return this.tId;
    }

    public face_detect_extract_args setTId(long tId) {
      this.tId = tId;
      setTIdIsSet(true);
      return this;
    }

    public void unsetTId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TID_ISSET_ID);
    }

    /** Returns true if field tId is set (has been assigned a value) and false otherwise */
    public boolean isSetTId() {
      return EncodingUtils.testBit(__isset_bitfield, __TID_ISSET_ID);
    }

    public void setTIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TID_ISSET_ID, value);
    }

    public int getExtType() {
      return this.extType;
    }

    public face_detect_extract_args setExtType(int extType) {
      this.extType = extType;
      setExtTypeIsSet(true);
      return this;
    }

    public void unsetExtType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTTYPE_ISSET_ID);
    }

    /** Returns true if field extType is set (has been assigned a value) and false otherwise */
    public boolean isSetExtType() {
      return EncodingUtils.testBit(__isset_bitfield, __EXTTYPE_ISSET_ID);
    }

    public void setExtTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INPUT_IMG_NAME:
        if (value == null) {
          unsetInputImgName();
        } else {
          setInputImgName((String)value);
        }
        break;

      case T_ID:
        if (value == null) {
          unsetTId();
        } else {
          setTId((Long)value);
        }
        break;

      case EXT_TYPE:
        if (value == null) {
          unsetExtType();
        } else {
          setExtType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INPUT_IMG_NAME:
        return getInputImgName();

      case T_ID:
        return Long.valueOf(getTId());

      case EXT_TYPE:
        return Integer.valueOf(getExtType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INPUT_IMG_NAME:
        return isSetInputImgName();
      case T_ID:
        return isSetTId();
      case EXT_TYPE:
        return isSetExtType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof face_detect_extract_args)
        return this.equals((face_detect_extract_args)that);
      return false;
    }

    public boolean equals(face_detect_extract_args that) {
      if (that == null)
        return false;

      boolean this_present_inputImgName = true && this.isSetInputImgName();
      boolean that_present_inputImgName = true && that.isSetInputImgName();
      if (this_present_inputImgName || that_present_inputImgName) {
        if (!(this_present_inputImgName && that_present_inputImgName))
          return false;
        if (!this.inputImgName.equals(that.inputImgName))
          return false;
      }

      boolean this_present_tId = true;
      boolean that_present_tId = true;
      if (this_present_tId || that_present_tId) {
        if (!(this_present_tId && that_present_tId))
          return false;
        if (this.tId != that.tId)
          return false;
      }

      boolean this_present_extType = true;
      boolean that_present_extType = true;
      if (this_present_extType || that_present_extType) {
        if (!(this_present_extType && that_present_extType))
          return false;
        if (this.extType != that.extType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_inputImgName = true && (isSetInputImgName());
      list.add(present_inputImgName);
      if (present_inputImgName)
        list.add(inputImgName);

      boolean present_tId = true;
      list.add(present_tId);
      if (present_tId)
        list.add(tId);

      boolean present_extType = true;
      list.add(present_extType);
      if (present_extType)
        list.add(extType);

      return list.hashCode();
    }

    @Override
    public int compareTo(face_detect_extract_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInputImgName()).compareTo(other.isSetInputImgName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputImgName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputImgName, other.inputImgName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTId()).compareTo(other.isSetTId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tId, other.tId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExtType()).compareTo(other.isSetExtType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExtType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extType, other.extType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("face_detect_extract_args(");
      boolean first = true;

      sb.append("inputImgName:");
      if (this.inputImgName == null) {
        sb.append("null");
      } else {
        sb.append(this.inputImgName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tId:");
      sb.append(this.tId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("extType:");
      sb.append(this.extType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class face_detect_extract_argsStandardSchemeFactory implements SchemeFactory {
      public face_detect_extract_argsStandardScheme getScheme() {
        return new face_detect_extract_argsStandardScheme();
      }
    }

    private static class face_detect_extract_argsStandardScheme extends StandardScheme<face_detect_extract_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, face_detect_extract_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INPUT_IMG_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputImgName = iprot.readString();
                struct.setInputImgNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // T_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.tId = iprot.readI64();
                struct.setTIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EXT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.extType = iprot.readI32();
                struct.setExtTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, face_detect_extract_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inputImgName != null) {
          oprot.writeFieldBegin(INPUT_IMG_NAME_FIELD_DESC);
          oprot.writeString(struct.inputImgName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(T_ID_FIELD_DESC);
        oprot.writeI64(struct.tId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(EXT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.extType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class face_detect_extract_argsTupleSchemeFactory implements SchemeFactory {
      public face_detect_extract_argsTupleScheme getScheme() {
        return new face_detect_extract_argsTupleScheme();
      }
    }

    private static class face_detect_extract_argsTupleScheme extends TupleScheme<face_detect_extract_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, face_detect_extract_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInputImgName()) {
          optionals.set(0);
        }
        if (struct.isSetTId()) {
          optionals.set(1);
        }
        if (struct.isSetExtType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetInputImgName()) {
          oprot.writeString(struct.inputImgName);
        }
        if (struct.isSetTId()) {
          oprot.writeI64(struct.tId);
        }
        if (struct.isSetExtType()) {
          oprot.writeI32(struct.extType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, face_detect_extract_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.inputImgName = iprot.readString();
          struct.setInputImgNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tId = iprot.readI64();
          struct.setTIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.extType = iprot.readI32();
          struct.setExtTypeIsSet(true);
        }
      }
    }

  }

  public static class face_detect_extract_result implements org.apache.thrift.TBase<face_detect_extract_result, face_detect_extract_result._Fields>, java.io.Serializable, Cloneable, Comparable<face_detect_extract_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("face_detect_extract_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new face_detect_extract_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new face_detect_extract_resultTupleSchemeFactory());
    }

    public List<T_IF_FACERECT> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, T_IF_FACERECT.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(face_detect_extract_result.class, metaDataMap);
    }

    public face_detect_extract_result() {
    }

    public face_detect_extract_result(
      List<T_IF_FACERECT> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public face_detect_extract_result(face_detect_extract_result other) {
      if (other.isSetSuccess()) {
        List<T_IF_FACERECT> __this__success = new ArrayList<T_IF_FACERECT>(other.success.size());
        for (T_IF_FACERECT other_element : other.success) {
          __this__success.add(new T_IF_FACERECT(other_element));
        }
        this.success = __this__success;
      }
    }

    public face_detect_extract_result deepCopy() {
      return new face_detect_extract_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<T_IF_FACERECT> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(T_IF_FACERECT elem) {
      if (this.success == null) {
        this.success = new ArrayList<T_IF_FACERECT>();
      }
      this.success.add(elem);
    }

    public List<T_IF_FACERECT> getSuccess() {
      return this.success;
    }

    public face_detect_extract_result setSuccess(List<T_IF_FACERECT> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<T_IF_FACERECT>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof face_detect_extract_result)
        return this.equals((face_detect_extract_result)that);
      return false;
    }

    public boolean equals(face_detect_extract_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(face_detect_extract_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("face_detect_extract_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class face_detect_extract_resultStandardSchemeFactory implements SchemeFactory {
      public face_detect_extract_resultStandardScheme getScheme() {
        return new face_detect_extract_resultStandardScheme();
      }
    }

    private static class face_detect_extract_resultStandardScheme extends StandardScheme<face_detect_extract_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, face_detect_extract_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<T_IF_FACERECT>(_list24.size);
                  T_IF_FACERECT _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new T_IF_FACERECT();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, face_detect_extract_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (T_IF_FACERECT _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class face_detect_extract_resultTupleSchemeFactory implements SchemeFactory {
      public face_detect_extract_resultTupleScheme getScheme() {
        return new face_detect_extract_resultTupleScheme();
      }
    }

    private static class face_detect_extract_resultTupleScheme extends TupleScheme<face_detect_extract_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, face_detect_extract_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (T_IF_FACERECT _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, face_detect_extract_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<T_IF_FACERECT>(_list29.size);
            T_IF_FACERECT _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new T_IF_FACERECT();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class image_detect_extract_args implements org.apache.thrift.TBase<image_detect_extract_args, image_detect_extract_args._Fields>, java.io.Serializable, Cloneable, Comparable<image_detect_extract_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("image_detect_extract_args");

    private static final org.apache.thrift.protocol.TField INPUT_IMG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("inputImgName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FROM_IMG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromImgId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new image_detect_extract_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new image_detect_extract_argsTupleSchemeFactory());
    }

    public String inputImgName; // required
    public long fromImgId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INPUT_IMG_NAME((short)1, "inputImgName"),
      FROM_IMG_ID((short)2, "fromImgId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INPUT_IMG_NAME
            return INPUT_IMG_NAME;
          case 2: // FROM_IMG_ID
            return FROM_IMG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FROMIMGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INPUT_IMG_NAME, new org.apache.thrift.meta_data.FieldMetaData("inputImgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FROM_IMG_ID, new org.apache.thrift.meta_data.FieldMetaData("fromImgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(image_detect_extract_args.class, metaDataMap);
    }

    public image_detect_extract_args() {
    }

    public image_detect_extract_args(
      String inputImgName,
      long fromImgId)
    {
      this();
      this.inputImgName = inputImgName;
      this.fromImgId = fromImgId;
      setFromImgIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public image_detect_extract_args(image_detect_extract_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetInputImgName()) {
        this.inputImgName = other.inputImgName;
      }
      this.fromImgId = other.fromImgId;
    }

    public image_detect_extract_args deepCopy() {
      return new image_detect_extract_args(this);
    }

    @Override
    public void clear() {
      this.inputImgName = null;
      setFromImgIdIsSet(false);
      this.fromImgId = 0;
    }

    public String getInputImgName() {
      return this.inputImgName;
    }

    public image_detect_extract_args setInputImgName(String inputImgName) {
      this.inputImgName = inputImgName;
      return this;
    }

    public void unsetInputImgName() {
      this.inputImgName = null;
    }

    /** Returns true if field inputImgName is set (has been assigned a value) and false otherwise */
    public boolean isSetInputImgName() {
      return this.inputImgName != null;
    }

    public void setInputImgNameIsSet(boolean value) {
      if (!value) {
        this.inputImgName = null;
      }
    }

    public long getFromImgId() {
      return this.fromImgId;
    }

    public image_detect_extract_args setFromImgId(long fromImgId) {
      this.fromImgId = fromImgId;
      setFromImgIdIsSet(true);
      return this;
    }

    public void unsetFromImgId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMIMGID_ISSET_ID);
    }

    /** Returns true if field fromImgId is set (has been assigned a value) and false otherwise */
    public boolean isSetFromImgId() {
      return EncodingUtils.testBit(__isset_bitfield, __FROMIMGID_ISSET_ID);
    }

    public void setFromImgIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMIMGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INPUT_IMG_NAME:
        if (value == null) {
          unsetInputImgName();
        } else {
          setInputImgName((String)value);
        }
        break;

      case FROM_IMG_ID:
        if (value == null) {
          unsetFromImgId();
        } else {
          setFromImgId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INPUT_IMG_NAME:
        return getInputImgName();

      case FROM_IMG_ID:
        return Long.valueOf(getFromImgId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INPUT_IMG_NAME:
        return isSetInputImgName();
      case FROM_IMG_ID:
        return isSetFromImgId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof image_detect_extract_args)
        return this.equals((image_detect_extract_args)that);
      return false;
    }

    public boolean equals(image_detect_extract_args that) {
      if (that == null)
        return false;

      boolean this_present_inputImgName = true && this.isSetInputImgName();
      boolean that_present_inputImgName = true && that.isSetInputImgName();
      if (this_present_inputImgName || that_present_inputImgName) {
        if (!(this_present_inputImgName && that_present_inputImgName))
          return false;
        if (!this.inputImgName.equals(that.inputImgName))
          return false;
      }

      boolean this_present_fromImgId = true;
      boolean that_present_fromImgId = true;
      if (this_present_fromImgId || that_present_fromImgId) {
        if (!(this_present_fromImgId && that_present_fromImgId))
          return false;
        if (this.fromImgId != that.fromImgId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_inputImgName = true && (isSetInputImgName());
      list.add(present_inputImgName);
      if (present_inputImgName)
        list.add(inputImgName);

      boolean present_fromImgId = true;
      list.add(present_fromImgId);
      if (present_fromImgId)
        list.add(fromImgId);

      return list.hashCode();
    }

    @Override
    public int compareTo(image_detect_extract_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInputImgName()).compareTo(other.isSetInputImgName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputImgName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputImgName, other.inputImgName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFromImgId()).compareTo(other.isSetFromImgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromImgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromImgId, other.fromImgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("image_detect_extract_args(");
      boolean first = true;

      sb.append("inputImgName:");
      if (this.inputImgName == null) {
        sb.append("null");
      } else {
        sb.append(this.inputImgName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromImgId:");
      sb.append(this.fromImgId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class image_detect_extract_argsStandardSchemeFactory implements SchemeFactory {
      public image_detect_extract_argsStandardScheme getScheme() {
        return new image_detect_extract_argsStandardScheme();
      }
    }

    private static class image_detect_extract_argsStandardScheme extends StandardScheme<image_detect_extract_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, image_detect_extract_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INPUT_IMG_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputImgName = iprot.readString();
                struct.setInputImgNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FROM_IMG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fromImgId = iprot.readI64();
                struct.setFromImgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, image_detect_extract_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inputImgName != null) {
          oprot.writeFieldBegin(INPUT_IMG_NAME_FIELD_DESC);
          oprot.writeString(struct.inputImgName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FROM_IMG_ID_FIELD_DESC);
        oprot.writeI64(struct.fromImgId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class image_detect_extract_argsTupleSchemeFactory implements SchemeFactory {
      public image_detect_extract_argsTupleScheme getScheme() {
        return new image_detect_extract_argsTupleScheme();
      }
    }

    private static class image_detect_extract_argsTupleScheme extends TupleScheme<image_detect_extract_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, image_detect_extract_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInputImgName()) {
          optionals.set(0);
        }
        if (struct.isSetFromImgId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInputImgName()) {
          oprot.writeString(struct.inputImgName);
        }
        if (struct.isSetFromImgId()) {
          oprot.writeI64(struct.fromImgId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, image_detect_extract_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.inputImgName = iprot.readString();
          struct.setInputImgNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fromImgId = iprot.readI64();
          struct.setFromImgIdIsSet(true);
        }
      }
    }

  }

  public static class image_detect_extract_result implements org.apache.thrift.TBase<image_detect_extract_result, image_detect_extract_result._Fields>, java.io.Serializable, Cloneable, Comparable<image_detect_extract_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("image_detect_extract_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new image_detect_extract_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new image_detect_extract_resultTupleSchemeFactory());
    }

    public List<T_IF_FACERECT> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, T_IF_FACERECT.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(image_detect_extract_result.class, metaDataMap);
    }

    public image_detect_extract_result() {
    }

    public image_detect_extract_result(
      List<T_IF_FACERECT> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public image_detect_extract_result(image_detect_extract_result other) {
      if (other.isSetSuccess()) {
        List<T_IF_FACERECT> __this__success = new ArrayList<T_IF_FACERECT>(other.success.size());
        for (T_IF_FACERECT other_element : other.success) {
          __this__success.add(new T_IF_FACERECT(other_element));
        }
        this.success = __this__success;
      }
    }

    public image_detect_extract_result deepCopy() {
      return new image_detect_extract_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<T_IF_FACERECT> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(T_IF_FACERECT elem) {
      if (this.success == null) {
        this.success = new ArrayList<T_IF_FACERECT>();
      }
      this.success.add(elem);
    }

    public List<T_IF_FACERECT> getSuccess() {
      return this.success;
    }

    public image_detect_extract_result setSuccess(List<T_IF_FACERECT> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<T_IF_FACERECT>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof image_detect_extract_result)
        return this.equals((image_detect_extract_result)that);
      return false;
    }

    public boolean equals(image_detect_extract_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(image_detect_extract_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("image_detect_extract_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class image_detect_extract_resultStandardSchemeFactory implements SchemeFactory {
      public image_detect_extract_resultStandardScheme getScheme() {
        return new image_detect_extract_resultStandardScheme();
      }
    }

    private static class image_detect_extract_resultStandardScheme extends StandardScheme<image_detect_extract_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, image_detect_extract_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<T_IF_FACERECT>(_list32.size);
                  T_IF_FACERECT _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new T_IF_FACERECT();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, image_detect_extract_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (T_IF_FACERECT _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class image_detect_extract_resultTupleSchemeFactory implements SchemeFactory {
      public image_detect_extract_resultTupleScheme getScheme() {
        return new image_detect_extract_resultTupleScheme();
      }
    }

    private static class image_detect_extract_resultTupleScheme extends TupleScheme<image_detect_extract_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, image_detect_extract_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (T_IF_FACERECT _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, image_detect_extract_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<T_IF_FACERECT>(_list37.size);
            T_IF_FACERECT _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new T_IF_FACERECT();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class multip_feature_query_args implements org.apache.thrift.TBase<multip_feature_query_args, multip_feature_query_args._Fields>, java.io.Serializable, Cloneable, Comparable<multip_feature_query_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multip_feature_query_args");

    private static final org.apache.thrift.protocol.TField T_MUL_FEATURE_EXT_PARA_FIELD_DESC = new org.apache.thrift.protocol.TField("tMulFeatureExtPara", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multip_feature_query_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multip_feature_query_argsTupleSchemeFactory());
    }

    public T_MulAlgFeatureExtReq tMulFeatureExtPara; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      T_MUL_FEATURE_EXT_PARA((short)1, "tMulFeatureExtPara");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // T_MUL_FEATURE_EXT_PARA
            return T_MUL_FEATURE_EXT_PARA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.T_MUL_FEATURE_EXT_PARA, new org.apache.thrift.meta_data.FieldMetaData("tMulFeatureExtPara", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, T_MulAlgFeatureExtReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multip_feature_query_args.class, metaDataMap);
    }

    public multip_feature_query_args() {
    }

    public multip_feature_query_args(
      T_MulAlgFeatureExtReq tMulFeatureExtPara)
    {
      this();
      this.tMulFeatureExtPara = tMulFeatureExtPara;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multip_feature_query_args(multip_feature_query_args other) {
      if (other.isSetTMulFeatureExtPara()) {
        this.tMulFeatureExtPara = new T_MulAlgFeatureExtReq(other.tMulFeatureExtPara);
      }
    }

    public multip_feature_query_args deepCopy() {
      return new multip_feature_query_args(this);
    }

    @Override
    public void clear() {
      this.tMulFeatureExtPara = null;
    }

    public T_MulAlgFeatureExtReq getTMulFeatureExtPara() {
      return this.tMulFeatureExtPara;
    }

    public multip_feature_query_args setTMulFeatureExtPara(T_MulAlgFeatureExtReq tMulFeatureExtPara) {
      this.tMulFeatureExtPara = tMulFeatureExtPara;
      return this;
    }

    public void unsetTMulFeatureExtPara() {
      this.tMulFeatureExtPara = null;
    }

    /** Returns true if field tMulFeatureExtPara is set (has been assigned a value) and false otherwise */
    public boolean isSetTMulFeatureExtPara() {
      return this.tMulFeatureExtPara != null;
    }

    public void setTMulFeatureExtParaIsSet(boolean value) {
      if (!value) {
        this.tMulFeatureExtPara = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case T_MUL_FEATURE_EXT_PARA:
        if (value == null) {
          unsetTMulFeatureExtPara();
        } else {
          setTMulFeatureExtPara((T_MulAlgFeatureExtReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case T_MUL_FEATURE_EXT_PARA:
        return getTMulFeatureExtPara();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case T_MUL_FEATURE_EXT_PARA:
        return isSetTMulFeatureExtPara();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multip_feature_query_args)
        return this.equals((multip_feature_query_args)that);
      return false;
    }

    public boolean equals(multip_feature_query_args that) {
      if (that == null)
        return false;

      boolean this_present_tMulFeatureExtPara = true && this.isSetTMulFeatureExtPara();
      boolean that_present_tMulFeatureExtPara = true && that.isSetTMulFeatureExtPara();
      if (this_present_tMulFeatureExtPara || that_present_tMulFeatureExtPara) {
        if (!(this_present_tMulFeatureExtPara && that_present_tMulFeatureExtPara))
          return false;
        if (!this.tMulFeatureExtPara.equals(that.tMulFeatureExtPara))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tMulFeatureExtPara = true && (isSetTMulFeatureExtPara());
      list.add(present_tMulFeatureExtPara);
      if (present_tMulFeatureExtPara)
        list.add(tMulFeatureExtPara);

      return list.hashCode();
    }

    @Override
    public int compareTo(multip_feature_query_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTMulFeatureExtPara()).compareTo(other.isSetTMulFeatureExtPara());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTMulFeatureExtPara()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tMulFeatureExtPara, other.tMulFeatureExtPara);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multip_feature_query_args(");
      boolean first = true;

      sb.append("tMulFeatureExtPara:");
      if (this.tMulFeatureExtPara == null) {
        sb.append("null");
      } else {
        sb.append(this.tMulFeatureExtPara);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tMulFeatureExtPara != null) {
        tMulFeatureExtPara.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multip_feature_query_argsStandardSchemeFactory implements SchemeFactory {
      public multip_feature_query_argsStandardScheme getScheme() {
        return new multip_feature_query_argsStandardScheme();
      }
    }

    private static class multip_feature_query_argsStandardScheme extends StandardScheme<multip_feature_query_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multip_feature_query_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // T_MUL_FEATURE_EXT_PARA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tMulFeatureExtPara = new T_MulAlgFeatureExtReq();
                struct.tMulFeatureExtPara.read(iprot);
                struct.setTMulFeatureExtParaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multip_feature_query_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tMulFeatureExtPara != null) {
          oprot.writeFieldBegin(T_MUL_FEATURE_EXT_PARA_FIELD_DESC);
          struct.tMulFeatureExtPara.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multip_feature_query_argsTupleSchemeFactory implements SchemeFactory {
      public multip_feature_query_argsTupleScheme getScheme() {
        return new multip_feature_query_argsTupleScheme();
      }
    }

    private static class multip_feature_query_argsTupleScheme extends TupleScheme<multip_feature_query_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multip_feature_query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTMulFeatureExtPara()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTMulFeatureExtPara()) {
          struct.tMulFeatureExtPara.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multip_feature_query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tMulFeatureExtPara = new T_MulAlgFeatureExtReq();
          struct.tMulFeatureExtPara.read(iprot);
          struct.setTMulFeatureExtParaIsSet(true);
        }
      }
    }

  }

  public static class multip_feature_query_result implements org.apache.thrift.TBase<multip_feature_query_result, multip_feature_query_result._Fields>, java.io.Serializable, Cloneable, Comparable<multip_feature_query_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multip_feature_query_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multip_feature_query_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multip_feature_query_resultTupleSchemeFactory());
    }

    public T_MulAlgFeatureExtRsp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, T_MulAlgFeatureExtRsp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multip_feature_query_result.class, metaDataMap);
    }

    public multip_feature_query_result() {
    }

    public multip_feature_query_result(
      T_MulAlgFeatureExtRsp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multip_feature_query_result(multip_feature_query_result other) {
      if (other.isSetSuccess()) {
        this.success = new T_MulAlgFeatureExtRsp(other.success);
      }
    }

    public multip_feature_query_result deepCopy() {
      return new multip_feature_query_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public T_MulAlgFeatureExtRsp getSuccess() {
      return this.success;
    }

    public multip_feature_query_result setSuccess(T_MulAlgFeatureExtRsp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((T_MulAlgFeatureExtRsp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multip_feature_query_result)
        return this.equals((multip_feature_query_result)that);
      return false;
    }

    public boolean equals(multip_feature_query_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(multip_feature_query_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multip_feature_query_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multip_feature_query_resultStandardSchemeFactory implements SchemeFactory {
      public multip_feature_query_resultStandardScheme getScheme() {
        return new multip_feature_query_resultStandardScheme();
      }
    }

    private static class multip_feature_query_resultStandardScheme extends StandardScheme<multip_feature_query_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multip_feature_query_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new T_MulAlgFeatureExtRsp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multip_feature_query_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multip_feature_query_resultTupleSchemeFactory implements SchemeFactory {
      public multip_feature_query_resultTupleScheme getScheme() {
        return new multip_feature_query_resultTupleScheme();
      }
    }

    private static class multip_feature_query_resultTupleScheme extends TupleScheme<multip_feature_query_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multip_feature_query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multip_feature_query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new T_MulAlgFeatureExtRsp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class face_feature_verify_args implements org.apache.thrift.TBase<face_feature_verify_args, face_feature_verify_args._Fields>, java.io.Serializable, Cloneable, Comparable<face_feature_verify_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("face_feature_verify_args");

    private static final org.apache.thrift.protocol.TField INPUT_FACE0_FIELD_DESC = new org.apache.thrift.protocol.TField("inputFace0", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_FACE1_FIELD_DESC = new org.apache.thrift.protocol.TField("inputFace1", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new face_feature_verify_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new face_feature_verify_argsTupleSchemeFactory());
    }

    public String inputFace0; // required
    public String inputFace1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INPUT_FACE0((short)1, "inputFace0"),
      INPUT_FACE1((short)2, "inputFace1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INPUT_FACE0
            return INPUT_FACE0;
          case 2: // INPUT_FACE1
            return INPUT_FACE1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INPUT_FACE0, new org.apache.thrift.meta_data.FieldMetaData("inputFace0", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_FACE1, new org.apache.thrift.meta_data.FieldMetaData("inputFace1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(face_feature_verify_args.class, metaDataMap);
    }

    public face_feature_verify_args() {
    }

    public face_feature_verify_args(
      String inputFace0,
      String inputFace1)
    {
      this();
      this.inputFace0 = inputFace0;
      this.inputFace1 = inputFace1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public face_feature_verify_args(face_feature_verify_args other) {
      if (other.isSetInputFace0()) {
        this.inputFace0 = other.inputFace0;
      }
      if (other.isSetInputFace1()) {
        this.inputFace1 = other.inputFace1;
      }
    }

    public face_feature_verify_args deepCopy() {
      return new face_feature_verify_args(this);
    }

    @Override
    public void clear() {
      this.inputFace0 = null;
      this.inputFace1 = null;
    }

    public String getInputFace0() {
      return this.inputFace0;
    }

    public face_feature_verify_args setInputFace0(String inputFace0) {
      this.inputFace0 = inputFace0;
      return this;
    }

    public void unsetInputFace0() {
      this.inputFace0 = null;
    }

    /** Returns true if field inputFace0 is set (has been assigned a value) and false otherwise */
    public boolean isSetInputFace0() {
      return this.inputFace0 != null;
    }

    public void setInputFace0IsSet(boolean value) {
      if (!value) {
        this.inputFace0 = null;
      }
    }

    public String getInputFace1() {
      return this.inputFace1;
    }

    public face_feature_verify_args setInputFace1(String inputFace1) {
      this.inputFace1 = inputFace1;
      return this;
    }

    public void unsetInputFace1() {
      this.inputFace1 = null;
    }

    /** Returns true if field inputFace1 is set (has been assigned a value) and false otherwise */
    public boolean isSetInputFace1() {
      return this.inputFace1 != null;
    }

    public void setInputFace1IsSet(boolean value) {
      if (!value) {
        this.inputFace1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INPUT_FACE0:
        if (value == null) {
          unsetInputFace0();
        } else {
          setInputFace0((String)value);
        }
        break;

      case INPUT_FACE1:
        if (value == null) {
          unsetInputFace1();
        } else {
          setInputFace1((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INPUT_FACE0:
        return getInputFace0();

      case INPUT_FACE1:
        return getInputFace1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INPUT_FACE0:
        return isSetInputFace0();
      case INPUT_FACE1:
        return isSetInputFace1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof face_feature_verify_args)
        return this.equals((face_feature_verify_args)that);
      return false;
    }

    public boolean equals(face_feature_verify_args that) {
      if (that == null)
        return false;

      boolean this_present_inputFace0 = true && this.isSetInputFace0();
      boolean that_present_inputFace0 = true && that.isSetInputFace0();
      if (this_present_inputFace0 || that_present_inputFace0) {
        if (!(this_present_inputFace0 && that_present_inputFace0))
          return false;
        if (!this.inputFace0.equals(that.inputFace0))
          return false;
      }

      boolean this_present_inputFace1 = true && this.isSetInputFace1();
      boolean that_present_inputFace1 = true && that.isSetInputFace1();
      if (this_present_inputFace1 || that_present_inputFace1) {
        if (!(this_present_inputFace1 && that_present_inputFace1))
          return false;
        if (!this.inputFace1.equals(that.inputFace1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_inputFace0 = true && (isSetInputFace0());
      list.add(present_inputFace0);
      if (present_inputFace0)
        list.add(inputFace0);

      boolean present_inputFace1 = true && (isSetInputFace1());
      list.add(present_inputFace1);
      if (present_inputFace1)
        list.add(inputFace1);

      return list.hashCode();
    }

    @Override
    public int compareTo(face_feature_verify_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInputFace0()).compareTo(other.isSetInputFace0());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputFace0()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputFace0, other.inputFace0);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInputFace1()).compareTo(other.isSetInputFace1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputFace1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputFace1, other.inputFace1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("face_feature_verify_args(");
      boolean first = true;

      sb.append("inputFace0:");
      if (this.inputFace0 == null) {
        sb.append("null");
      } else {
        sb.append(this.inputFace0);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputFace1:");
      if (this.inputFace1 == null) {
        sb.append("null");
      } else {
        sb.append(this.inputFace1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class face_feature_verify_argsStandardSchemeFactory implements SchemeFactory {
      public face_feature_verify_argsStandardScheme getScheme() {
        return new face_feature_verify_argsStandardScheme();
      }
    }

    private static class face_feature_verify_argsStandardScheme extends StandardScheme<face_feature_verify_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, face_feature_verify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INPUT_FACE0
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputFace0 = iprot.readString();
                struct.setInputFace0IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_FACE1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputFace1 = iprot.readString();
                struct.setInputFace1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, face_feature_verify_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inputFace0 != null) {
          oprot.writeFieldBegin(INPUT_FACE0_FIELD_DESC);
          oprot.writeString(struct.inputFace0);
          oprot.writeFieldEnd();
        }
        if (struct.inputFace1 != null) {
          oprot.writeFieldBegin(INPUT_FACE1_FIELD_DESC);
          oprot.writeString(struct.inputFace1);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class face_feature_verify_argsTupleSchemeFactory implements SchemeFactory {
      public face_feature_verify_argsTupleScheme getScheme() {
        return new face_feature_verify_argsTupleScheme();
      }
    }

    private static class face_feature_verify_argsTupleScheme extends TupleScheme<face_feature_verify_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, face_feature_verify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInputFace0()) {
          optionals.set(0);
        }
        if (struct.isSetInputFace1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInputFace0()) {
          oprot.writeString(struct.inputFace0);
        }
        if (struct.isSetInputFace1()) {
          oprot.writeString(struct.inputFace1);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, face_feature_verify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.inputFace0 = iprot.readString();
          struct.setInputFace0IsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputFace1 = iprot.readString();
          struct.setInputFace1IsSet(true);
        }
      }
    }

  }

  public static class face_feature_verify_result implements org.apache.thrift.TBase<face_feature_verify_result, face_feature_verify_result._Fields>, java.io.Serializable, Cloneable, Comparable<face_feature_verify_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("face_feature_verify_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new face_feature_verify_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new face_feature_verify_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(face_feature_verify_result.class, metaDataMap);
    }

    public face_feature_verify_result() {
    }

    public face_feature_verify_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public face_feature_verify_result(face_feature_verify_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public face_feature_verify_result deepCopy() {
      return new face_feature_verify_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public face_feature_verify_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof face_feature_verify_result)
        return this.equals((face_feature_verify_result)that);
      return false;
    }

    public boolean equals(face_feature_verify_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(face_feature_verify_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("face_feature_verify_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class face_feature_verify_resultStandardSchemeFactory implements SchemeFactory {
      public face_feature_verify_resultStandardScheme getScheme() {
        return new face_feature_verify_resultStandardScheme();
      }
    }

    private static class face_feature_verify_resultStandardScheme extends StandardScheme<face_feature_verify_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, face_feature_verify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, face_feature_verify_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class face_feature_verify_resultTupleSchemeFactory implements SchemeFactory {
      public face_feature_verify_resultTupleScheme getScheme() {
        return new face_feature_verify_resultTupleScheme();
      }
    }

    private static class face_feature_verify_resultTupleScheme extends TupleScheme<face_feature_verify_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, face_feature_verify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, face_feature_verify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class mulalg_feature_verify_args implements org.apache.thrift.TBase<mulalg_feature_verify_args, mulalg_feature_verify_args._Fields>, java.io.Serializable, Cloneable, Comparable<mulalg_feature_verify_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mulalg_feature_verify_args");

    private static final org.apache.thrift.protocol.TField INPUT_FACE0_FIELD_DESC = new org.apache.thrift.protocol.TField("inputFace0", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_FACE1_FIELD_DESC = new org.apache.thrift.protocol.TField("inputFace1", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mulalg_feature_verify_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mulalg_feature_verify_argsTupleSchemeFactory());
    }

    public String inputFace0; // required
    public String inputFace1; // required
    public int type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INPUT_FACE0((short)1, "inputFace0"),
      INPUT_FACE1((short)2, "inputFace1"),
      TYPE((short)3, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INPUT_FACE0
            return INPUT_FACE0;
          case 2: // INPUT_FACE1
            return INPUT_FACE1;
          case 3: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INPUT_FACE0, new org.apache.thrift.meta_data.FieldMetaData("inputFace0", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_FACE1, new org.apache.thrift.meta_data.FieldMetaData("inputFace1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mulalg_feature_verify_args.class, metaDataMap);
    }

    public mulalg_feature_verify_args() {
    }

    public mulalg_feature_verify_args(
      String inputFace0,
      String inputFace1,
      int type)
    {
      this();
      this.inputFace0 = inputFace0;
      this.inputFace1 = inputFace1;
      this.type = type;
      setTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mulalg_feature_verify_args(mulalg_feature_verify_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetInputFace0()) {
        this.inputFace0 = other.inputFace0;
      }
      if (other.isSetInputFace1()) {
        this.inputFace1 = other.inputFace1;
      }
      this.type = other.type;
    }

    public mulalg_feature_verify_args deepCopy() {
      return new mulalg_feature_verify_args(this);
    }

    @Override
    public void clear() {
      this.inputFace0 = null;
      this.inputFace1 = null;
      setTypeIsSet(false);
      this.type = 0;
    }

    public String getInputFace0() {
      return this.inputFace0;
    }

    public mulalg_feature_verify_args setInputFace0(String inputFace0) {
      this.inputFace0 = inputFace0;
      return this;
    }

    public void unsetInputFace0() {
      this.inputFace0 = null;
    }

    /** Returns true if field inputFace0 is set (has been assigned a value) and false otherwise */
    public boolean isSetInputFace0() {
      return this.inputFace0 != null;
    }

    public void setInputFace0IsSet(boolean value) {
      if (!value) {
        this.inputFace0 = null;
      }
    }

    public String getInputFace1() {
      return this.inputFace1;
    }

    public mulalg_feature_verify_args setInputFace1(String inputFace1) {
      this.inputFace1 = inputFace1;
      return this;
    }

    public void unsetInputFace1() {
      this.inputFace1 = null;
    }

    /** Returns true if field inputFace1 is set (has been assigned a value) and false otherwise */
    public boolean isSetInputFace1() {
      return this.inputFace1 != null;
    }

    public void setInputFace1IsSet(boolean value) {
      if (!value) {
        this.inputFace1 = null;
      }
    }

    public int getType() {
      return this.type;
    }

    public mulalg_feature_verify_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INPUT_FACE0:
        if (value == null) {
          unsetInputFace0();
        } else {
          setInputFace0((String)value);
        }
        break;

      case INPUT_FACE1:
        if (value == null) {
          unsetInputFace1();
        } else {
          setInputFace1((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INPUT_FACE0:
        return getInputFace0();

      case INPUT_FACE1:
        return getInputFace1();

      case TYPE:
        return Integer.valueOf(getType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INPUT_FACE0:
        return isSetInputFace0();
      case INPUT_FACE1:
        return isSetInputFace1();
      case TYPE:
        return isSetType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mulalg_feature_verify_args)
        return this.equals((mulalg_feature_verify_args)that);
      return false;
    }

    public boolean equals(mulalg_feature_verify_args that) {
      if (that == null)
        return false;

      boolean this_present_inputFace0 = true && this.isSetInputFace0();
      boolean that_present_inputFace0 = true && that.isSetInputFace0();
      if (this_present_inputFace0 || that_present_inputFace0) {
        if (!(this_present_inputFace0 && that_present_inputFace0))
          return false;
        if (!this.inputFace0.equals(that.inputFace0))
          return false;
      }

      boolean this_present_inputFace1 = true && this.isSetInputFace1();
      boolean that_present_inputFace1 = true && that.isSetInputFace1();
      if (this_present_inputFace1 || that_present_inputFace1) {
        if (!(this_present_inputFace1 && that_present_inputFace1))
          return false;
        if (!this.inputFace1.equals(that.inputFace1))
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_inputFace0 = true && (isSetInputFace0());
      list.add(present_inputFace0);
      if (present_inputFace0)
        list.add(inputFace0);

      boolean present_inputFace1 = true && (isSetInputFace1());
      list.add(present_inputFace1);
      if (present_inputFace1)
        list.add(inputFace1);

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      return list.hashCode();
    }

    @Override
    public int compareTo(mulalg_feature_verify_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInputFace0()).compareTo(other.isSetInputFace0());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputFace0()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputFace0, other.inputFace0);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInputFace1()).compareTo(other.isSetInputFace1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputFace1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputFace1, other.inputFace1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mulalg_feature_verify_args(");
      boolean first = true;

      sb.append("inputFace0:");
      if (this.inputFace0 == null) {
        sb.append("null");
      } else {
        sb.append(this.inputFace0);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputFace1:");
      if (this.inputFace1 == null) {
        sb.append("null");
      } else {
        sb.append(this.inputFace1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mulalg_feature_verify_argsStandardSchemeFactory implements SchemeFactory {
      public mulalg_feature_verify_argsStandardScheme getScheme() {
        return new mulalg_feature_verify_argsStandardScheme();
      }
    }

    private static class mulalg_feature_verify_argsStandardScheme extends StandardScheme<mulalg_feature_verify_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mulalg_feature_verify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INPUT_FACE0
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputFace0 = iprot.readString();
                struct.setInputFace0IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_FACE1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputFace1 = iprot.readString();
                struct.setInputFace1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mulalg_feature_verify_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inputFace0 != null) {
          oprot.writeFieldBegin(INPUT_FACE0_FIELD_DESC);
          oprot.writeString(struct.inputFace0);
          oprot.writeFieldEnd();
        }
        if (struct.inputFace1 != null) {
          oprot.writeFieldBegin(INPUT_FACE1_FIELD_DESC);
          oprot.writeString(struct.inputFace1);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mulalg_feature_verify_argsTupleSchemeFactory implements SchemeFactory {
      public mulalg_feature_verify_argsTupleScheme getScheme() {
        return new mulalg_feature_verify_argsTupleScheme();
      }
    }

    private static class mulalg_feature_verify_argsTupleScheme extends TupleScheme<mulalg_feature_verify_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mulalg_feature_verify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInputFace0()) {
          optionals.set(0);
        }
        if (struct.isSetInputFace1()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetInputFace0()) {
          oprot.writeString(struct.inputFace0);
        }
        if (struct.isSetInputFace1()) {
          oprot.writeString(struct.inputFace1);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mulalg_feature_verify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.inputFace0 = iprot.readString();
          struct.setInputFace0IsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputFace1 = iprot.readString();
          struct.setInputFace1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
      }
    }

  }

  public static class mulalg_feature_verify_result implements org.apache.thrift.TBase<mulalg_feature_verify_result, mulalg_feature_verify_result._Fields>, java.io.Serializable, Cloneable, Comparable<mulalg_feature_verify_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mulalg_feature_verify_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mulalg_feature_verify_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mulalg_feature_verify_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mulalg_feature_verify_result.class, metaDataMap);
    }

    public mulalg_feature_verify_result() {
    }

    public mulalg_feature_verify_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mulalg_feature_verify_result(mulalg_feature_verify_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public mulalg_feature_verify_result deepCopy() {
      return new mulalg_feature_verify_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public mulalg_feature_verify_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mulalg_feature_verify_result)
        return this.equals((mulalg_feature_verify_result)that);
      return false;
    }

    public boolean equals(mulalg_feature_verify_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(mulalg_feature_verify_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mulalg_feature_verify_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mulalg_feature_verify_resultStandardSchemeFactory implements SchemeFactory {
      public mulalg_feature_verify_resultStandardScheme getScheme() {
        return new mulalg_feature_verify_resultStandardScheme();
      }
    }

    private static class mulalg_feature_verify_resultStandardScheme extends StandardScheme<mulalg_feature_verify_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mulalg_feature_verify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mulalg_feature_verify_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mulalg_feature_verify_resultTupleSchemeFactory implements SchemeFactory {
      public mulalg_feature_verify_resultTupleScheme getScheme() {
        return new mulalg_feature_verify_resultTupleScheme();
      }
    }

    private static class mulalg_feature_verify_resultTupleScheme extends TupleScheme<mulalg_feature_verify_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mulalg_feature_verify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mulalg_feature_verify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class face_feature_compare_args implements org.apache.thrift.TBase<face_feature_compare_args, face_feature_compare_args._Fields>, java.io.Serializable, Cloneable, Comparable<face_feature_compare_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("face_feature_compare_args");

    private static final org.apache.thrift.protocol.TField FACE_TYPE0_FIELD_DESC = new org.apache.thrift.protocol.TField("faceType0", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FACE_ID0_FIELD_DESC = new org.apache.thrift.protocol.TField("faceId0", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField FACE_TYPE1_FIELD_DESC = new org.apache.thrift.protocol.TField("faceType1", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField FACE_ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("faceId1", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new face_feature_compare_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new face_feature_compare_argsTupleSchemeFactory());
    }

    public int faceType0; // required
    public long faceId0; // required
    public int faceType1; // required
    public long faceId1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FACE_TYPE0((short)1, "faceType0"),
      FACE_ID0((short)2, "faceId0"),
      FACE_TYPE1((short)3, "faceType1"),
      FACE_ID1((short)4, "faceId1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FACE_TYPE0
            return FACE_TYPE0;
          case 2: // FACE_ID0
            return FACE_ID0;
          case 3: // FACE_TYPE1
            return FACE_TYPE1;
          case 4: // FACE_ID1
            return FACE_ID1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FACETYPE0_ISSET_ID = 0;
    private static final int __FACEID0_ISSET_ID = 1;
    private static final int __FACETYPE1_ISSET_ID = 2;
    private static final int __FACEID1_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FACE_TYPE0, new org.apache.thrift.meta_data.FieldMetaData("faceType0", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FACE_ID0, new org.apache.thrift.meta_data.FieldMetaData("faceId0", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FACE_TYPE1, new org.apache.thrift.meta_data.FieldMetaData("faceType1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FACE_ID1, new org.apache.thrift.meta_data.FieldMetaData("faceId1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(face_feature_compare_args.class, metaDataMap);
    }

    public face_feature_compare_args() {
    }

    public face_feature_compare_args(
      int faceType0,
      long faceId0,
      int faceType1,
      long faceId1)
    {
      this();
      this.faceType0 = faceType0;
      setFaceType0IsSet(true);
      this.faceId0 = faceId0;
      setFaceId0IsSet(true);
      this.faceType1 = faceType1;
      setFaceType1IsSet(true);
      this.faceId1 = faceId1;
      setFaceId1IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public face_feature_compare_args(face_feature_compare_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.faceType0 = other.faceType0;
      this.faceId0 = other.faceId0;
      this.faceType1 = other.faceType1;
      this.faceId1 = other.faceId1;
    }

    public face_feature_compare_args deepCopy() {
      return new face_feature_compare_args(this);
    }

    @Override
    public void clear() {
      setFaceType0IsSet(false);
      this.faceType0 = 0;
      setFaceId0IsSet(false);
      this.faceId0 = 0;
      setFaceType1IsSet(false);
      this.faceType1 = 0;
      setFaceId1IsSet(false);
      this.faceId1 = 0;
    }

    public int getFaceType0() {
      return this.faceType0;
    }

    public face_feature_compare_args setFaceType0(int faceType0) {
      this.faceType0 = faceType0;
      setFaceType0IsSet(true);
      return this;
    }

    public void unsetFaceType0() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FACETYPE0_ISSET_ID);
    }

    /** Returns true if field faceType0 is set (has been assigned a value) and false otherwise */
    public boolean isSetFaceType0() {
      return EncodingUtils.testBit(__isset_bitfield, __FACETYPE0_ISSET_ID);
    }

    public void setFaceType0IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FACETYPE0_ISSET_ID, value);
    }

    public long getFaceId0() {
      return this.faceId0;
    }

    public face_feature_compare_args setFaceId0(long faceId0) {
      this.faceId0 = faceId0;
      setFaceId0IsSet(true);
      return this;
    }

    public void unsetFaceId0() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FACEID0_ISSET_ID);
    }

    /** Returns true if field faceId0 is set (has been assigned a value) and false otherwise */
    public boolean isSetFaceId0() {
      return EncodingUtils.testBit(__isset_bitfield, __FACEID0_ISSET_ID);
    }

    public void setFaceId0IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FACEID0_ISSET_ID, value);
    }

    public int getFaceType1() {
      return this.faceType1;
    }

    public face_feature_compare_args setFaceType1(int faceType1) {
      this.faceType1 = faceType1;
      setFaceType1IsSet(true);
      return this;
    }

    public void unsetFaceType1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FACETYPE1_ISSET_ID);
    }

    /** Returns true if field faceType1 is set (has been assigned a value) and false otherwise */
    public boolean isSetFaceType1() {
      return EncodingUtils.testBit(__isset_bitfield, __FACETYPE1_ISSET_ID);
    }

    public void setFaceType1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FACETYPE1_ISSET_ID, value);
    }

    public long getFaceId1() {
      return this.faceId1;
    }

    public face_feature_compare_args setFaceId1(long faceId1) {
      this.faceId1 = faceId1;
      setFaceId1IsSet(true);
      return this;
    }

    public void unsetFaceId1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FACEID1_ISSET_ID);
    }

    /** Returns true if field faceId1 is set (has been assigned a value) and false otherwise */
    public boolean isSetFaceId1() {
      return EncodingUtils.testBit(__isset_bitfield, __FACEID1_ISSET_ID);
    }

    public void setFaceId1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FACEID1_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FACE_TYPE0:
        if (value == null) {
          unsetFaceType0();
        } else {
          setFaceType0((Integer)value);
        }
        break;

      case FACE_ID0:
        if (value == null) {
          unsetFaceId0();
        } else {
          setFaceId0((Long)value);
        }
        break;

      case FACE_TYPE1:
        if (value == null) {
          unsetFaceType1();
        } else {
          setFaceType1((Integer)value);
        }
        break;

      case FACE_ID1:
        if (value == null) {
          unsetFaceId1();
        } else {
          setFaceId1((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FACE_TYPE0:
        return Integer.valueOf(getFaceType0());

      case FACE_ID0:
        return Long.valueOf(getFaceId0());

      case FACE_TYPE1:
        return Integer.valueOf(getFaceType1());

      case FACE_ID1:
        return Long.valueOf(getFaceId1());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FACE_TYPE0:
        return isSetFaceType0();
      case FACE_ID0:
        return isSetFaceId0();
      case FACE_TYPE1:
        return isSetFaceType1();
      case FACE_ID1:
        return isSetFaceId1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof face_feature_compare_args)
        return this.equals((face_feature_compare_args)that);
      return false;
    }

    public boolean equals(face_feature_compare_args that) {
      if (that == null)
        return false;

      boolean this_present_faceType0 = true;
      boolean that_present_faceType0 = true;
      if (this_present_faceType0 || that_present_faceType0) {
        if (!(this_present_faceType0 && that_present_faceType0))
          return false;
        if (this.faceType0 != that.faceType0)
          return false;
      }

      boolean this_present_faceId0 = true;
      boolean that_present_faceId0 = true;
      if (this_present_faceId0 || that_present_faceId0) {
        if (!(this_present_faceId0 && that_present_faceId0))
          return false;
        if (this.faceId0 != that.faceId0)
          return false;
      }

      boolean this_present_faceType1 = true;
      boolean that_present_faceType1 = true;
      if (this_present_faceType1 || that_present_faceType1) {
        if (!(this_present_faceType1 && that_present_faceType1))
          return false;
        if (this.faceType1 != that.faceType1)
          return false;
      }

      boolean this_present_faceId1 = true;
      boolean that_present_faceId1 = true;
      if (this_present_faceId1 || that_present_faceId1) {
        if (!(this_present_faceId1 && that_present_faceId1))
          return false;
        if (this.faceId1 != that.faceId1)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_faceType0 = true;
      list.add(present_faceType0);
      if (present_faceType0)
        list.add(faceType0);

      boolean present_faceId0 = true;
      list.add(present_faceId0);
      if (present_faceId0)
        list.add(faceId0);

      boolean present_faceType1 = true;
      list.add(present_faceType1);
      if (present_faceType1)
        list.add(faceType1);

      boolean present_faceId1 = true;
      list.add(present_faceId1);
      if (present_faceId1)
        list.add(faceId1);

      return list.hashCode();
    }

    @Override
    public int compareTo(face_feature_compare_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFaceType0()).compareTo(other.isSetFaceType0());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFaceType0()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceType0, other.faceType0);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFaceId0()).compareTo(other.isSetFaceId0());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFaceId0()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceId0, other.faceId0);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFaceType1()).compareTo(other.isSetFaceType1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFaceType1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceType1, other.faceType1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFaceId1()).compareTo(other.isSetFaceId1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFaceId1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceId1, other.faceId1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("face_feature_compare_args(");
      boolean first = true;

      sb.append("faceType0:");
      sb.append(this.faceType0);
      first = false;
      if (!first) sb.append(", ");
      sb.append("faceId0:");
      sb.append(this.faceId0);
      first = false;
      if (!first) sb.append(", ");
      sb.append("faceType1:");
      sb.append(this.faceType1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("faceId1:");
      sb.append(this.faceId1);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class face_feature_compare_argsStandardSchemeFactory implements SchemeFactory {
      public face_feature_compare_argsStandardScheme getScheme() {
        return new face_feature_compare_argsStandardScheme();
      }
    }

    private static class face_feature_compare_argsStandardScheme extends StandardScheme<face_feature_compare_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, face_feature_compare_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FACE_TYPE0
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.faceType0 = iprot.readI32();
                struct.setFaceType0IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FACE_ID0
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.faceId0 = iprot.readI64();
                struct.setFaceId0IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FACE_TYPE1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.faceType1 = iprot.readI32();
                struct.setFaceType1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FACE_ID1
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.faceId1 = iprot.readI64();
                struct.setFaceId1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, face_feature_compare_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FACE_TYPE0_FIELD_DESC);
        oprot.writeI32(struct.faceType0);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FACE_ID0_FIELD_DESC);
        oprot.writeI64(struct.faceId0);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FACE_TYPE1_FIELD_DESC);
        oprot.writeI32(struct.faceType1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FACE_ID1_FIELD_DESC);
        oprot.writeI64(struct.faceId1);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class face_feature_compare_argsTupleSchemeFactory implements SchemeFactory {
      public face_feature_compare_argsTupleScheme getScheme() {
        return new face_feature_compare_argsTupleScheme();
      }
    }

    private static class face_feature_compare_argsTupleScheme extends TupleScheme<face_feature_compare_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, face_feature_compare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFaceType0()) {
          optionals.set(0);
        }
        if (struct.isSetFaceId0()) {
          optionals.set(1);
        }
        if (struct.isSetFaceType1()) {
          optionals.set(2);
        }
        if (struct.isSetFaceId1()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFaceType0()) {
          oprot.writeI32(struct.faceType0);
        }
        if (struct.isSetFaceId0()) {
          oprot.writeI64(struct.faceId0);
        }
        if (struct.isSetFaceType1()) {
          oprot.writeI32(struct.faceType1);
        }
        if (struct.isSetFaceId1()) {
          oprot.writeI64(struct.faceId1);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, face_feature_compare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.faceType0 = iprot.readI32();
          struct.setFaceType0IsSet(true);
        }
        if (incoming.get(1)) {
          struct.faceId0 = iprot.readI64();
          struct.setFaceId0IsSet(true);
        }
        if (incoming.get(2)) {
          struct.faceType1 = iprot.readI32();
          struct.setFaceType1IsSet(true);
        }
        if (incoming.get(3)) {
          struct.faceId1 = iprot.readI64();
          struct.setFaceId1IsSet(true);
        }
      }
    }

  }

  public static class face_feature_compare_result implements org.apache.thrift.TBase<face_feature_compare_result, face_feature_compare_result._Fields>, java.io.Serializable, Cloneable, Comparable<face_feature_compare_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("face_feature_compare_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new face_feature_compare_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new face_feature_compare_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(face_feature_compare_result.class, metaDataMap);
    }

    public face_feature_compare_result() {
    }

    public face_feature_compare_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public face_feature_compare_result(face_feature_compare_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public face_feature_compare_result deepCopy() {
      return new face_feature_compare_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public face_feature_compare_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof face_feature_compare_result)
        return this.equals((face_feature_compare_result)that);
      return false;
    }

    public boolean equals(face_feature_compare_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(face_feature_compare_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("face_feature_compare_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class face_feature_compare_resultStandardSchemeFactory implements SchemeFactory {
      public face_feature_compare_resultStandardScheme getScheme() {
        return new face_feature_compare_resultStandardScheme();
      }
    }

    private static class face_feature_compare_resultStandardScheme extends StandardScheme<face_feature_compare_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, face_feature_compare_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, face_feature_compare_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class face_feature_compare_resultTupleSchemeFactory implements SchemeFactory {
      public face_feature_compare_resultTupleScheme getScheme() {
        return new face_feature_compare_resultTupleScheme();
      }
    }

    private static class face_feature_compare_resultTupleScheme extends TupleScheme<face_feature_compare_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, face_feature_compare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, face_feature_compare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class task_surveillance_create_args implements org.apache.thrift.TBase<task_surveillance_create_args, task_surveillance_create_args._Fields>, java.io.Serializable, Cloneable, Comparable<task_surveillance_create_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("task_surveillance_create_args");

    private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("info", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new task_surveillance_create_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new task_surveillance_create_argsTupleSchemeFactory());
    }

    public T_IF_TASK_INFO info; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INFO((short)1, "info");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INFO
            return INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INFO, new org.apache.thrift.meta_data.FieldMetaData("info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, T_IF_TASK_INFO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(task_surveillance_create_args.class, metaDataMap);
    }

    public task_surveillance_create_args() {
    }

    public task_surveillance_create_args(
      T_IF_TASK_INFO info)
    {
      this();
      this.info = info;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public task_surveillance_create_args(task_surveillance_create_args other) {
      if (other.isSetInfo()) {
        this.info = new T_IF_TASK_INFO(other.info);
      }
    }

    public task_surveillance_create_args deepCopy() {
      return new task_surveillance_create_args(this);
    }

    @Override
    public void clear() {
      this.info = null;
    }

    public T_IF_TASK_INFO getInfo() {
      return this.info;
    }

    public task_surveillance_create_args setInfo(T_IF_TASK_INFO info) {
      this.info = info;
      return this;
    }

    public void unsetInfo() {
      this.info = null;
    }

    /** Returns true if field info is set (has been assigned a value) and false otherwise */
    public boolean isSetInfo() {
      return this.info != null;
    }

    public void setInfoIsSet(boolean value) {
      if (!value) {
        this.info = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INFO:
        if (value == null) {
          unsetInfo();
        } else {
          setInfo((T_IF_TASK_INFO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INFO:
        return getInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INFO:
        return isSetInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof task_surveillance_create_args)
        return this.equals((task_surveillance_create_args)that);
      return false;
    }

    public boolean equals(task_surveillance_create_args that) {
      if (that == null)
        return false;

      boolean this_present_info = true && this.isSetInfo();
      boolean that_present_info = true && that.isSetInfo();
      if (this_present_info || that_present_info) {
        if (!(this_present_info && that_present_info))
          return false;
        if (!this.info.equals(that.info))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_info = true && (isSetInfo());
      list.add(present_info);
      if (present_info)
        list.add(info);

      return list.hashCode();
    }

    @Override
    public int compareTo(task_surveillance_create_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInfo()).compareTo(other.isSetInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info, other.info);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("task_surveillance_create_args(");
      boolean first = true;

      sb.append("info:");
      if (this.info == null) {
        sb.append("null");
      } else {
        sb.append(this.info);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (info != null) {
        info.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class task_surveillance_create_argsStandardSchemeFactory implements SchemeFactory {
      public task_surveillance_create_argsStandardScheme getScheme() {
        return new task_surveillance_create_argsStandardScheme();
      }
    }

    private static class task_surveillance_create_argsStandardScheme extends StandardScheme<task_surveillance_create_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, task_surveillance_create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.info = new T_IF_TASK_INFO();
                struct.info.read(iprot);
                struct.setInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, task_surveillance_create_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.info != null) {
          oprot.writeFieldBegin(INFO_FIELD_DESC);
          struct.info.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class task_surveillance_create_argsTupleSchemeFactory implements SchemeFactory {
      public task_surveillance_create_argsTupleScheme getScheme() {
        return new task_surveillance_create_argsTupleScheme();
      }
    }

    private static class task_surveillance_create_argsTupleScheme extends TupleScheme<task_surveillance_create_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, task_surveillance_create_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInfo()) {
          struct.info.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, task_surveillance_create_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.info = new T_IF_TASK_INFO();
          struct.info.read(iprot);
          struct.setInfoIsSet(true);
        }
      }
    }

  }

  public static class task_surveillance_create_result implements org.apache.thrift.TBase<task_surveillance_create_result, task_surveillance_create_result._Fields>, java.io.Serializable, Cloneable, Comparable<task_surveillance_create_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("task_surveillance_create_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new task_surveillance_create_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new task_surveillance_create_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(task_surveillance_create_result.class, metaDataMap);
    }

    public task_surveillance_create_result() {
    }

    public task_surveillance_create_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public task_surveillance_create_result(task_surveillance_create_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public task_surveillance_create_result deepCopy() {
      return new task_surveillance_create_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public task_surveillance_create_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof task_surveillance_create_result)
        return this.equals((task_surveillance_create_result)that);
      return false;
    }

    public boolean equals(task_surveillance_create_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(task_surveillance_create_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("task_surveillance_create_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class task_surveillance_create_resultStandardSchemeFactory implements SchemeFactory {
      public task_surveillance_create_resultStandardScheme getScheme() {
        return new task_surveillance_create_resultStandardScheme();
      }
    }

    private static class task_surveillance_create_resultStandardScheme extends StandardScheme<task_surveillance_create_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, task_surveillance_create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, task_surveillance_create_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class task_surveillance_create_resultTupleSchemeFactory implements SchemeFactory {
      public task_surveillance_create_resultTupleScheme getScheme() {
        return new task_surveillance_create_resultTupleScheme();
      }
    }

    private static class task_surveillance_create_resultTupleScheme extends TupleScheme<task_surveillance_create_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, task_surveillance_create_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, task_surveillance_create_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class task_surveillance_terminate_args implements org.apache.thrift.TBase<task_surveillance_terminate_args, task_surveillance_terminate_args._Fields>, java.io.Serializable, Cloneable, Comparable<task_surveillance_terminate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("task_surveillance_terminate_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new task_surveillance_terminate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new task_surveillance_terminate_argsTupleSchemeFactory());
    }

    public long taskId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "taskId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(task_surveillance_terminate_args.class, metaDataMap);
    }

    public task_surveillance_terminate_args() {
    }

    public task_surveillance_terminate_args(
      long taskId)
    {
      this();
      this.taskId = taskId;
      setTaskIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public task_surveillance_terminate_args(task_surveillance_terminate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.taskId = other.taskId;
    }

    public task_surveillance_terminate_args deepCopy() {
      return new task_surveillance_terminate_args(this);
    }

    @Override
    public void clear() {
      setTaskIdIsSet(false);
      this.taskId = 0;
    }

    public long getTaskId() {
      return this.taskId;
    }

    public task_surveillance_terminate_args setTaskId(long taskId) {
      this.taskId = taskId;
      setTaskIdIsSet(true);
      return this;
    }

    public void unsetTaskId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void setTaskIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return Long.valueOf(getTaskId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTaskId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof task_surveillance_terminate_args)
        return this.equals((task_surveillance_terminate_args)that);
      return false;
    }

    public boolean equals(task_surveillance_terminate_args that) {
      if (that == null)
        return false;

      boolean this_present_taskId = true;
      boolean that_present_taskId = true;
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (this.taskId != that.taskId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_taskId = true;
      list.add(present_taskId);
      if (present_taskId)
        list.add(taskId);

      return list.hashCode();
    }

    @Override
    public int compareTo(task_surveillance_terminate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("task_surveillance_terminate_args(");
      boolean first = true;

      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class task_surveillance_terminate_argsStandardSchemeFactory implements SchemeFactory {
      public task_surveillance_terminate_argsStandardScheme getScheme() {
        return new task_surveillance_terminate_argsStandardScheme();
      }
    }

    private static class task_surveillance_terminate_argsStandardScheme extends StandardScheme<task_surveillance_terminate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, task_surveillance_terminate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.taskId = iprot.readI64();
                struct.setTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, task_surveillance_terminate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI64(struct.taskId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class task_surveillance_terminate_argsTupleSchemeFactory implements SchemeFactory {
      public task_surveillance_terminate_argsTupleScheme getScheme() {
        return new task_surveillance_terminate_argsTupleScheme();
      }
    }

    private static class task_surveillance_terminate_argsTupleScheme extends TupleScheme<task_surveillance_terminate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, task_surveillance_terminate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTaskId()) {
          oprot.writeI64(struct.taskId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, task_surveillance_terminate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.taskId = iprot.readI64();
          struct.setTaskIdIsSet(true);
        }
      }
    }

  }

  public static class task_surveillance_terminate_result implements org.apache.thrift.TBase<task_surveillance_terminate_result, task_surveillance_terminate_result._Fields>, java.io.Serializable, Cloneable, Comparable<task_surveillance_terminate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("task_surveillance_terminate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new task_surveillance_terminate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new task_surveillance_terminate_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(task_surveillance_terminate_result.class, metaDataMap);
    }

    public task_surveillance_terminate_result() {
    }

    public task_surveillance_terminate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public task_surveillance_terminate_result(task_surveillance_terminate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public task_surveillance_terminate_result deepCopy() {
      return new task_surveillance_terminate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public task_surveillance_terminate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof task_surveillance_terminate_result)
        return this.equals((task_surveillance_terminate_result)that);
      return false;
    }

    public boolean equals(task_surveillance_terminate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(task_surveillance_terminate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("task_surveillance_terminate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class task_surveillance_terminate_resultStandardSchemeFactory implements SchemeFactory {
      public task_surveillance_terminate_resultStandardScheme getScheme() {
        return new task_surveillance_terminate_resultStandardScheme();
      }
    }

    private static class task_surveillance_terminate_resultStandardScheme extends StandardScheme<task_surveillance_terminate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, task_surveillance_terminate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, task_surveillance_terminate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class task_surveillance_terminate_resultTupleSchemeFactory implements SchemeFactory {
      public task_surveillance_terminate_resultTupleScheme getScheme() {
        return new task_surveillance_terminate_resultTupleScheme();
      }
    }

    private static class task_surveillance_terminate_resultTupleScheme extends TupleScheme<task_surveillance_terminate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, task_surveillance_terminate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, task_surveillance_terminate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class task_snaper_create_args implements org.apache.thrift.TBase<task_snaper_create_args, task_snaper_create_args._Fields>, java.io.Serializable, Cloneable, Comparable<task_snaper_create_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("task_snaper_create_args");

    private static final org.apache.thrift.protocol.TField SOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new task_snaper_create_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new task_snaper_create_argsTupleSchemeFactory());
    }

    public int sourceType; // required
    public long sourceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SOURCE_TYPE((short)1, "sourceType"),
      SOURCE_ID((short)2, "sourceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SOURCE_TYPE
            return SOURCE_TYPE;
          case 2: // SOURCE_ID
            return SOURCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SOURCETYPE_ISSET_ID = 0;
    private static final int __SOURCEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sourceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(task_snaper_create_args.class, metaDataMap);
    }

    public task_snaper_create_args() {
    }

    public task_snaper_create_args(
      int sourceType,
      long sourceId)
    {
      this();
      this.sourceType = sourceType;
      setSourceTypeIsSet(true);
      this.sourceId = sourceId;
      setSourceIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public task_snaper_create_args(task_snaper_create_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.sourceType = other.sourceType;
      this.sourceId = other.sourceId;
    }

    public task_snaper_create_args deepCopy() {
      return new task_snaper_create_args(this);
    }

    @Override
    public void clear() {
      setSourceTypeIsSet(false);
      this.sourceType = 0;
      setSourceIdIsSet(false);
      this.sourceId = 0;
    }

    public int getSourceType() {
      return this.sourceType;
    }

    public task_snaper_create_args setSourceType(int sourceType) {
      this.sourceType = sourceType;
      setSourceTypeIsSet(true);
      return this;
    }

    public void unsetSourceType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCETYPE_ISSET_ID);
    }

    /** Returns true if field sourceType is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceType() {
      return EncodingUtils.testBit(__isset_bitfield, __SOURCETYPE_ISSET_ID);
    }

    public void setSourceTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCETYPE_ISSET_ID, value);
    }

    public long getSourceId() {
      return this.sourceId;
    }

    public task_snaper_create_args setSourceId(long sourceId) {
      this.sourceId = sourceId;
      setSourceIdIsSet(true);
      return this;
    }

    public void unsetSourceId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCEID_ISSET_ID);
    }

    /** Returns true if field sourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceId() {
      return EncodingUtils.testBit(__isset_bitfield, __SOURCEID_ISSET_ID);
    }

    public void setSourceIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SOURCE_TYPE:
        if (value == null) {
          unsetSourceType();
        } else {
          setSourceType((Integer)value);
        }
        break;

      case SOURCE_ID:
        if (value == null) {
          unsetSourceId();
        } else {
          setSourceId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SOURCE_TYPE:
        return Integer.valueOf(getSourceType());

      case SOURCE_ID:
        return Long.valueOf(getSourceId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SOURCE_TYPE:
        return isSetSourceType();
      case SOURCE_ID:
        return isSetSourceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof task_snaper_create_args)
        return this.equals((task_snaper_create_args)that);
      return false;
    }

    public boolean equals(task_snaper_create_args that) {
      if (that == null)
        return false;

      boolean this_present_sourceType = true;
      boolean that_present_sourceType = true;
      if (this_present_sourceType || that_present_sourceType) {
        if (!(this_present_sourceType && that_present_sourceType))
          return false;
        if (this.sourceType != that.sourceType)
          return false;
      }

      boolean this_present_sourceId = true;
      boolean that_present_sourceId = true;
      if (this_present_sourceId || that_present_sourceId) {
        if (!(this_present_sourceId && that_present_sourceId))
          return false;
        if (this.sourceId != that.sourceId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sourceType = true;
      list.add(present_sourceType);
      if (present_sourceType)
        list.add(sourceType);

      boolean present_sourceId = true;
      list.add(present_sourceId);
      if (present_sourceId)
        list.add(sourceId);

      return list.hashCode();
    }

    @Override
    public int compareTo(task_snaper_create_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSourceType()).compareTo(other.isSetSourceType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceType, other.sourceType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSourceId()).compareTo(other.isSetSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceId, other.sourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("task_snaper_create_args(");
      boolean first = true;

      sb.append("sourceType:");
      sb.append(this.sourceType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sourceId:");
      sb.append(this.sourceId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class task_snaper_create_argsStandardSchemeFactory implements SchemeFactory {
      public task_snaper_create_argsStandardScheme getScheme() {
        return new task_snaper_create_argsStandardScheme();
      }
    }

    private static class task_snaper_create_argsStandardScheme extends StandardScheme<task_snaper_create_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, task_snaper_create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SOURCE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sourceType = iprot.readI32();
                struct.setSourceTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.sourceId = iprot.readI64();
                struct.setSourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, task_snaper_create_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SOURCE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.sourceType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SOURCE_ID_FIELD_DESC);
        oprot.writeI64(struct.sourceId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class task_snaper_create_argsTupleSchemeFactory implements SchemeFactory {
      public task_snaper_create_argsTupleScheme getScheme() {
        return new task_snaper_create_argsTupleScheme();
      }
    }

    private static class task_snaper_create_argsTupleScheme extends TupleScheme<task_snaper_create_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, task_snaper_create_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSourceType()) {
          optionals.set(0);
        }
        if (struct.isSetSourceId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSourceType()) {
          oprot.writeI32(struct.sourceType);
        }
        if (struct.isSetSourceId()) {
          oprot.writeI64(struct.sourceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, task_snaper_create_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sourceType = iprot.readI32();
          struct.setSourceTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sourceId = iprot.readI64();
          struct.setSourceIdIsSet(true);
        }
      }
    }

  }

  public static class task_snaper_create_result implements org.apache.thrift.TBase<task_snaper_create_result, task_snaper_create_result._Fields>, java.io.Serializable, Cloneable, Comparable<task_snaper_create_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("task_snaper_create_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new task_snaper_create_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new task_snaper_create_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(task_snaper_create_result.class, metaDataMap);
    }

    public task_snaper_create_result() {
    }

    public task_snaper_create_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public task_snaper_create_result(task_snaper_create_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public task_snaper_create_result deepCopy() {
      return new task_snaper_create_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public task_snaper_create_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof task_snaper_create_result)
        return this.equals((task_snaper_create_result)that);
      return false;
    }

    public boolean equals(task_snaper_create_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(task_snaper_create_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("task_snaper_create_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class task_snaper_create_resultStandardSchemeFactory implements SchemeFactory {
      public task_snaper_create_resultStandardScheme getScheme() {
        return new task_snaper_create_resultStandardScheme();
      }
    }

    private static class task_snaper_create_resultStandardScheme extends StandardScheme<task_snaper_create_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, task_snaper_create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, task_snaper_create_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class task_snaper_create_resultTupleSchemeFactory implements SchemeFactory {
      public task_snaper_create_resultTupleScheme getScheme() {
        return new task_snaper_create_resultTupleScheme();
      }
    }

    private static class task_snaper_create_resultTupleScheme extends TupleScheme<task_snaper_create_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, task_snaper_create_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, task_snaper_create_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class task_snaper_terminate_args implements org.apache.thrift.TBase<task_snaper_terminate_args, task_snaper_terminate_args._Fields>, java.io.Serializable, Cloneable, Comparable<task_snaper_terminate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("task_snaper_terminate_args");

    private static final org.apache.thrift.protocol.TField SOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new task_snaper_terminate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new task_snaper_terminate_argsTupleSchemeFactory());
    }

    public int sourceType; // required
    public long sourceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SOURCE_TYPE((short)1, "sourceType"),
      SOURCE_ID((short)2, "sourceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SOURCE_TYPE
            return SOURCE_TYPE;
          case 2: // SOURCE_ID
            return SOURCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SOURCETYPE_ISSET_ID = 0;
    private static final int __SOURCEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sourceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(task_snaper_terminate_args.class, metaDataMap);
    }

    public task_snaper_terminate_args() {
    }

    public task_snaper_terminate_args(
      int sourceType,
      long sourceId)
    {
      this();
      this.sourceType = sourceType;
      setSourceTypeIsSet(true);
      this.sourceId = sourceId;
      setSourceIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public task_snaper_terminate_args(task_snaper_terminate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.sourceType = other.sourceType;
      this.sourceId = other.sourceId;
    }

    public task_snaper_terminate_args deepCopy() {
      return new task_snaper_terminate_args(this);
    }

    @Override
    public void clear() {
      setSourceTypeIsSet(false);
      this.sourceType = 0;
      setSourceIdIsSet(false);
      this.sourceId = 0;
    }

    public int getSourceType() {
      return this.sourceType;
    }

    public task_snaper_terminate_args setSourceType(int sourceType) {
      this.sourceType = sourceType;
      setSourceTypeIsSet(true);
      return this;
    }

    public void unsetSourceType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCETYPE_ISSET_ID);
    }

    /** Returns true if field sourceType is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceType() {
      return EncodingUtils.testBit(__isset_bitfield, __SOURCETYPE_ISSET_ID);
    }

    public void setSourceTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCETYPE_ISSET_ID, value);
    }

    public long getSourceId() {
      return this.sourceId;
    }

    public task_snaper_terminate_args setSourceId(long sourceId) {
      this.sourceId = sourceId;
      setSourceIdIsSet(true);
      return this;
    }

    public void unsetSourceId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCEID_ISSET_ID);
    }

    /** Returns true if field sourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceId() {
      return EncodingUtils.testBit(__isset_bitfield, __SOURCEID_ISSET_ID);
    }

    public void setSourceIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SOURCE_TYPE:
        if (value == null) {
          unsetSourceType();
        } else {
          setSourceType((Integer)value);
        }
        break;

      case SOURCE_ID:
        if (value == null) {
          unsetSourceId();
        } else {
          setSourceId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SOURCE_TYPE:
        return Integer.valueOf(getSourceType());

      case SOURCE_ID:
        return Long.valueOf(getSourceId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SOURCE_TYPE:
        return isSetSourceType();
      case SOURCE_ID:
        return isSetSourceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof task_snaper_terminate_args)
        return this.equals((task_snaper_terminate_args)that);
      return false;
    }

    public boolean equals(task_snaper_terminate_args that) {
      if (that == null)
        return false;

      boolean this_present_sourceType = true;
      boolean that_present_sourceType = true;
      if (this_present_sourceType || that_present_sourceType) {
        if (!(this_present_sourceType && that_present_sourceType))
          return false;
        if (this.sourceType != that.sourceType)
          return false;
      }

      boolean this_present_sourceId = true;
      boolean that_present_sourceId = true;
      if (this_present_sourceId || that_present_sourceId) {
        if (!(this_present_sourceId && that_present_sourceId))
          return false;
        if (this.sourceId != that.sourceId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sourceType = true;
      list.add(present_sourceType);
      if (present_sourceType)
        list.add(sourceType);

      boolean present_sourceId = true;
      list.add(present_sourceId);
      if (present_sourceId)
        list.add(sourceId);

      return list.hashCode();
    }

    @Override
    public int compareTo(task_snaper_terminate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSourceType()).compareTo(other.isSetSourceType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceType, other.sourceType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSourceId()).compareTo(other.isSetSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceId, other.sourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("task_snaper_terminate_args(");
      boolean first = true;

      sb.append("sourceType:");
      sb.append(this.sourceType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sourceId:");
      sb.append(this.sourceId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class task_snaper_terminate_argsStandardSchemeFactory implements SchemeFactory {
      public task_snaper_terminate_argsStandardScheme getScheme() {
        return new task_snaper_terminate_argsStandardScheme();
      }
    }

    private static class task_snaper_terminate_argsStandardScheme extends StandardScheme<task_snaper_terminate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, task_snaper_terminate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SOURCE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sourceType = iprot.readI32();
                struct.setSourceTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.sourceId = iprot.readI64();
                struct.setSourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, task_snaper_terminate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SOURCE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.sourceType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SOURCE_ID_FIELD_DESC);
        oprot.writeI64(struct.sourceId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class task_snaper_terminate_argsTupleSchemeFactory implements SchemeFactory {
      public task_snaper_terminate_argsTupleScheme getScheme() {
        return new task_snaper_terminate_argsTupleScheme();
      }
    }

    private static class task_snaper_terminate_argsTupleScheme extends TupleScheme<task_snaper_terminate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, task_snaper_terminate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSourceType()) {
          optionals.set(0);
        }
        if (struct.isSetSourceId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSourceType()) {
          oprot.writeI32(struct.sourceType);
        }
        if (struct.isSetSourceId()) {
          oprot.writeI64(struct.sourceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, task_snaper_terminate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sourceType = iprot.readI32();
          struct.setSourceTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sourceId = iprot.readI64();
          struct.setSourceIdIsSet(true);
        }
      }
    }

  }

  public static class task_snaper_terminate_result implements org.apache.thrift.TBase<task_snaper_terminate_result, task_snaper_terminate_result._Fields>, java.io.Serializable, Cloneable, Comparable<task_snaper_terminate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("task_snaper_terminate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new task_snaper_terminate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new task_snaper_terminate_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(task_snaper_terminate_result.class, metaDataMap);
    }

    public task_snaper_terminate_result() {
    }

    public task_snaper_terminate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public task_snaper_terminate_result(task_snaper_terminate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public task_snaper_terminate_result deepCopy() {
      return new task_snaper_terminate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public task_snaper_terminate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof task_snaper_terminate_result)
        return this.equals((task_snaper_terminate_result)that);
      return false;
    }

    public boolean equals(task_snaper_terminate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(task_snaper_terminate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("task_snaper_terminate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class task_snaper_terminate_resultStandardSchemeFactory implements SchemeFactory {
      public task_snaper_terminate_resultStandardScheme getScheme() {
        return new task_snaper_terminate_resultStandardScheme();
      }
    }

    private static class task_snaper_terminate_resultStandardScheme extends StandardScheme<task_snaper_terminate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, task_snaper_terminate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, task_snaper_terminate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class task_snaper_terminate_resultTupleSchemeFactory implements SchemeFactory {
      public task_snaper_terminate_resultTupleScheme getScheme() {
        return new task_snaper_terminate_resultTupleScheme();
      }
    }

    private static class task_snaper_terminate_resultTupleScheme extends TupleScheme<task_snaper_terminate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, task_snaper_terminate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, task_snaper_terminate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class iface_engin_ioctrl_args implements org.apache.thrift.TBase<iface_engin_ioctrl_args, iface_engin_ioctrl_args._Fields>, java.io.Serializable, Cloneable, Comparable<iface_engin_ioctrl_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("iface_engin_ioctrl_args");

    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PARA0_FIELD_DESC = new org.apache.thrift.protocol.TField("para0", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField PARA1_FIELD_DESC = new org.apache.thrift.protocol.TField("para1", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField PARA2_FIELD_DESC = new org.apache.thrift.protocol.TField("para2", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField PARA3_FIELD_DESC = new org.apache.thrift.protocol.TField("para3", org.apache.thrift.protocol.TType.I64, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new iface_engin_ioctrl_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new iface_engin_ioctrl_argsTupleSchemeFactory());
    }

    public int type; // required
    public long para0; // required
    public long para1; // required
    public long para2; // required
    public long para3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TYPE((short)1, "type"),
      PARA0((short)2, "para0"),
      PARA1((short)3, "para1"),
      PARA2((short)4, "para2"),
      PARA3((short)5, "para3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE
            return TYPE;
          case 2: // PARA0
            return PARA0;
          case 3: // PARA1
            return PARA1;
          case 4: // PARA2
            return PARA2;
          case 5: // PARA3
            return PARA3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private static final int __PARA0_ISSET_ID = 1;
    private static final int __PARA1_ISSET_ID = 2;
    private static final int __PARA2_ISSET_ID = 3;
    private static final int __PARA3_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARA0, new org.apache.thrift.meta_data.FieldMetaData("para0", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PARA1, new org.apache.thrift.meta_data.FieldMetaData("para1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PARA2, new org.apache.thrift.meta_data.FieldMetaData("para2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PARA3, new org.apache.thrift.meta_data.FieldMetaData("para3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(iface_engin_ioctrl_args.class, metaDataMap);
    }

    public iface_engin_ioctrl_args() {
      this.para0 = 0L;

      this.para1 = 0L;

      this.para2 = 0L;

      this.para3 = 0L;

    }

    public iface_engin_ioctrl_args(
      int type,
      long para0,
      long para1,
      long para2,
      long para3)
    {
      this();
      this.type = type;
      setTypeIsSet(true);
      this.para0 = para0;
      setPara0IsSet(true);
      this.para1 = para1;
      setPara1IsSet(true);
      this.para2 = para2;
      setPara2IsSet(true);
      this.para3 = para3;
      setPara3IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public iface_engin_ioctrl_args(iface_engin_ioctrl_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.type = other.type;
      this.para0 = other.para0;
      this.para1 = other.para1;
      this.para2 = other.para2;
      this.para3 = other.para3;
    }

    public iface_engin_ioctrl_args deepCopy() {
      return new iface_engin_ioctrl_args(this);
    }

    @Override
    public void clear() {
      setTypeIsSet(false);
      this.type = 0;
      this.para0 = 0L;

      this.para1 = 0L;

      this.para2 = 0L;

      this.para3 = 0L;

    }

    public int getType() {
      return this.type;
    }

    public iface_engin_ioctrl_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public long getPara0() {
      return this.para0;
    }

    public iface_engin_ioctrl_args setPara0(long para0) {
      this.para0 = para0;
      setPara0IsSet(true);
      return this;
    }

    public void unsetPara0() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARA0_ISSET_ID);
    }

    /** Returns true if field para0 is set (has been assigned a value) and false otherwise */
    public boolean isSetPara0() {
      return EncodingUtils.testBit(__isset_bitfield, __PARA0_ISSET_ID);
    }

    public void setPara0IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARA0_ISSET_ID, value);
    }

    public long getPara1() {
      return this.para1;
    }

    public iface_engin_ioctrl_args setPara1(long para1) {
      this.para1 = para1;
      setPara1IsSet(true);
      return this;
    }

    public void unsetPara1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARA1_ISSET_ID);
    }

    /** Returns true if field para1 is set (has been assigned a value) and false otherwise */
    public boolean isSetPara1() {
      return EncodingUtils.testBit(__isset_bitfield, __PARA1_ISSET_ID);
    }

    public void setPara1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARA1_ISSET_ID, value);
    }

    public long getPara2() {
      return this.para2;
    }

    public iface_engin_ioctrl_args setPara2(long para2) {
      this.para2 = para2;
      setPara2IsSet(true);
      return this;
    }

    public void unsetPara2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARA2_ISSET_ID);
    }

    /** Returns true if field para2 is set (has been assigned a value) and false otherwise */
    public boolean isSetPara2() {
      return EncodingUtils.testBit(__isset_bitfield, __PARA2_ISSET_ID);
    }

    public void setPara2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARA2_ISSET_ID, value);
    }

    public long getPara3() {
      return this.para3;
    }

    public iface_engin_ioctrl_args setPara3(long para3) {
      this.para3 = para3;
      setPara3IsSet(true);
      return this;
    }

    public void unsetPara3() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARA3_ISSET_ID);
    }

    /** Returns true if field para3 is set (has been assigned a value) and false otherwise */
    public boolean isSetPara3() {
      return EncodingUtils.testBit(__isset_bitfield, __PARA3_ISSET_ID);
    }

    public void setPara3IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARA3_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case PARA0:
        if (value == null) {
          unsetPara0();
        } else {
          setPara0((Long)value);
        }
        break;

      case PARA1:
        if (value == null) {
          unsetPara1();
        } else {
          setPara1((Long)value);
        }
        break;

      case PARA2:
        if (value == null) {
          unsetPara2();
        } else {
          setPara2((Long)value);
        }
        break;

      case PARA3:
        if (value == null) {
          unsetPara3();
        } else {
          setPara3((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE:
        return Integer.valueOf(getType());

      case PARA0:
        return Long.valueOf(getPara0());

      case PARA1:
        return Long.valueOf(getPara1());

      case PARA2:
        return Long.valueOf(getPara2());

      case PARA3:
        return Long.valueOf(getPara3());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TYPE:
        return isSetType();
      case PARA0:
        return isSetPara0();
      case PARA1:
        return isSetPara1();
      case PARA2:
        return isSetPara2();
      case PARA3:
        return isSetPara3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof iface_engin_ioctrl_args)
        return this.equals((iface_engin_ioctrl_args)that);
      return false;
    }

    public boolean equals(iface_engin_ioctrl_args that) {
      if (that == null)
        return false;

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_para0 = true;
      boolean that_present_para0 = true;
      if (this_present_para0 || that_present_para0) {
        if (!(this_present_para0 && that_present_para0))
          return false;
        if (this.para0 != that.para0)
          return false;
      }

      boolean this_present_para1 = true;
      boolean that_present_para1 = true;
      if (this_present_para1 || that_present_para1) {
        if (!(this_present_para1 && that_present_para1))
          return false;
        if (this.para1 != that.para1)
          return false;
      }

      boolean this_present_para2 = true;
      boolean that_present_para2 = true;
      if (this_present_para2 || that_present_para2) {
        if (!(this_present_para2 && that_present_para2))
          return false;
        if (this.para2 != that.para2)
          return false;
      }

      boolean this_present_para3 = true;
      boolean that_present_para3 = true;
      if (this_present_para3 || that_present_para3) {
        if (!(this_present_para3 && that_present_para3))
          return false;
        if (this.para3 != that.para3)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_para0 = true;
      list.add(present_para0);
      if (present_para0)
        list.add(para0);

      boolean present_para1 = true;
      list.add(present_para1);
      if (present_para1)
        list.add(para1);

      boolean present_para2 = true;
      list.add(present_para2);
      if (present_para2)
        list.add(para2);

      boolean present_para3 = true;
      list.add(present_para3);
      if (present_para3)
        list.add(para3);

      return list.hashCode();
    }

    @Override
    public int compareTo(iface_engin_ioctrl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPara0()).compareTo(other.isSetPara0());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPara0()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.para0, other.para0);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPara1()).compareTo(other.isSetPara1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPara1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.para1, other.para1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPara2()).compareTo(other.isSetPara2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPara2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.para2, other.para2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPara3()).compareTo(other.isSetPara3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPara3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.para3, other.para3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("iface_engin_ioctrl_args(");
      boolean first = true;

      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("para0:");
      sb.append(this.para0);
      first = false;
      if (!first) sb.append(", ");
      sb.append("para1:");
      sb.append(this.para1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("para2:");
      sb.append(this.para2);
      first = false;
      if (!first) sb.append(", ");
      sb.append("para3:");
      sb.append(this.para3);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class iface_engin_ioctrl_argsStandardSchemeFactory implements SchemeFactory {
      public iface_engin_ioctrl_argsStandardScheme getScheme() {
        return new iface_engin_ioctrl_argsStandardScheme();
      }
    }

    private static class iface_engin_ioctrl_argsStandardScheme extends StandardScheme<iface_engin_ioctrl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, iface_engin_ioctrl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARA0
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.para0 = iprot.readI64();
                struct.setPara0IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARA1
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.para1 = iprot.readI64();
                struct.setPara1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARA2
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.para2 = iprot.readI64();
                struct.setPara2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PARA3
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.para3 = iprot.readI64();
                struct.setPara3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, iface_engin_ioctrl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARA0_FIELD_DESC);
        oprot.writeI64(struct.para0);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARA1_FIELD_DESC);
        oprot.writeI64(struct.para1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARA2_FIELD_DESC);
        oprot.writeI64(struct.para2);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARA3_FIELD_DESC);
        oprot.writeI64(struct.para3);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class iface_engin_ioctrl_argsTupleSchemeFactory implements SchemeFactory {
      public iface_engin_ioctrl_argsTupleScheme getScheme() {
        return new iface_engin_ioctrl_argsTupleScheme();
      }
    }

    private static class iface_engin_ioctrl_argsTupleScheme extends TupleScheme<iface_engin_ioctrl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, iface_engin_ioctrl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetType()) {
          optionals.set(0);
        }
        if (struct.isSetPara0()) {
          optionals.set(1);
        }
        if (struct.isSetPara1()) {
          optionals.set(2);
        }
        if (struct.isSetPara2()) {
          optionals.set(3);
        }
        if (struct.isSetPara3()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetPara0()) {
          oprot.writeI64(struct.para0);
        }
        if (struct.isSetPara1()) {
          oprot.writeI64(struct.para1);
        }
        if (struct.isSetPara2()) {
          oprot.writeI64(struct.para2);
        }
        if (struct.isSetPara3()) {
          oprot.writeI64(struct.para3);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, iface_engin_ioctrl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.para0 = iprot.readI64();
          struct.setPara0IsSet(true);
        }
        if (incoming.get(2)) {
          struct.para1 = iprot.readI64();
          struct.setPara1IsSet(true);
        }
        if (incoming.get(3)) {
          struct.para2 = iprot.readI64();
          struct.setPara2IsSet(true);
        }
        if (incoming.get(4)) {
          struct.para3 = iprot.readI64();
          struct.setPara3IsSet(true);
        }
      }
    }

  }

  public static class iface_engin_ioctrl_result implements org.apache.thrift.TBase<iface_engin_ioctrl_result, iface_engin_ioctrl_result._Fields>, java.io.Serializable, Cloneable, Comparable<iface_engin_ioctrl_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("iface_engin_ioctrl_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new iface_engin_ioctrl_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new iface_engin_ioctrl_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(iface_engin_ioctrl_result.class, metaDataMap);
    }

    public iface_engin_ioctrl_result() {
    }

    public iface_engin_ioctrl_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public iface_engin_ioctrl_result(iface_engin_ioctrl_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public iface_engin_ioctrl_result deepCopy() {
      return new iface_engin_ioctrl_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public iface_engin_ioctrl_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof iface_engin_ioctrl_result)
        return this.equals((iface_engin_ioctrl_result)that);
      return false;
    }

    public boolean equals(iface_engin_ioctrl_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(iface_engin_ioctrl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("iface_engin_ioctrl_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class iface_engin_ioctrl_resultStandardSchemeFactory implements SchemeFactory {
      public iface_engin_ioctrl_resultStandardScheme getScheme() {
        return new iface_engin_ioctrl_resultStandardScheme();
      }
    }

    private static class iface_engin_ioctrl_resultStandardScheme extends StandardScheme<iface_engin_ioctrl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, iface_engin_ioctrl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, iface_engin_ioctrl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class iface_engin_ioctrl_resultTupleSchemeFactory implements SchemeFactory {
      public iface_engin_ioctrl_resultTupleScheme getScheme() {
        return new iface_engin_ioctrl_resultTupleScheme();
      }
    }

    private static class iface_engin_ioctrl_resultTupleScheme extends TupleScheme<iface_engin_ioctrl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, iface_engin_ioctrl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, iface_engin_ioctrl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class multi_face_verify_url_args implements org.apache.thrift.TBase<multi_face_verify_url_args, multi_face_verify_url_args._Fields>, java.io.Serializable, Cloneable, Comparable<multi_face_verify_url_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multi_face_verify_url_args");

    private static final org.apache.thrift.protocol.TField LIST_PATHS_FIELD_DESC = new org.apache.thrift.protocol.TField("listPaths", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multi_face_verify_url_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multi_face_verify_url_argsTupleSchemeFactory());
    }

    public List<String> listPaths; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_PATHS((short)1, "listPaths");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_PATHS
            return LIST_PATHS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_PATHS, new org.apache.thrift.meta_data.FieldMetaData("listPaths", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multi_face_verify_url_args.class, metaDataMap);
    }

    public multi_face_verify_url_args() {
    }

    public multi_face_verify_url_args(
      List<String> listPaths)
    {
      this();
      this.listPaths = listPaths;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multi_face_verify_url_args(multi_face_verify_url_args other) {
      if (other.isSetListPaths()) {
        List<String> __this__listPaths = new ArrayList<String>(other.listPaths);
        this.listPaths = __this__listPaths;
      }
    }

    public multi_face_verify_url_args deepCopy() {
      return new multi_face_verify_url_args(this);
    }

    @Override
    public void clear() {
      this.listPaths = null;
    }

    public int getListPathsSize() {
      return (this.listPaths == null) ? 0 : this.listPaths.size();
    }

    public java.util.Iterator<String> getListPathsIterator() {
      return (this.listPaths == null) ? null : this.listPaths.iterator();
    }

    public void addToListPaths(String elem) {
      if (this.listPaths == null) {
        this.listPaths = new ArrayList<String>();
      }
      this.listPaths.add(elem);
    }

    public List<String> getListPaths() {
      return this.listPaths;
    }

    public multi_face_verify_url_args setListPaths(List<String> listPaths) {
      this.listPaths = listPaths;
      return this;
    }

    public void unsetListPaths() {
      this.listPaths = null;
    }

    /** Returns true if field listPaths is set (has been assigned a value) and false otherwise */
    public boolean isSetListPaths() {
      return this.listPaths != null;
    }

    public void setListPathsIsSet(boolean value) {
      if (!value) {
        this.listPaths = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_PATHS:
        if (value == null) {
          unsetListPaths();
        } else {
          setListPaths((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_PATHS:
        return getListPaths();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_PATHS:
        return isSetListPaths();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multi_face_verify_url_args)
        return this.equals((multi_face_verify_url_args)that);
      return false;
    }

    public boolean equals(multi_face_verify_url_args that) {
      if (that == null)
        return false;

      boolean this_present_listPaths = true && this.isSetListPaths();
      boolean that_present_listPaths = true && that.isSetListPaths();
      if (this_present_listPaths || that_present_listPaths) {
        if (!(this_present_listPaths && that_present_listPaths))
          return false;
        if (!this.listPaths.equals(that.listPaths))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_listPaths = true && (isSetListPaths());
      list.add(present_listPaths);
      if (present_listPaths)
        list.add(listPaths);

      return list.hashCode();
    }

    @Override
    public int compareTo(multi_face_verify_url_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetListPaths()).compareTo(other.isSetListPaths());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListPaths()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listPaths, other.listPaths);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multi_face_verify_url_args(");
      boolean first = true;

      sb.append("listPaths:");
      if (this.listPaths == null) {
        sb.append("null");
      } else {
        sb.append(this.listPaths);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multi_face_verify_url_argsStandardSchemeFactory implements SchemeFactory {
      public multi_face_verify_url_argsStandardScheme getScheme() {
        return new multi_face_verify_url_argsStandardScheme();
      }
    }

    private static class multi_face_verify_url_argsStandardScheme extends StandardScheme<multi_face_verify_url_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multi_face_verify_url_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_PATHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.listPaths = new ArrayList<String>(_list40.size);
                  String _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = iprot.readString();
                    struct.listPaths.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setListPathsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multi_face_verify_url_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listPaths != null) {
          oprot.writeFieldBegin(LIST_PATHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.listPaths.size()));
            for (String _iter43 : struct.listPaths)
            {
              oprot.writeString(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multi_face_verify_url_argsTupleSchemeFactory implements SchemeFactory {
      public multi_face_verify_url_argsTupleScheme getScheme() {
        return new multi_face_verify_url_argsTupleScheme();
      }
    }

    private static class multi_face_verify_url_argsTupleScheme extends TupleScheme<multi_face_verify_url_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multi_face_verify_url_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListPaths()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetListPaths()) {
          {
            oprot.writeI32(struct.listPaths.size());
            for (String _iter44 : struct.listPaths)
            {
              oprot.writeString(_iter44);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multi_face_verify_url_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.listPaths = new ArrayList<String>(_list45.size);
            String _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = iprot.readString();
              struct.listPaths.add(_elem46);
            }
          }
          struct.setListPathsIsSet(true);
        }
      }
    }

  }

  public static class multi_face_verify_url_result implements org.apache.thrift.TBase<multi_face_verify_url_result, multi_face_verify_url_result._Fields>, java.io.Serializable, Cloneable, Comparable<multi_face_verify_url_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multi_face_verify_url_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multi_face_verify_url_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multi_face_verify_url_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multi_face_verify_url_result.class, metaDataMap);
    }

    public multi_face_verify_url_result() {
    }

    public multi_face_verify_url_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multi_face_verify_url_result(multi_face_verify_url_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public multi_face_verify_url_result deepCopy() {
      return new multi_face_verify_url_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public multi_face_verify_url_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multi_face_verify_url_result)
        return this.equals((multi_face_verify_url_result)that);
      return false;
    }

    public boolean equals(multi_face_verify_url_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(multi_face_verify_url_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multi_face_verify_url_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multi_face_verify_url_resultStandardSchemeFactory implements SchemeFactory {
      public multi_face_verify_url_resultStandardScheme getScheme() {
        return new multi_face_verify_url_resultStandardScheme();
      }
    }

    private static class multi_face_verify_url_resultStandardScheme extends StandardScheme<multi_face_verify_url_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multi_face_verify_url_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multi_face_verify_url_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multi_face_verify_url_resultTupleSchemeFactory implements SchemeFactory {
      public multi_face_verify_url_resultTupleScheme getScheme() {
        return new multi_face_verify_url_resultTupleScheme();
      }
    }

    private static class multi_face_verify_url_resultTupleScheme extends TupleScheme<multi_face_verify_url_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multi_face_verify_url_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multi_face_verify_url_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class multi_face_verify_bin_args implements org.apache.thrift.TBase<multi_face_verify_bin_args, multi_face_verify_bin_args._Fields>, java.io.Serializable, Cloneable, Comparable<multi_face_verify_bin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multi_face_verify_bin_args");

    private static final org.apache.thrift.protocol.TField LIST_IMG_DAT_FIELD_DESC = new org.apache.thrift.protocol.TField("listImgDat", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multi_face_verify_bin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multi_face_verify_bin_argsTupleSchemeFactory());
    }

    public List<ByteBuffer> listImgDat; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_IMG_DAT((short)1, "listImgDat");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_IMG_DAT
            return LIST_IMG_DAT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_IMG_DAT, new org.apache.thrift.meta_data.FieldMetaData("listImgDat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multi_face_verify_bin_args.class, metaDataMap);
    }

    public multi_face_verify_bin_args() {
    }

    public multi_face_verify_bin_args(
      List<ByteBuffer> listImgDat)
    {
      this();
      this.listImgDat = listImgDat;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multi_face_verify_bin_args(multi_face_verify_bin_args other) {
      if (other.isSetListImgDat()) {
        List<ByteBuffer> __this__listImgDat = new ArrayList<ByteBuffer>(other.listImgDat);
        this.listImgDat = __this__listImgDat;
      }
    }

    public multi_face_verify_bin_args deepCopy() {
      return new multi_face_verify_bin_args(this);
    }

    @Override
    public void clear() {
      this.listImgDat = null;
    }

    public int getListImgDatSize() {
      return (this.listImgDat == null) ? 0 : this.listImgDat.size();
    }

    public java.util.Iterator<ByteBuffer> getListImgDatIterator() {
      return (this.listImgDat == null) ? null : this.listImgDat.iterator();
    }

    public void addToListImgDat(ByteBuffer elem) {
      if (this.listImgDat == null) {
        this.listImgDat = new ArrayList<ByteBuffer>();
      }
      this.listImgDat.add(elem);
    }

    public List<ByteBuffer> getListImgDat() {
      return this.listImgDat;
    }

    public multi_face_verify_bin_args setListImgDat(List<ByteBuffer> listImgDat) {
      this.listImgDat = listImgDat;
      return this;
    }

    public void unsetListImgDat() {
      this.listImgDat = null;
    }

    /** Returns true if field listImgDat is set (has been assigned a value) and false otherwise */
    public boolean isSetListImgDat() {
      return this.listImgDat != null;
    }

    public void setListImgDatIsSet(boolean value) {
      if (!value) {
        this.listImgDat = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_IMG_DAT:
        if (value == null) {
          unsetListImgDat();
        } else {
          setListImgDat((List<ByteBuffer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_IMG_DAT:
        return getListImgDat();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_IMG_DAT:
        return isSetListImgDat();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multi_face_verify_bin_args)
        return this.equals((multi_face_verify_bin_args)that);
      return false;
    }

    public boolean equals(multi_face_verify_bin_args that) {
      if (that == null)
        return false;

      boolean this_present_listImgDat = true && this.isSetListImgDat();
      boolean that_present_listImgDat = true && that.isSetListImgDat();
      if (this_present_listImgDat || that_present_listImgDat) {
        if (!(this_present_listImgDat && that_present_listImgDat))
          return false;
        if (!this.listImgDat.equals(that.listImgDat))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_listImgDat = true && (isSetListImgDat());
      list.add(present_listImgDat);
      if (present_listImgDat)
        list.add(listImgDat);

      return list.hashCode();
    }

    @Override
    public int compareTo(multi_face_verify_bin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetListImgDat()).compareTo(other.isSetListImgDat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListImgDat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listImgDat, other.listImgDat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multi_face_verify_bin_args(");
      boolean first = true;

      sb.append("listImgDat:");
      if (this.listImgDat == null) {
        sb.append("null");
      } else {
        sb.append(this.listImgDat);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multi_face_verify_bin_argsStandardSchemeFactory implements SchemeFactory {
      public multi_face_verify_bin_argsStandardScheme getScheme() {
        return new multi_face_verify_bin_argsStandardScheme();
      }
    }

    private static class multi_face_verify_bin_argsStandardScheme extends StandardScheme<multi_face_verify_bin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multi_face_verify_bin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_IMG_DAT
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.listImgDat = new ArrayList<ByteBuffer>(_list48.size);
                  ByteBuffer _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = iprot.readBinary();
                    struct.listImgDat.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setListImgDatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multi_face_verify_bin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listImgDat != null) {
          oprot.writeFieldBegin(LIST_IMG_DAT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.listImgDat.size()));
            for (ByteBuffer _iter51 : struct.listImgDat)
            {
              oprot.writeBinary(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multi_face_verify_bin_argsTupleSchemeFactory implements SchemeFactory {
      public multi_face_verify_bin_argsTupleScheme getScheme() {
        return new multi_face_verify_bin_argsTupleScheme();
      }
    }

    private static class multi_face_verify_bin_argsTupleScheme extends TupleScheme<multi_face_verify_bin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multi_face_verify_bin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListImgDat()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetListImgDat()) {
          {
            oprot.writeI32(struct.listImgDat.size());
            for (ByteBuffer _iter52 : struct.listImgDat)
            {
              oprot.writeBinary(_iter52);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multi_face_verify_bin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.listImgDat = new ArrayList<ByteBuffer>(_list53.size);
            ByteBuffer _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = iprot.readBinary();
              struct.listImgDat.add(_elem54);
            }
          }
          struct.setListImgDatIsSet(true);
        }
      }
    }

  }

  public static class multi_face_verify_bin_result implements org.apache.thrift.TBase<multi_face_verify_bin_result, multi_face_verify_bin_result._Fields>, java.io.Serializable, Cloneable, Comparable<multi_face_verify_bin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multi_face_verify_bin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multi_face_verify_bin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multi_face_verify_bin_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multi_face_verify_bin_result.class, metaDataMap);
    }

    public multi_face_verify_bin_result() {
    }

    public multi_face_verify_bin_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multi_face_verify_bin_result(multi_face_verify_bin_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public multi_face_verify_bin_result deepCopy() {
      return new multi_face_verify_bin_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public multi_face_verify_bin_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multi_face_verify_bin_result)
        return this.equals((multi_face_verify_bin_result)that);
      return false;
    }

    public boolean equals(multi_face_verify_bin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(multi_face_verify_bin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multi_face_verify_bin_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multi_face_verify_bin_resultStandardSchemeFactory implements SchemeFactory {
      public multi_face_verify_bin_resultStandardScheme getScheme() {
        return new multi_face_verify_bin_resultStandardScheme();
      }
    }

    private static class multi_face_verify_bin_resultStandardScheme extends StandardScheme<multi_face_verify_bin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multi_face_verify_bin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multi_face_verify_bin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multi_face_verify_bin_resultTupleSchemeFactory implements SchemeFactory {
      public multi_face_verify_bin_resultTupleScheme getScheme() {
        return new multi_face_verify_bin_resultTupleScheme();
      }
    }

    private static class multi_face_verify_bin_resultTupleScheme extends TupleScheme<multi_face_verify_bin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multi_face_verify_bin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multi_face_verify_bin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class multi_face_compare_bin_args implements org.apache.thrift.TBase<multi_face_compare_bin_args, multi_face_compare_bin_args._Fields>, java.io.Serializable, Cloneable, Comparable<multi_face_compare_bin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multi_face_compare_bin_args");

    private static final org.apache.thrift.protocol.TField IMGDATA1_FIELD_DESC = new org.apache.thrift.protocol.TField("imgdata1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IMGDATA2_FIELD_DESC = new org.apache.thrift.protocol.TField("imgdata2", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multi_face_compare_bin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multi_face_compare_bin_argsTupleSchemeFactory());
    }

    public ByteBuffer imgdata1; // required
    public ByteBuffer imgdata2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IMGDATA1((short)1, "imgdata1"),
      IMGDATA2((short)2, "imgdata2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IMGDATA1
            return IMGDATA1;
          case 2: // IMGDATA2
            return IMGDATA2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IMGDATA1, new org.apache.thrift.meta_data.FieldMetaData("imgdata1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.IMGDATA2, new org.apache.thrift.meta_data.FieldMetaData("imgdata2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multi_face_compare_bin_args.class, metaDataMap);
    }

    public multi_face_compare_bin_args() {
    }

    public multi_face_compare_bin_args(
      ByteBuffer imgdata1,
      ByteBuffer imgdata2)
    {
      this();
      this.imgdata1 = org.apache.thrift.TBaseHelper.copyBinary(imgdata1);
      this.imgdata2 = org.apache.thrift.TBaseHelper.copyBinary(imgdata2);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multi_face_compare_bin_args(multi_face_compare_bin_args other) {
      if (other.isSetImgdata1()) {
        this.imgdata1 = org.apache.thrift.TBaseHelper.copyBinary(other.imgdata1);
      }
      if (other.isSetImgdata2()) {
        this.imgdata2 = org.apache.thrift.TBaseHelper.copyBinary(other.imgdata2);
      }
    }

    public multi_face_compare_bin_args deepCopy() {
      return new multi_face_compare_bin_args(this);
    }

    @Override
    public void clear() {
      this.imgdata1 = null;
      this.imgdata2 = null;
    }

    public byte[] getImgdata1() {
      setImgdata1(org.apache.thrift.TBaseHelper.rightSize(imgdata1));
      return imgdata1 == null ? null : imgdata1.array();
    }

    public ByteBuffer bufferForImgdata1() {
      return org.apache.thrift.TBaseHelper.copyBinary(imgdata1);
    }

    public multi_face_compare_bin_args setImgdata1(byte[] imgdata1) {
      this.imgdata1 = imgdata1 == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(imgdata1, imgdata1.length));
      return this;
    }

    public multi_face_compare_bin_args setImgdata1(ByteBuffer imgdata1) {
      this.imgdata1 = org.apache.thrift.TBaseHelper.copyBinary(imgdata1);
      return this;
    }

    public void unsetImgdata1() {
      this.imgdata1 = null;
    }

    /** Returns true if field imgdata1 is set (has been assigned a value) and false otherwise */
    public boolean isSetImgdata1() {
      return this.imgdata1 != null;
    }

    public void setImgdata1IsSet(boolean value) {
      if (!value) {
        this.imgdata1 = null;
      }
    }

    public byte[] getImgdata2() {
      setImgdata2(org.apache.thrift.TBaseHelper.rightSize(imgdata2));
      return imgdata2 == null ? null : imgdata2.array();
    }

    public ByteBuffer bufferForImgdata2() {
      return org.apache.thrift.TBaseHelper.copyBinary(imgdata2);
    }

    public multi_face_compare_bin_args setImgdata2(byte[] imgdata2) {
      this.imgdata2 = imgdata2 == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(imgdata2, imgdata2.length));
      return this;
    }

    public multi_face_compare_bin_args setImgdata2(ByteBuffer imgdata2) {
      this.imgdata2 = org.apache.thrift.TBaseHelper.copyBinary(imgdata2);
      return this;
    }

    public void unsetImgdata2() {
      this.imgdata2 = null;
    }

    /** Returns true if field imgdata2 is set (has been assigned a value) and false otherwise */
    public boolean isSetImgdata2() {
      return this.imgdata2 != null;
    }

    public void setImgdata2IsSet(boolean value) {
      if (!value) {
        this.imgdata2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IMGDATA1:
        if (value == null) {
          unsetImgdata1();
        } else {
          setImgdata1((ByteBuffer)value);
        }
        break;

      case IMGDATA2:
        if (value == null) {
          unsetImgdata2();
        } else {
          setImgdata2((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IMGDATA1:
        return getImgdata1();

      case IMGDATA2:
        return getImgdata2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IMGDATA1:
        return isSetImgdata1();
      case IMGDATA2:
        return isSetImgdata2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multi_face_compare_bin_args)
        return this.equals((multi_face_compare_bin_args)that);
      return false;
    }

    public boolean equals(multi_face_compare_bin_args that) {
      if (that == null)
        return false;

      boolean this_present_imgdata1 = true && this.isSetImgdata1();
      boolean that_present_imgdata1 = true && that.isSetImgdata1();
      if (this_present_imgdata1 || that_present_imgdata1) {
        if (!(this_present_imgdata1 && that_present_imgdata1))
          return false;
        if (!this.imgdata1.equals(that.imgdata1))
          return false;
      }

      boolean this_present_imgdata2 = true && this.isSetImgdata2();
      boolean that_present_imgdata2 = true && that.isSetImgdata2();
      if (this_present_imgdata2 || that_present_imgdata2) {
        if (!(this_present_imgdata2 && that_present_imgdata2))
          return false;
        if (!this.imgdata2.equals(that.imgdata2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_imgdata1 = true && (isSetImgdata1());
      list.add(present_imgdata1);
      if (present_imgdata1)
        list.add(imgdata1);

      boolean present_imgdata2 = true && (isSetImgdata2());
      list.add(present_imgdata2);
      if (present_imgdata2)
        list.add(imgdata2);

      return list.hashCode();
    }

    @Override
    public int compareTo(multi_face_compare_bin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetImgdata1()).compareTo(other.isSetImgdata1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImgdata1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgdata1, other.imgdata1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetImgdata2()).compareTo(other.isSetImgdata2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImgdata2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgdata2, other.imgdata2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multi_face_compare_bin_args(");
      boolean first = true;

      sb.append("imgdata1:");
      if (this.imgdata1 == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.imgdata1, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("imgdata2:");
      if (this.imgdata2 == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.imgdata2, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multi_face_compare_bin_argsStandardSchemeFactory implements SchemeFactory {
      public multi_face_compare_bin_argsStandardScheme getScheme() {
        return new multi_face_compare_bin_argsStandardScheme();
      }
    }

    private static class multi_face_compare_bin_argsStandardScheme extends StandardScheme<multi_face_compare_bin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multi_face_compare_bin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IMGDATA1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.imgdata1 = iprot.readBinary();
                struct.setImgdata1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IMGDATA2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.imgdata2 = iprot.readBinary();
                struct.setImgdata2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multi_face_compare_bin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.imgdata1 != null) {
          oprot.writeFieldBegin(IMGDATA1_FIELD_DESC);
          oprot.writeBinary(struct.imgdata1);
          oprot.writeFieldEnd();
        }
        if (struct.imgdata2 != null) {
          oprot.writeFieldBegin(IMGDATA2_FIELD_DESC);
          oprot.writeBinary(struct.imgdata2);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multi_face_compare_bin_argsTupleSchemeFactory implements SchemeFactory {
      public multi_face_compare_bin_argsTupleScheme getScheme() {
        return new multi_face_compare_bin_argsTupleScheme();
      }
    }

    private static class multi_face_compare_bin_argsTupleScheme extends TupleScheme<multi_face_compare_bin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multi_face_compare_bin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetImgdata1()) {
          optionals.set(0);
        }
        if (struct.isSetImgdata2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetImgdata1()) {
          oprot.writeBinary(struct.imgdata1);
        }
        if (struct.isSetImgdata2()) {
          oprot.writeBinary(struct.imgdata2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multi_face_compare_bin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.imgdata1 = iprot.readBinary();
          struct.setImgdata1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.imgdata2 = iprot.readBinary();
          struct.setImgdata2IsSet(true);
        }
      }
    }

  }

  public static class multi_face_compare_bin_result implements org.apache.thrift.TBase<multi_face_compare_bin_result, multi_face_compare_bin_result._Fields>, java.io.Serializable, Cloneable, Comparable<multi_face_compare_bin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multi_face_compare_bin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multi_face_compare_bin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multi_face_compare_bin_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multi_face_compare_bin_result.class, metaDataMap);
    }

    public multi_face_compare_bin_result() {
    }

    public multi_face_compare_bin_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multi_face_compare_bin_result(multi_face_compare_bin_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public multi_face_compare_bin_result deepCopy() {
      return new multi_face_compare_bin_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public multi_face_compare_bin_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multi_face_compare_bin_result)
        return this.equals((multi_face_compare_bin_result)that);
      return false;
    }

    public boolean equals(multi_face_compare_bin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(multi_face_compare_bin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multi_face_compare_bin_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multi_face_compare_bin_resultStandardSchemeFactory implements SchemeFactory {
      public multi_face_compare_bin_resultStandardScheme getScheme() {
        return new multi_face_compare_bin_resultStandardScheme();
      }
    }

    private static class multi_face_compare_bin_resultStandardScheme extends StandardScheme<multi_face_compare_bin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multi_face_compare_bin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multi_face_compare_bin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multi_face_compare_bin_resultTupleSchemeFactory implements SchemeFactory {
      public multi_face_compare_bin_resultTupleScheme getScheme() {
        return new multi_face_compare_bin_resultTupleScheme();
      }
    }

    private static class multi_face_compare_bin_resultTupleScheme extends TupleScheme<multi_face_compare_bin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multi_face_compare_bin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multi_face_compare_bin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class multi_image_import_args implements org.apache.thrift.TBase<multi_image_import_args, multi_image_import_args._Fields>, java.io.Serializable, Cloneable, Comparable<multi_image_import_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multi_image_import_args");

    private static final org.apache.thrift.protocol.TField LIST_IMG_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("listImgInfo", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SRC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("srcType", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SRC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("srcId", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multi_image_import_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multi_image_import_argsTupleSchemeFactory());
    }

    public List<ByteBuffer> listImgInfo; // required
    public int type; // required
    public int srcType; // required
    public long srcId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_IMG_INFO((short)1, "listImgInfo"),
      TYPE((short)2, "type"),
      SRC_TYPE((short)3, "srcType"),
      SRC_ID((short)4, "srcId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_IMG_INFO
            return LIST_IMG_INFO;
          case 2: // TYPE
            return TYPE;
          case 3: // SRC_TYPE
            return SRC_TYPE;
          case 4: // SRC_ID
            return SRC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private static final int __SRCTYPE_ISSET_ID = 1;
    private static final int __SRCID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_IMG_INFO, new org.apache.thrift.meta_data.FieldMetaData("listImgInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SRC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("srcType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SRC_ID, new org.apache.thrift.meta_data.FieldMetaData("srcId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multi_image_import_args.class, metaDataMap);
    }

    public multi_image_import_args() {
    }

    public multi_image_import_args(
      List<ByteBuffer> listImgInfo,
      int type,
      int srcType,
      long srcId)
    {
      this();
      this.listImgInfo = listImgInfo;
      this.type = type;
      setTypeIsSet(true);
      this.srcType = srcType;
      setSrcTypeIsSet(true);
      this.srcId = srcId;
      setSrcIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multi_image_import_args(multi_image_import_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetListImgInfo()) {
        List<ByteBuffer> __this__listImgInfo = new ArrayList<ByteBuffer>(other.listImgInfo);
        this.listImgInfo = __this__listImgInfo;
      }
      this.type = other.type;
      this.srcType = other.srcType;
      this.srcId = other.srcId;
    }

    public multi_image_import_args deepCopy() {
      return new multi_image_import_args(this);
    }

    @Override
    public void clear() {
      this.listImgInfo = null;
      setTypeIsSet(false);
      this.type = 0;
      setSrcTypeIsSet(false);
      this.srcType = 0;
      setSrcIdIsSet(false);
      this.srcId = 0;
    }

    public int getListImgInfoSize() {
      return (this.listImgInfo == null) ? 0 : this.listImgInfo.size();
    }

    public java.util.Iterator<ByteBuffer> getListImgInfoIterator() {
      return (this.listImgInfo == null) ? null : this.listImgInfo.iterator();
    }

    public void addToListImgInfo(ByteBuffer elem) {
      if (this.listImgInfo == null) {
        this.listImgInfo = new ArrayList<ByteBuffer>();
      }
      this.listImgInfo.add(elem);
    }

    public List<ByteBuffer> getListImgInfo() {
      return this.listImgInfo;
    }

    public multi_image_import_args setListImgInfo(List<ByteBuffer> listImgInfo) {
      this.listImgInfo = listImgInfo;
      return this;
    }

    public void unsetListImgInfo() {
      this.listImgInfo = null;
    }

    /** Returns true if field listImgInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetListImgInfo() {
      return this.listImgInfo != null;
    }

    public void setListImgInfoIsSet(boolean value) {
      if (!value) {
        this.listImgInfo = null;
      }
    }

    public int getType() {
      return this.type;
    }

    public multi_image_import_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public int getSrcType() {
      return this.srcType;
    }

    public multi_image_import_args setSrcType(int srcType) {
      this.srcType = srcType;
      setSrcTypeIsSet(true);
      return this;
    }

    public void unsetSrcType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SRCTYPE_ISSET_ID);
    }

    /** Returns true if field srcType is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcType() {
      return EncodingUtils.testBit(__isset_bitfield, __SRCTYPE_ISSET_ID);
    }

    public void setSrcTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SRCTYPE_ISSET_ID, value);
    }

    public long getSrcId() {
      return this.srcId;
    }

    public multi_image_import_args setSrcId(long srcId) {
      this.srcId = srcId;
      setSrcIdIsSet(true);
      return this;
    }

    public void unsetSrcId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SRCID_ISSET_ID);
    }

    /** Returns true if field srcId is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcId() {
      return EncodingUtils.testBit(__isset_bitfield, __SRCID_ISSET_ID);
    }

    public void setSrcIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SRCID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_IMG_INFO:
        if (value == null) {
          unsetListImgInfo();
        } else {
          setListImgInfo((List<ByteBuffer>)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case SRC_TYPE:
        if (value == null) {
          unsetSrcType();
        } else {
          setSrcType((Integer)value);
        }
        break;

      case SRC_ID:
        if (value == null) {
          unsetSrcId();
        } else {
          setSrcId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_IMG_INFO:
        return getListImgInfo();

      case TYPE:
        return Integer.valueOf(getType());

      case SRC_TYPE:
        return Integer.valueOf(getSrcType());

      case SRC_ID:
        return Long.valueOf(getSrcId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_IMG_INFO:
        return isSetListImgInfo();
      case TYPE:
        return isSetType();
      case SRC_TYPE:
        return isSetSrcType();
      case SRC_ID:
        return isSetSrcId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multi_image_import_args)
        return this.equals((multi_image_import_args)that);
      return false;
    }

    public boolean equals(multi_image_import_args that) {
      if (that == null)
        return false;

      boolean this_present_listImgInfo = true && this.isSetListImgInfo();
      boolean that_present_listImgInfo = true && that.isSetListImgInfo();
      if (this_present_listImgInfo || that_present_listImgInfo) {
        if (!(this_present_listImgInfo && that_present_listImgInfo))
          return false;
        if (!this.listImgInfo.equals(that.listImgInfo))
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_srcType = true;
      boolean that_present_srcType = true;
      if (this_present_srcType || that_present_srcType) {
        if (!(this_present_srcType && that_present_srcType))
          return false;
        if (this.srcType != that.srcType)
          return false;
      }

      boolean this_present_srcId = true;
      boolean that_present_srcId = true;
      if (this_present_srcId || that_present_srcId) {
        if (!(this_present_srcId && that_present_srcId))
          return false;
        if (this.srcId != that.srcId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_listImgInfo = true && (isSetListImgInfo());
      list.add(present_listImgInfo);
      if (present_listImgInfo)
        list.add(listImgInfo);

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_srcType = true;
      list.add(present_srcType);
      if (present_srcType)
        list.add(srcType);

      boolean present_srcId = true;
      list.add(present_srcId);
      if (present_srcId)
        list.add(srcId);

      return list.hashCode();
    }

    @Override
    public int compareTo(multi_image_import_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetListImgInfo()).compareTo(other.isSetListImgInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListImgInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listImgInfo, other.listImgInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrcType()).compareTo(other.isSetSrcType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcType, other.srcType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrcId()).compareTo(other.isSetSrcId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcId, other.srcId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multi_image_import_args(");
      boolean first = true;

      sb.append("listImgInfo:");
      if (this.listImgInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.listImgInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("srcType:");
      sb.append(this.srcType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("srcId:");
      sb.append(this.srcId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multi_image_import_argsStandardSchemeFactory implements SchemeFactory {
      public multi_image_import_argsStandardScheme getScheme() {
        return new multi_image_import_argsStandardScheme();
      }
    }

    private static class multi_image_import_argsStandardScheme extends StandardScheme<multi_image_import_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multi_image_import_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_IMG_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.listImgInfo = new ArrayList<ByteBuffer>(_list56.size);
                  ByteBuffer _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = iprot.readBinary();
                    struct.listImgInfo.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setListImgInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SRC_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.srcType = iprot.readI32();
                struct.setSrcTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SRC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.srcId = iprot.readI64();
                struct.setSrcIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multi_image_import_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listImgInfo != null) {
          oprot.writeFieldBegin(LIST_IMG_INFO_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.listImgInfo.size()));
            for (ByteBuffer _iter59 : struct.listImgInfo)
            {
              oprot.writeBinary(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SRC_TYPE_FIELD_DESC);
        oprot.writeI32(struct.srcType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SRC_ID_FIELD_DESC);
        oprot.writeI64(struct.srcId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multi_image_import_argsTupleSchemeFactory implements SchemeFactory {
      public multi_image_import_argsTupleScheme getScheme() {
        return new multi_image_import_argsTupleScheme();
      }
    }

    private static class multi_image_import_argsTupleScheme extends TupleScheme<multi_image_import_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multi_image_import_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListImgInfo()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        if (struct.isSetSrcType()) {
          optionals.set(2);
        }
        if (struct.isSetSrcId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetListImgInfo()) {
          {
            oprot.writeI32(struct.listImgInfo.size());
            for (ByteBuffer _iter60 : struct.listImgInfo)
            {
              oprot.writeBinary(_iter60);
            }
          }
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetSrcType()) {
          oprot.writeI32(struct.srcType);
        }
        if (struct.isSetSrcId()) {
          oprot.writeI64(struct.srcId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multi_image_import_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.listImgInfo = new ArrayList<ByteBuffer>(_list61.size);
            ByteBuffer _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = iprot.readBinary();
              struct.listImgInfo.add(_elem62);
            }
          }
          struct.setListImgInfoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.srcType = iprot.readI32();
          struct.setSrcTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.srcId = iprot.readI64();
          struct.setSrcIdIsSet(true);
        }
      }
    }

  }

  public static class multi_image_import_result implements org.apache.thrift.TBase<multi_image_import_result, multi_image_import_result._Fields>, java.io.Serializable, Cloneable, Comparable<multi_image_import_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multi_image_import_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multi_image_import_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multi_image_import_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multi_image_import_result.class, metaDataMap);
    }

    public multi_image_import_result() {
    }

    public multi_image_import_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multi_image_import_result(multi_image_import_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public multi_image_import_result deepCopy() {
      return new multi_image_import_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public multi_image_import_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multi_image_import_result)
        return this.equals((multi_image_import_result)that);
      return false;
    }

    public boolean equals(multi_image_import_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(multi_image_import_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multi_image_import_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multi_image_import_resultStandardSchemeFactory implements SchemeFactory {
      public multi_image_import_resultStandardScheme getScheme() {
        return new multi_image_import_resultStandardScheme();
      }
    }

    private static class multi_image_import_resultStandardScheme extends StandardScheme<multi_image_import_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multi_image_import_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multi_image_import_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multi_image_import_resultTupleSchemeFactory implements SchemeFactory {
      public multi_image_import_resultTupleScheme getScheme() {
        return new multi_image_import_resultTupleScheme();
      }
    }

    private static class multi_image_import_resultTupleScheme extends TupleScheme<multi_image_import_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multi_image_import_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multi_image_import_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class face_detect_rect_args implements org.apache.thrift.TBase<face_detect_rect_args, face_detect_rect_args._Fields>, java.io.Serializable, Cloneable, Comparable<face_detect_rect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("face_detect_rect_args");

    private static final org.apache.thrift.protocol.TField INPUT_IMG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("inputImgName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FECE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("feceId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new face_detect_rect_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new face_detect_rect_argsTupleSchemeFactory());
    }

    public String inputImgName; // required
    public long feceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INPUT_IMG_NAME((short)1, "inputImgName"),
      FECE_ID((short)2, "feceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INPUT_IMG_NAME
            return INPUT_IMG_NAME;
          case 2: // FECE_ID
            return FECE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FECEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INPUT_IMG_NAME, new org.apache.thrift.meta_data.FieldMetaData("inputImgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FECE_ID, new org.apache.thrift.meta_data.FieldMetaData("feceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(face_detect_rect_args.class, metaDataMap);
    }

    public face_detect_rect_args() {
    }

    public face_detect_rect_args(
      String inputImgName,
      long feceId)
    {
      this();
      this.inputImgName = inputImgName;
      this.feceId = feceId;
      setFeceIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public face_detect_rect_args(face_detect_rect_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetInputImgName()) {
        this.inputImgName = other.inputImgName;
      }
      this.feceId = other.feceId;
    }

    public face_detect_rect_args deepCopy() {
      return new face_detect_rect_args(this);
    }

    @Override
    public void clear() {
      this.inputImgName = null;
      setFeceIdIsSet(false);
      this.feceId = 0;
    }

    public String getInputImgName() {
      return this.inputImgName;
    }

    public face_detect_rect_args setInputImgName(String inputImgName) {
      this.inputImgName = inputImgName;
      return this;
    }

    public void unsetInputImgName() {
      this.inputImgName = null;
    }

    /** Returns true if field inputImgName is set (has been assigned a value) and false otherwise */
    public boolean isSetInputImgName() {
      return this.inputImgName != null;
    }

    public void setInputImgNameIsSet(boolean value) {
      if (!value) {
        this.inputImgName = null;
      }
    }

    public long getFeceId() {
      return this.feceId;
    }

    public face_detect_rect_args setFeceId(long feceId) {
      this.feceId = feceId;
      setFeceIdIsSet(true);
      return this;
    }

    public void unsetFeceId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FECEID_ISSET_ID);
    }

    /** Returns true if field feceId is set (has been assigned a value) and false otherwise */
    public boolean isSetFeceId() {
      return EncodingUtils.testBit(__isset_bitfield, __FECEID_ISSET_ID);
    }

    public void setFeceIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FECEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INPUT_IMG_NAME:
        if (value == null) {
          unsetInputImgName();
        } else {
          setInputImgName((String)value);
        }
        break;

      case FECE_ID:
        if (value == null) {
          unsetFeceId();
        } else {
          setFeceId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INPUT_IMG_NAME:
        return getInputImgName();

      case FECE_ID:
        return Long.valueOf(getFeceId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INPUT_IMG_NAME:
        return isSetInputImgName();
      case FECE_ID:
        return isSetFeceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof face_detect_rect_args)
        return this.equals((face_detect_rect_args)that);
      return false;
    }

    public boolean equals(face_detect_rect_args that) {
      if (that == null)
        return false;

      boolean this_present_inputImgName = true && this.isSetInputImgName();
      boolean that_present_inputImgName = true && that.isSetInputImgName();
      if (this_present_inputImgName || that_present_inputImgName) {
        if (!(this_present_inputImgName && that_present_inputImgName))
          return false;
        if (!this.inputImgName.equals(that.inputImgName))
          return false;
      }

      boolean this_present_feceId = true;
      boolean that_present_feceId = true;
      if (this_present_feceId || that_present_feceId) {
        if (!(this_present_feceId && that_present_feceId))
          return false;
        if (this.feceId != that.feceId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_inputImgName = true && (isSetInputImgName());
      list.add(present_inputImgName);
      if (present_inputImgName)
        list.add(inputImgName);

      boolean present_feceId = true;
      list.add(present_feceId);
      if (present_feceId)
        list.add(feceId);

      return list.hashCode();
    }

    @Override
    public int compareTo(face_detect_rect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInputImgName()).compareTo(other.isSetInputImgName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputImgName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputImgName, other.inputImgName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFeceId()).compareTo(other.isSetFeceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feceId, other.feceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("face_detect_rect_args(");
      boolean first = true;

      sb.append("inputImgName:");
      if (this.inputImgName == null) {
        sb.append("null");
      } else {
        sb.append(this.inputImgName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feceId:");
      sb.append(this.feceId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class face_detect_rect_argsStandardSchemeFactory implements SchemeFactory {
      public face_detect_rect_argsStandardScheme getScheme() {
        return new face_detect_rect_argsStandardScheme();
      }
    }

    private static class face_detect_rect_argsStandardScheme extends StandardScheme<face_detect_rect_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, face_detect_rect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INPUT_IMG_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputImgName = iprot.readString();
                struct.setInputImgNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FECE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.feceId = iprot.readI64();
                struct.setFeceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, face_detect_rect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inputImgName != null) {
          oprot.writeFieldBegin(INPUT_IMG_NAME_FIELD_DESC);
          oprot.writeString(struct.inputImgName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FECE_ID_FIELD_DESC);
        oprot.writeI64(struct.feceId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class face_detect_rect_argsTupleSchemeFactory implements SchemeFactory {
      public face_detect_rect_argsTupleScheme getScheme() {
        return new face_detect_rect_argsTupleScheme();
      }
    }

    private static class face_detect_rect_argsTupleScheme extends TupleScheme<face_detect_rect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, face_detect_rect_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInputImgName()) {
          optionals.set(0);
        }
        if (struct.isSetFeceId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInputImgName()) {
          oprot.writeString(struct.inputImgName);
        }
        if (struct.isSetFeceId()) {
          oprot.writeI64(struct.feceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, face_detect_rect_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.inputImgName = iprot.readString();
          struct.setInputImgNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.feceId = iprot.readI64();
          struct.setFeceIdIsSet(true);
        }
      }
    }

  }

  public static class face_detect_rect_result implements org.apache.thrift.TBase<face_detect_rect_result, face_detect_rect_result._Fields>, java.io.Serializable, Cloneable, Comparable<face_detect_rect_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("face_detect_rect_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new face_detect_rect_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new face_detect_rect_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(face_detect_rect_result.class, metaDataMap);
    }

    public face_detect_rect_result() {
    }

    public face_detect_rect_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public face_detect_rect_result(face_detect_rect_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public face_detect_rect_result deepCopy() {
      return new face_detect_rect_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public face_detect_rect_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof face_detect_rect_result)
        return this.equals((face_detect_rect_result)that);
      return false;
    }

    public boolean equals(face_detect_rect_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(face_detect_rect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("face_detect_rect_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class face_detect_rect_resultStandardSchemeFactory implements SchemeFactory {
      public face_detect_rect_resultStandardScheme getScheme() {
        return new face_detect_rect_resultStandardScheme();
      }
    }

    private static class face_detect_rect_resultStandardScheme extends StandardScheme<face_detect_rect_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, face_detect_rect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, face_detect_rect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class face_detect_rect_resultTupleSchemeFactory implements SchemeFactory {
      public face_detect_rect_resultTupleScheme getScheme() {
        return new face_detect_rect_resultTupleScheme();
      }
    }

    private static class face_detect_rect_resultTupleScheme extends TupleScheme<face_detect_rect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, face_detect_rect_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, face_detect_rect_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class capture_on_demand_args implements org.apache.thrift.TBase<capture_on_demand_args, capture_on_demand_args._Fields>, java.io.Serializable, Cloneable, Comparable<capture_on_demand_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("capture_on_demand_args");

    private static final org.apache.thrift.protocol.TField SRC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("srcId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new capture_on_demand_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new capture_on_demand_argsTupleSchemeFactory());
    }

    public long srcId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC_ID((short)1, "srcId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC_ID
            return SRC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SRCID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC_ID, new org.apache.thrift.meta_data.FieldMetaData("srcId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(capture_on_demand_args.class, metaDataMap);
    }

    public capture_on_demand_args() {
    }

    public capture_on_demand_args(
      long srcId)
    {
      this();
      this.srcId = srcId;
      setSrcIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public capture_on_demand_args(capture_on_demand_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.srcId = other.srcId;
    }

    public capture_on_demand_args deepCopy() {
      return new capture_on_demand_args(this);
    }

    @Override
    public void clear() {
      setSrcIdIsSet(false);
      this.srcId = 0;
    }

    public long getSrcId() {
      return this.srcId;
    }

    public capture_on_demand_args setSrcId(long srcId) {
      this.srcId = srcId;
      setSrcIdIsSet(true);
      return this;
    }

    public void unsetSrcId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SRCID_ISSET_ID);
    }

    /** Returns true if field srcId is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcId() {
      return EncodingUtils.testBit(__isset_bitfield, __SRCID_ISSET_ID);
    }

    public void setSrcIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SRCID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SRC_ID:
        if (value == null) {
          unsetSrcId();
        } else {
          setSrcId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC_ID:
        return Long.valueOf(getSrcId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SRC_ID:
        return isSetSrcId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof capture_on_demand_args)
        return this.equals((capture_on_demand_args)that);
      return false;
    }

    public boolean equals(capture_on_demand_args that) {
      if (that == null)
        return false;

      boolean this_present_srcId = true;
      boolean that_present_srcId = true;
      if (this_present_srcId || that_present_srcId) {
        if (!(this_present_srcId && that_present_srcId))
          return false;
        if (this.srcId != that.srcId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_srcId = true;
      list.add(present_srcId);
      if (present_srcId)
        list.add(srcId);

      return list.hashCode();
    }

    @Override
    public int compareTo(capture_on_demand_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSrcId()).compareTo(other.isSetSrcId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcId, other.srcId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("capture_on_demand_args(");
      boolean first = true;

      sb.append("srcId:");
      sb.append(this.srcId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class capture_on_demand_argsStandardSchemeFactory implements SchemeFactory {
      public capture_on_demand_argsStandardScheme getScheme() {
        return new capture_on_demand_argsStandardScheme();
      }
    }

    private static class capture_on_demand_argsStandardScheme extends StandardScheme<capture_on_demand_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, capture_on_demand_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.srcId = iprot.readI64();
                struct.setSrcIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, capture_on_demand_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SRC_ID_FIELD_DESC);
        oprot.writeI64(struct.srcId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class capture_on_demand_argsTupleSchemeFactory implements SchemeFactory {
      public capture_on_demand_argsTupleScheme getScheme() {
        return new capture_on_demand_argsTupleScheme();
      }
    }

    private static class capture_on_demand_argsTupleScheme extends TupleScheme<capture_on_demand_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, capture_on_demand_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSrcId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSrcId()) {
          oprot.writeI64(struct.srcId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, capture_on_demand_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.srcId = iprot.readI64();
          struct.setSrcIdIsSet(true);
        }
      }
    }

  }

  public static class capture_on_demand_result implements org.apache.thrift.TBase<capture_on_demand_result, capture_on_demand_result._Fields>, java.io.Serializable, Cloneable, Comparable<capture_on_demand_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("capture_on_demand_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new capture_on_demand_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new capture_on_demand_resultTupleSchemeFactory());
    }

    public T_CapRstOndemand success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, T_CapRstOndemand.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(capture_on_demand_result.class, metaDataMap);
    }

    public capture_on_demand_result() {
    }

    public capture_on_demand_result(
      T_CapRstOndemand success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public capture_on_demand_result(capture_on_demand_result other) {
      if (other.isSetSuccess()) {
        this.success = new T_CapRstOndemand(other.success);
      }
    }

    public capture_on_demand_result deepCopy() {
      return new capture_on_demand_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public T_CapRstOndemand getSuccess() {
      return this.success;
    }

    public capture_on_demand_result setSuccess(T_CapRstOndemand success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((T_CapRstOndemand)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof capture_on_demand_result)
        return this.equals((capture_on_demand_result)that);
      return false;
    }

    public boolean equals(capture_on_demand_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(capture_on_demand_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("capture_on_demand_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class capture_on_demand_resultStandardSchemeFactory implements SchemeFactory {
      public capture_on_demand_resultStandardScheme getScheme() {
        return new capture_on_demand_resultStandardScheme();
      }
    }

    private static class capture_on_demand_resultStandardScheme extends StandardScheme<capture_on_demand_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, capture_on_demand_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new T_CapRstOndemand();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, capture_on_demand_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class capture_on_demand_resultTupleSchemeFactory implements SchemeFactory {
      public capture_on_demand_resultTupleScheme getScheme() {
        return new capture_on_demand_resultTupleScheme();
      }
    }

    private static class capture_on_demand_resultTupleScheme extends TupleScheme<capture_on_demand_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, capture_on_demand_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, capture_on_demand_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new T_CapRstOndemand();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class iface_merge_ctrl_args implements org.apache.thrift.TBase<iface_merge_ctrl_args, iface_merge_ctrl_args._Fields>, java.io.Serializable, Cloneable, Comparable<iface_merge_ctrl_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("iface_merge_ctrl_args");

    private static final org.apache.thrift.protocol.TField INPUT_JSON_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("inputJsonParam", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new iface_merge_ctrl_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new iface_merge_ctrl_argsTupleSchemeFactory());
    }

    public String inputJsonParam; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INPUT_JSON_PARAM((short)1, "inputJsonParam");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INPUT_JSON_PARAM
            return INPUT_JSON_PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INPUT_JSON_PARAM, new org.apache.thrift.meta_data.FieldMetaData("inputJsonParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(iface_merge_ctrl_args.class, metaDataMap);
    }

    public iface_merge_ctrl_args() {
    }

    public iface_merge_ctrl_args(
      String inputJsonParam)
    {
      this();
      this.inputJsonParam = inputJsonParam;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public iface_merge_ctrl_args(iface_merge_ctrl_args other) {
      if (other.isSetInputJsonParam()) {
        this.inputJsonParam = other.inputJsonParam;
      }
    }

    public iface_merge_ctrl_args deepCopy() {
      return new iface_merge_ctrl_args(this);
    }

    @Override
    public void clear() {
      this.inputJsonParam = null;
    }

    public String getInputJsonParam() {
      return this.inputJsonParam;
    }

    public iface_merge_ctrl_args setInputJsonParam(String inputJsonParam) {
      this.inputJsonParam = inputJsonParam;
      return this;
    }

    public void unsetInputJsonParam() {
      this.inputJsonParam = null;
    }

    /** Returns true if field inputJsonParam is set (has been assigned a value) and false otherwise */
    public boolean isSetInputJsonParam() {
      return this.inputJsonParam != null;
    }

    public void setInputJsonParamIsSet(boolean value) {
      if (!value) {
        this.inputJsonParam = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INPUT_JSON_PARAM:
        if (value == null) {
          unsetInputJsonParam();
        } else {
          setInputJsonParam((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INPUT_JSON_PARAM:
        return getInputJsonParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INPUT_JSON_PARAM:
        return isSetInputJsonParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof iface_merge_ctrl_args)
        return this.equals((iface_merge_ctrl_args)that);
      return false;
    }

    public boolean equals(iface_merge_ctrl_args that) {
      if (that == null)
        return false;

      boolean this_present_inputJsonParam = true && this.isSetInputJsonParam();
      boolean that_present_inputJsonParam = true && that.isSetInputJsonParam();
      if (this_present_inputJsonParam || that_present_inputJsonParam) {
        if (!(this_present_inputJsonParam && that_present_inputJsonParam))
          return false;
        if (!this.inputJsonParam.equals(that.inputJsonParam))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_inputJsonParam = true && (isSetInputJsonParam());
      list.add(present_inputJsonParam);
      if (present_inputJsonParam)
        list.add(inputJsonParam);

      return list.hashCode();
    }

    @Override
    public int compareTo(iface_merge_ctrl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInputJsonParam()).compareTo(other.isSetInputJsonParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputJsonParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputJsonParam, other.inputJsonParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("iface_merge_ctrl_args(");
      boolean first = true;

      sb.append("inputJsonParam:");
      if (this.inputJsonParam == null) {
        sb.append("null");
      } else {
        sb.append(this.inputJsonParam);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class iface_merge_ctrl_argsStandardSchemeFactory implements SchemeFactory {
      public iface_merge_ctrl_argsStandardScheme getScheme() {
        return new iface_merge_ctrl_argsStandardScheme();
      }
    }

    private static class iface_merge_ctrl_argsStandardScheme extends StandardScheme<iface_merge_ctrl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, iface_merge_ctrl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INPUT_JSON_PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputJsonParam = iprot.readString();
                struct.setInputJsonParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, iface_merge_ctrl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inputJsonParam != null) {
          oprot.writeFieldBegin(INPUT_JSON_PARAM_FIELD_DESC);
          oprot.writeString(struct.inputJsonParam);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class iface_merge_ctrl_argsTupleSchemeFactory implements SchemeFactory {
      public iface_merge_ctrl_argsTupleScheme getScheme() {
        return new iface_merge_ctrl_argsTupleScheme();
      }
    }

    private static class iface_merge_ctrl_argsTupleScheme extends TupleScheme<iface_merge_ctrl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, iface_merge_ctrl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInputJsonParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInputJsonParam()) {
          oprot.writeString(struct.inputJsonParam);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, iface_merge_ctrl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.inputJsonParam = iprot.readString();
          struct.setInputJsonParamIsSet(true);
        }
      }
    }

  }

  public static class iface_merge_ctrl_result implements org.apache.thrift.TBase<iface_merge_ctrl_result, iface_merge_ctrl_result._Fields>, java.io.Serializable, Cloneable, Comparable<iface_merge_ctrl_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("iface_merge_ctrl_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new iface_merge_ctrl_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new iface_merge_ctrl_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(iface_merge_ctrl_result.class, metaDataMap);
    }

    public iface_merge_ctrl_result() {
    }

    public iface_merge_ctrl_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public iface_merge_ctrl_result(iface_merge_ctrl_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public iface_merge_ctrl_result deepCopy() {
      return new iface_merge_ctrl_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public iface_merge_ctrl_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof iface_merge_ctrl_result)
        return this.equals((iface_merge_ctrl_result)that);
      return false;
    }

    public boolean equals(iface_merge_ctrl_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(iface_merge_ctrl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("iface_merge_ctrl_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class iface_merge_ctrl_resultStandardSchemeFactory implements SchemeFactory {
      public iface_merge_ctrl_resultStandardScheme getScheme() {
        return new iface_merge_ctrl_resultStandardScheme();
      }
    }

    private static class iface_merge_ctrl_resultStandardScheme extends StandardScheme<iface_merge_ctrl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, iface_merge_ctrl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, iface_merge_ctrl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class iface_merge_ctrl_resultTupleSchemeFactory implements SchemeFactory {
      public iface_merge_ctrl_resultTupleScheme getScheme() {
        return new iface_merge_ctrl_resultTupleScheme();
      }
    }

    private static class iface_merge_ctrl_resultTupleScheme extends TupleScheme<iface_merge_ctrl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, iface_merge_ctrl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, iface_merge_ctrl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class iface_add_camera_args implements org.apache.thrift.TBase<iface_add_camera_args, iface_add_camera_args._Fields>, java.io.Serializable, Cloneable, Comparable<iface_add_camera_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("iface_add_camera_args");

    private static final org.apache.thrift.protocol.TField DW_CAMERA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dwCameraId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField STR_IPC_ADR_FIELD_DESC = new org.apache.thrift.protocol.TField("strIpcAdr", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DW_IPC_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("dwIpcPort", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField STR_IPC_USR_FIELD_DESC = new org.apache.thrift.protocol.TField("strIpcUsr", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField STR_IPC_PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("strIpcPwd", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField DW_ENGINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dwEngineId", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new iface_add_camera_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new iface_add_camera_argsTupleSchemeFactory());
    }

    public long dwCameraId; // required
    public String strIpcAdr; // required
    public int dwIpcPort; // required
    public String strIpcUsr; // required
    public String strIpcPwd; // required
    public int dwEngineId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DW_CAMERA_ID((short)1, "dwCameraId"),
      STR_IPC_ADR((short)2, "strIpcAdr"),
      DW_IPC_PORT((short)3, "dwIpcPort"),
      STR_IPC_USR((short)4, "strIpcUsr"),
      STR_IPC_PWD((short)5, "strIpcPwd"),
      DW_ENGINE_ID((short)6, "dwEngineId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DW_CAMERA_ID
            return DW_CAMERA_ID;
          case 2: // STR_IPC_ADR
            return STR_IPC_ADR;
          case 3: // DW_IPC_PORT
            return DW_IPC_PORT;
          case 4: // STR_IPC_USR
            return STR_IPC_USR;
          case 5: // STR_IPC_PWD
            return STR_IPC_PWD;
          case 6: // DW_ENGINE_ID
            return DW_ENGINE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DWCAMERAID_ISSET_ID = 0;
    private static final int __DWIPCPORT_ISSET_ID = 1;
    private static final int __DWENGINEID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DW_CAMERA_ID, new org.apache.thrift.meta_data.FieldMetaData("dwCameraId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.STR_IPC_ADR, new org.apache.thrift.meta_data.FieldMetaData("strIpcAdr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DW_IPC_PORT, new org.apache.thrift.meta_data.FieldMetaData("dwIpcPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STR_IPC_USR, new org.apache.thrift.meta_data.FieldMetaData("strIpcUsr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STR_IPC_PWD, new org.apache.thrift.meta_data.FieldMetaData("strIpcPwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DW_ENGINE_ID, new org.apache.thrift.meta_data.FieldMetaData("dwEngineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(iface_add_camera_args.class, metaDataMap);
    }

    public iface_add_camera_args() {
    }

    public iface_add_camera_args(
      long dwCameraId,
      String strIpcAdr,
      int dwIpcPort,
      String strIpcUsr,
      String strIpcPwd,
      int dwEngineId)
    {
      this();
      this.dwCameraId = dwCameraId;
      setDwCameraIdIsSet(true);
      this.strIpcAdr = strIpcAdr;
      this.dwIpcPort = dwIpcPort;
      setDwIpcPortIsSet(true);
      this.strIpcUsr = strIpcUsr;
      this.strIpcPwd = strIpcPwd;
      this.dwEngineId = dwEngineId;
      setDwEngineIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public iface_add_camera_args(iface_add_camera_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dwCameraId = other.dwCameraId;
      if (other.isSetStrIpcAdr()) {
        this.strIpcAdr = other.strIpcAdr;
      }
      this.dwIpcPort = other.dwIpcPort;
      if (other.isSetStrIpcUsr()) {
        this.strIpcUsr = other.strIpcUsr;
      }
      if (other.isSetStrIpcPwd()) {
        this.strIpcPwd = other.strIpcPwd;
      }
      this.dwEngineId = other.dwEngineId;
    }

    public iface_add_camera_args deepCopy() {
      return new iface_add_camera_args(this);
    }

    @Override
    public void clear() {
      setDwCameraIdIsSet(false);
      this.dwCameraId = 0;
      this.strIpcAdr = null;
      setDwIpcPortIsSet(false);
      this.dwIpcPort = 0;
      this.strIpcUsr = null;
      this.strIpcPwd = null;
      setDwEngineIdIsSet(false);
      this.dwEngineId = 0;
    }

    public long getDwCameraId() {
      return this.dwCameraId;
    }

    public iface_add_camera_args setDwCameraId(long dwCameraId) {
      this.dwCameraId = dwCameraId;
      setDwCameraIdIsSet(true);
      return this;
    }

    public void unsetDwCameraId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DWCAMERAID_ISSET_ID);
    }

    /** Returns true if field dwCameraId is set (has been assigned a value) and false otherwise */
    public boolean isSetDwCameraId() {
      return EncodingUtils.testBit(__isset_bitfield, __DWCAMERAID_ISSET_ID);
    }

    public void setDwCameraIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DWCAMERAID_ISSET_ID, value);
    }

    public String getStrIpcAdr() {
      return this.strIpcAdr;
    }

    public iface_add_camera_args setStrIpcAdr(String strIpcAdr) {
      this.strIpcAdr = strIpcAdr;
      return this;
    }

    public void unsetStrIpcAdr() {
      this.strIpcAdr = null;
    }

    /** Returns true if field strIpcAdr is set (has been assigned a value) and false otherwise */
    public boolean isSetStrIpcAdr() {
      return this.strIpcAdr != null;
    }

    public void setStrIpcAdrIsSet(boolean value) {
      if (!value) {
        this.strIpcAdr = null;
      }
    }

    public int getDwIpcPort() {
      return this.dwIpcPort;
    }

    public iface_add_camera_args setDwIpcPort(int dwIpcPort) {
      this.dwIpcPort = dwIpcPort;
      setDwIpcPortIsSet(true);
      return this;
    }

    public void unsetDwIpcPort() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DWIPCPORT_ISSET_ID);
    }

    /** Returns true if field dwIpcPort is set (has been assigned a value) and false otherwise */
    public boolean isSetDwIpcPort() {
      return EncodingUtils.testBit(__isset_bitfield, __DWIPCPORT_ISSET_ID);
    }

    public void setDwIpcPortIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DWIPCPORT_ISSET_ID, value);
    }

    public String getStrIpcUsr() {
      return this.strIpcUsr;
    }

    public iface_add_camera_args setStrIpcUsr(String strIpcUsr) {
      this.strIpcUsr = strIpcUsr;
      return this;
    }

    public void unsetStrIpcUsr() {
      this.strIpcUsr = null;
    }

    /** Returns true if field strIpcUsr is set (has been assigned a value) and false otherwise */
    public boolean isSetStrIpcUsr() {
      return this.strIpcUsr != null;
    }

    public void setStrIpcUsrIsSet(boolean value) {
      if (!value) {
        this.strIpcUsr = null;
      }
    }

    public String getStrIpcPwd() {
      return this.strIpcPwd;
    }

    public iface_add_camera_args setStrIpcPwd(String strIpcPwd) {
      this.strIpcPwd = strIpcPwd;
      return this;
    }

    public void unsetStrIpcPwd() {
      this.strIpcPwd = null;
    }

    /** Returns true if field strIpcPwd is set (has been assigned a value) and false otherwise */
    public boolean isSetStrIpcPwd() {
      return this.strIpcPwd != null;
    }

    public void setStrIpcPwdIsSet(boolean value) {
      if (!value) {
        this.strIpcPwd = null;
      }
    }

    public int getDwEngineId() {
      return this.dwEngineId;
    }

    public iface_add_camera_args setDwEngineId(int dwEngineId) {
      this.dwEngineId = dwEngineId;
      setDwEngineIdIsSet(true);
      return this;
    }

    public void unsetDwEngineId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DWENGINEID_ISSET_ID);
    }

    /** Returns true if field dwEngineId is set (has been assigned a value) and false otherwise */
    public boolean isSetDwEngineId() {
      return EncodingUtils.testBit(__isset_bitfield, __DWENGINEID_ISSET_ID);
    }

    public void setDwEngineIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DWENGINEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DW_CAMERA_ID:
        if (value == null) {
          unsetDwCameraId();
        } else {
          setDwCameraId((Long)value);
        }
        break;

      case STR_IPC_ADR:
        if (value == null) {
          unsetStrIpcAdr();
        } else {
          setStrIpcAdr((String)value);
        }
        break;

      case DW_IPC_PORT:
        if (value == null) {
          unsetDwIpcPort();
        } else {
          setDwIpcPort((Integer)value);
        }
        break;

      case STR_IPC_USR:
        if (value == null) {
          unsetStrIpcUsr();
        } else {
          setStrIpcUsr((String)value);
        }
        break;

      case STR_IPC_PWD:
        if (value == null) {
          unsetStrIpcPwd();
        } else {
          setStrIpcPwd((String)value);
        }
        break;

      case DW_ENGINE_ID:
        if (value == null) {
          unsetDwEngineId();
        } else {
          setDwEngineId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DW_CAMERA_ID:
        return Long.valueOf(getDwCameraId());

      case STR_IPC_ADR:
        return getStrIpcAdr();

      case DW_IPC_PORT:
        return Integer.valueOf(getDwIpcPort());

      case STR_IPC_USR:
        return getStrIpcUsr();

      case STR_IPC_PWD:
        return getStrIpcPwd();

      case DW_ENGINE_ID:
        return Integer.valueOf(getDwEngineId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DW_CAMERA_ID:
        return isSetDwCameraId();
      case STR_IPC_ADR:
        return isSetStrIpcAdr();
      case DW_IPC_PORT:
        return isSetDwIpcPort();
      case STR_IPC_USR:
        return isSetStrIpcUsr();
      case STR_IPC_PWD:
        return isSetStrIpcPwd();
      case DW_ENGINE_ID:
        return isSetDwEngineId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof iface_add_camera_args)
        return this.equals((iface_add_camera_args)that);
      return false;
    }

    public boolean equals(iface_add_camera_args that) {
      if (that == null)
        return false;

      boolean this_present_dwCameraId = true;
      boolean that_present_dwCameraId = true;
      if (this_present_dwCameraId || that_present_dwCameraId) {
        if (!(this_present_dwCameraId && that_present_dwCameraId))
          return false;
        if (this.dwCameraId != that.dwCameraId)
          return false;
      }

      boolean this_present_strIpcAdr = true && this.isSetStrIpcAdr();
      boolean that_present_strIpcAdr = true && that.isSetStrIpcAdr();
      if (this_present_strIpcAdr || that_present_strIpcAdr) {
        if (!(this_present_strIpcAdr && that_present_strIpcAdr))
          return false;
        if (!this.strIpcAdr.equals(that.strIpcAdr))
          return false;
      }

      boolean this_present_dwIpcPort = true;
      boolean that_present_dwIpcPort = true;
      if (this_present_dwIpcPort || that_present_dwIpcPort) {
        if (!(this_present_dwIpcPort && that_present_dwIpcPort))
          return false;
        if (this.dwIpcPort != that.dwIpcPort)
          return false;
      }

      boolean this_present_strIpcUsr = true && this.isSetStrIpcUsr();
      boolean that_present_strIpcUsr = true && that.isSetStrIpcUsr();
      if (this_present_strIpcUsr || that_present_strIpcUsr) {
        if (!(this_present_strIpcUsr && that_present_strIpcUsr))
          return false;
        if (!this.strIpcUsr.equals(that.strIpcUsr))
          return false;
      }

      boolean this_present_strIpcPwd = true && this.isSetStrIpcPwd();
      boolean that_present_strIpcPwd = true && that.isSetStrIpcPwd();
      if (this_present_strIpcPwd || that_present_strIpcPwd) {
        if (!(this_present_strIpcPwd && that_present_strIpcPwd))
          return false;
        if (!this.strIpcPwd.equals(that.strIpcPwd))
          return false;
      }

      boolean this_present_dwEngineId = true;
      boolean that_present_dwEngineId = true;
      if (this_present_dwEngineId || that_present_dwEngineId) {
        if (!(this_present_dwEngineId && that_present_dwEngineId))
          return false;
        if (this.dwEngineId != that.dwEngineId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dwCameraId = true;
      list.add(present_dwCameraId);
      if (present_dwCameraId)
        list.add(dwCameraId);

      boolean present_strIpcAdr = true && (isSetStrIpcAdr());
      list.add(present_strIpcAdr);
      if (present_strIpcAdr)
        list.add(strIpcAdr);

      boolean present_dwIpcPort = true;
      list.add(present_dwIpcPort);
      if (present_dwIpcPort)
        list.add(dwIpcPort);

      boolean present_strIpcUsr = true && (isSetStrIpcUsr());
      list.add(present_strIpcUsr);
      if (present_strIpcUsr)
        list.add(strIpcUsr);

      boolean present_strIpcPwd = true && (isSetStrIpcPwd());
      list.add(present_strIpcPwd);
      if (present_strIpcPwd)
        list.add(strIpcPwd);

      boolean present_dwEngineId = true;
      list.add(present_dwEngineId);
      if (present_dwEngineId)
        list.add(dwEngineId);

      return list.hashCode();
    }

    @Override
    public int compareTo(iface_add_camera_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDwCameraId()).compareTo(other.isSetDwCameraId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDwCameraId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dwCameraId, other.dwCameraId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrIpcAdr()).compareTo(other.isSetStrIpcAdr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrIpcAdr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strIpcAdr, other.strIpcAdr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDwIpcPort()).compareTo(other.isSetDwIpcPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDwIpcPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dwIpcPort, other.dwIpcPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrIpcUsr()).compareTo(other.isSetStrIpcUsr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrIpcUsr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strIpcUsr, other.strIpcUsr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrIpcPwd()).compareTo(other.isSetStrIpcPwd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrIpcPwd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strIpcPwd, other.strIpcPwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDwEngineId()).compareTo(other.isSetDwEngineId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDwEngineId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dwEngineId, other.dwEngineId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("iface_add_camera_args(");
      boolean first = true;

      sb.append("dwCameraId:");
      sb.append(this.dwCameraId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strIpcAdr:");
      if (this.strIpcAdr == null) {
        sb.append("null");
      } else {
        sb.append(this.strIpcAdr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dwIpcPort:");
      sb.append(this.dwIpcPort);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strIpcUsr:");
      if (this.strIpcUsr == null) {
        sb.append("null");
      } else {
        sb.append(this.strIpcUsr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("strIpcPwd:");
      if (this.strIpcPwd == null) {
        sb.append("null");
      } else {
        sb.append(this.strIpcPwd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dwEngineId:");
      sb.append(this.dwEngineId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class iface_add_camera_argsStandardSchemeFactory implements SchemeFactory {
      public iface_add_camera_argsStandardScheme getScheme() {
        return new iface_add_camera_argsStandardScheme();
      }
    }

    private static class iface_add_camera_argsStandardScheme extends StandardScheme<iface_add_camera_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, iface_add_camera_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DW_CAMERA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.dwCameraId = iprot.readI64();
                struct.setDwCameraIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STR_IPC_ADR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strIpcAdr = iprot.readString();
                struct.setStrIpcAdrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DW_IPC_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.dwIpcPort = iprot.readI32();
                struct.setDwIpcPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // STR_IPC_USR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strIpcUsr = iprot.readString();
                struct.setStrIpcUsrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // STR_IPC_PWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strIpcPwd = iprot.readString();
                struct.setStrIpcPwdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DW_ENGINE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.dwEngineId = iprot.readI32();
                struct.setDwEngineIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, iface_add_camera_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DW_CAMERA_ID_FIELD_DESC);
        oprot.writeI64(struct.dwCameraId);
        oprot.writeFieldEnd();
        if (struct.strIpcAdr != null) {
          oprot.writeFieldBegin(STR_IPC_ADR_FIELD_DESC);
          oprot.writeString(struct.strIpcAdr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DW_IPC_PORT_FIELD_DESC);
        oprot.writeI32(struct.dwIpcPort);
        oprot.writeFieldEnd();
        if (struct.strIpcUsr != null) {
          oprot.writeFieldBegin(STR_IPC_USR_FIELD_DESC);
          oprot.writeString(struct.strIpcUsr);
          oprot.writeFieldEnd();
        }
        if (struct.strIpcPwd != null) {
          oprot.writeFieldBegin(STR_IPC_PWD_FIELD_DESC);
          oprot.writeString(struct.strIpcPwd);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DW_ENGINE_ID_FIELD_DESC);
        oprot.writeI32(struct.dwEngineId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class iface_add_camera_argsTupleSchemeFactory implements SchemeFactory {
      public iface_add_camera_argsTupleScheme getScheme() {
        return new iface_add_camera_argsTupleScheme();
      }
    }

    private static class iface_add_camera_argsTupleScheme extends TupleScheme<iface_add_camera_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, iface_add_camera_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDwCameraId()) {
          optionals.set(0);
        }
        if (struct.isSetStrIpcAdr()) {
          optionals.set(1);
        }
        if (struct.isSetDwIpcPort()) {
          optionals.set(2);
        }
        if (struct.isSetStrIpcUsr()) {
          optionals.set(3);
        }
        if (struct.isSetStrIpcPwd()) {
          optionals.set(4);
        }
        if (struct.isSetDwEngineId()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetDwCameraId()) {
          oprot.writeI64(struct.dwCameraId);
        }
        if (struct.isSetStrIpcAdr()) {
          oprot.writeString(struct.strIpcAdr);
        }
        if (struct.isSetDwIpcPort()) {
          oprot.writeI32(struct.dwIpcPort);
        }
        if (struct.isSetStrIpcUsr()) {
          oprot.writeString(struct.strIpcUsr);
        }
        if (struct.isSetStrIpcPwd()) {
          oprot.writeString(struct.strIpcPwd);
        }
        if (struct.isSetDwEngineId()) {
          oprot.writeI32(struct.dwEngineId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, iface_add_camera_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.dwCameraId = iprot.readI64();
          struct.setDwCameraIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strIpcAdr = iprot.readString();
          struct.setStrIpcAdrIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dwIpcPort = iprot.readI32();
          struct.setDwIpcPortIsSet(true);
        }
        if (incoming.get(3)) {
          struct.strIpcUsr = iprot.readString();
          struct.setStrIpcUsrIsSet(true);
        }
        if (incoming.get(4)) {
          struct.strIpcPwd = iprot.readString();
          struct.setStrIpcPwdIsSet(true);
        }
        if (incoming.get(5)) {
          struct.dwEngineId = iprot.readI32();
          struct.setDwEngineIdIsSet(true);
        }
      }
    }

  }

  public static class iface_add_camera_result implements org.apache.thrift.TBase<iface_add_camera_result, iface_add_camera_result._Fields>, java.io.Serializable, Cloneable, Comparable<iface_add_camera_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("iface_add_camera_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new iface_add_camera_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new iface_add_camera_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(iface_add_camera_result.class, metaDataMap);
    }

    public iface_add_camera_result() {
    }

    public iface_add_camera_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public iface_add_camera_result(iface_add_camera_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public iface_add_camera_result deepCopy() {
      return new iface_add_camera_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public iface_add_camera_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof iface_add_camera_result)
        return this.equals((iface_add_camera_result)that);
      return false;
    }

    public boolean equals(iface_add_camera_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(iface_add_camera_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("iface_add_camera_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class iface_add_camera_resultStandardSchemeFactory implements SchemeFactory {
      public iface_add_camera_resultStandardScheme getScheme() {
        return new iface_add_camera_resultStandardScheme();
      }
    }

    private static class iface_add_camera_resultStandardScheme extends StandardScheme<iface_add_camera_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, iface_add_camera_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, iface_add_camera_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class iface_add_camera_resultTupleSchemeFactory implements SchemeFactory {
      public iface_add_camera_resultTupleScheme getScheme() {
        return new iface_add_camera_resultTupleScheme();
      }
    }

    private static class iface_add_camera_resultTupleScheme extends TupleScheme<iface_add_camera_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, iface_add_camera_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, iface_add_camera_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class query_prgress_rate_args implements org.apache.thrift.TBase<query_prgress_rate_args, query_prgress_rate_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_prgress_rate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_prgress_rate_args");

    private static final org.apache.thrift.protocol.TField QUERY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("QueryType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PROGRESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ProgressId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_prgress_rate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_prgress_rate_argsTupleSchemeFactory());
    }

    public int QueryType; // required
    public int ProgressId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY_TYPE((short)1, "QueryType"),
      PROGRESS_ID((short)2, "ProgressId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY_TYPE
            return QUERY_TYPE;
          case 2: // PROGRESS_ID
            return PROGRESS_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __QUERYTYPE_ISSET_ID = 0;
    private static final int __PROGRESSID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("QueryType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PROGRESS_ID, new org.apache.thrift.meta_data.FieldMetaData("ProgressId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_prgress_rate_args.class, metaDataMap);
    }

    public query_prgress_rate_args() {
    }

    public query_prgress_rate_args(
      int QueryType,
      int ProgressId)
    {
      this();
      this.QueryType = QueryType;
      setQueryTypeIsSet(true);
      this.ProgressId = ProgressId;
      setProgressIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_prgress_rate_args(query_prgress_rate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.QueryType = other.QueryType;
      this.ProgressId = other.ProgressId;
    }

    public query_prgress_rate_args deepCopy() {
      return new query_prgress_rate_args(this);
    }

    @Override
    public void clear() {
      setQueryTypeIsSet(false);
      this.QueryType = 0;
      setProgressIdIsSet(false);
      this.ProgressId = 0;
    }

    public int getQueryType() {
      return this.QueryType;
    }

    public query_prgress_rate_args setQueryType(int QueryType) {
      this.QueryType = QueryType;
      setQueryTypeIsSet(true);
      return this;
    }

    public void unsetQueryType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERYTYPE_ISSET_ID);
    }

    /** Returns true if field QueryType is set (has been assigned a value) and false otherwise */
    public boolean isSetQueryType() {
      return EncodingUtils.testBit(__isset_bitfield, __QUERYTYPE_ISSET_ID);
    }

    public void setQueryTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERYTYPE_ISSET_ID, value);
    }

    public int getProgressId() {
      return this.ProgressId;
    }

    public query_prgress_rate_args setProgressId(int ProgressId) {
      this.ProgressId = ProgressId;
      setProgressIdIsSet(true);
      return this;
    }

    public void unsetProgressId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROGRESSID_ISSET_ID);
    }

    /** Returns true if field ProgressId is set (has been assigned a value) and false otherwise */
    public boolean isSetProgressId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROGRESSID_ISSET_ID);
    }

    public void setProgressIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROGRESSID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY_TYPE:
        if (value == null) {
          unsetQueryType();
        } else {
          setQueryType((Integer)value);
        }
        break;

      case PROGRESS_ID:
        if (value == null) {
          unsetProgressId();
        } else {
          setProgressId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY_TYPE:
        return Integer.valueOf(getQueryType());

      case PROGRESS_ID:
        return Integer.valueOf(getProgressId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY_TYPE:
        return isSetQueryType();
      case PROGRESS_ID:
        return isSetProgressId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_prgress_rate_args)
        return this.equals((query_prgress_rate_args)that);
      return false;
    }

    public boolean equals(query_prgress_rate_args that) {
      if (that == null)
        return false;

      boolean this_present_QueryType = true;
      boolean that_present_QueryType = true;
      if (this_present_QueryType || that_present_QueryType) {
        if (!(this_present_QueryType && that_present_QueryType))
          return false;
        if (this.QueryType != that.QueryType)
          return false;
      }

      boolean this_present_ProgressId = true;
      boolean that_present_ProgressId = true;
      if (this_present_ProgressId || that_present_ProgressId) {
        if (!(this_present_ProgressId && that_present_ProgressId))
          return false;
        if (this.ProgressId != that.ProgressId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_QueryType = true;
      list.add(present_QueryType);
      if (present_QueryType)
        list.add(QueryType);

      boolean present_ProgressId = true;
      list.add(present_ProgressId);
      if (present_ProgressId)
        list.add(ProgressId);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_prgress_rate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQueryType()).compareTo(other.isSetQueryType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueryType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.QueryType, other.QueryType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProgressId()).compareTo(other.isSetProgressId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProgressId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ProgressId, other.ProgressId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_prgress_rate_args(");
      boolean first = true;

      sb.append("QueryType:");
      sb.append(this.QueryType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ProgressId:");
      sb.append(this.ProgressId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_prgress_rate_argsStandardSchemeFactory implements SchemeFactory {
      public query_prgress_rate_argsStandardScheme getScheme() {
        return new query_prgress_rate_argsStandardScheme();
      }
    }

    private static class query_prgress_rate_argsStandardScheme extends StandardScheme<query_prgress_rate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_prgress_rate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.QueryType = iprot.readI32();
                struct.setQueryTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROGRESS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ProgressId = iprot.readI32();
                struct.setProgressIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_prgress_rate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(QUERY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.QueryType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PROGRESS_ID_FIELD_DESC);
        oprot.writeI32(struct.ProgressId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_prgress_rate_argsTupleSchemeFactory implements SchemeFactory {
      public query_prgress_rate_argsTupleScheme getScheme() {
        return new query_prgress_rate_argsTupleScheme();
      }
    }

    private static class query_prgress_rate_argsTupleScheme extends TupleScheme<query_prgress_rate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_prgress_rate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQueryType()) {
          optionals.set(0);
        }
        if (struct.isSetProgressId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQueryType()) {
          oprot.writeI32(struct.QueryType);
        }
        if (struct.isSetProgressId()) {
          oprot.writeI32(struct.ProgressId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_prgress_rate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.QueryType = iprot.readI32();
          struct.setQueryTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ProgressId = iprot.readI32();
          struct.setProgressIdIsSet(true);
        }
      }
    }

  }

  public static class query_prgress_rate_result implements org.apache.thrift.TBase<query_prgress_rate_result, query_prgress_rate_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_prgress_rate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_prgress_rate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_prgress_rate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_prgress_rate_resultTupleSchemeFactory());
    }

    public T_ProgressQueryRst success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, T_ProgressQueryRst.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_prgress_rate_result.class, metaDataMap);
    }

    public query_prgress_rate_result() {
    }

    public query_prgress_rate_result(
      T_ProgressQueryRst success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_prgress_rate_result(query_prgress_rate_result other) {
      if (other.isSetSuccess()) {
        this.success = new T_ProgressQueryRst(other.success);
      }
    }

    public query_prgress_rate_result deepCopy() {
      return new query_prgress_rate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public T_ProgressQueryRst getSuccess() {
      return this.success;
    }

    public query_prgress_rate_result setSuccess(T_ProgressQueryRst success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((T_ProgressQueryRst)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_prgress_rate_result)
        return this.equals((query_prgress_rate_result)that);
      return false;
    }

    public boolean equals(query_prgress_rate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_prgress_rate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_prgress_rate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_prgress_rate_resultStandardSchemeFactory implements SchemeFactory {
      public query_prgress_rate_resultStandardScheme getScheme() {
        return new query_prgress_rate_resultStandardScheme();
      }
    }

    private static class query_prgress_rate_resultStandardScheme extends StandardScheme<query_prgress_rate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_prgress_rate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new T_ProgressQueryRst();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_prgress_rate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_prgress_rate_resultTupleSchemeFactory implements SchemeFactory {
      public query_prgress_rate_resultTupleScheme getScheme() {
        return new query_prgress_rate_resultTupleScheme();
      }
    }

    private static class query_prgress_rate_resultTupleScheme extends TupleScheme<query_prgress_rate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_prgress_rate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_prgress_rate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new T_ProgressQueryRst();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class engine_update_status_args implements org.apache.thrift.TBase<engine_update_status_args, engine_update_status_args._Fields>, java.io.Serializable, Cloneable, Comparable<engine_update_status_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("engine_update_status_args");

    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new engine_update_status_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new engine_update_status_argsTupleSchemeFactory());
    }

    public String status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATUS((short)1, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(engine_update_status_args.class, metaDataMap);
    }

    public engine_update_status_args() {
    }

    public engine_update_status_args(
      String status)
    {
      this();
      this.status = status;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public engine_update_status_args(engine_update_status_args other) {
      if (other.isSetStatus()) {
        this.status = other.status;
      }
    }

    public engine_update_status_args deepCopy() {
      return new engine_update_status_args(this);
    }

    @Override
    public void clear() {
      this.status = null;
    }

    public String getStatus() {
      return this.status;
    }

    public engine_update_status_args setStatus(String status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATUS:
        return getStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof engine_update_status_args)
        return this.equals((engine_update_status_args)that);
      return false;
    }

    public boolean equals(engine_update_status_args that) {
      if (that == null)
        return false;

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_status = true && (isSetStatus());
      list.add(present_status);
      if (present_status)
        list.add(status);

      return list.hashCode();
    }

    @Override
    public int compareTo(engine_update_status_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("engine_update_status_args(");
      boolean first = true;

      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class engine_update_status_argsStandardSchemeFactory implements SchemeFactory {
      public engine_update_status_argsStandardScheme getScheme() {
        return new engine_update_status_argsStandardScheme();
      }
    }

    private static class engine_update_status_argsStandardScheme extends StandardScheme<engine_update_status_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, engine_update_status_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.status = iprot.readString();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, engine_update_status_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeString(struct.status);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class engine_update_status_argsTupleSchemeFactory implements SchemeFactory {
      public engine_update_status_argsTupleScheme getScheme() {
        return new engine_update_status_argsTupleScheme();
      }
    }

    private static class engine_update_status_argsTupleScheme extends TupleScheme<engine_update_status_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, engine_update_status_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStatus()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStatus()) {
          oprot.writeString(struct.status);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, engine_update_status_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.status = iprot.readString();
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class engine_update_status_result implements org.apache.thrift.TBase<engine_update_status_result, engine_update_status_result._Fields>, java.io.Serializable, Cloneable, Comparable<engine_update_status_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("engine_update_status_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new engine_update_status_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new engine_update_status_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(engine_update_status_result.class, metaDataMap);
    }

    public engine_update_status_result() {
    }

    public engine_update_status_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public engine_update_status_result(engine_update_status_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public engine_update_status_result deepCopy() {
      return new engine_update_status_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public engine_update_status_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof engine_update_status_result)
        return this.equals((engine_update_status_result)that);
      return false;
    }

    public boolean equals(engine_update_status_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(engine_update_status_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("engine_update_status_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class engine_update_status_resultStandardSchemeFactory implements SchemeFactory {
      public engine_update_status_resultStandardScheme getScheme() {
        return new engine_update_status_resultStandardScheme();
      }
    }

    private static class engine_update_status_resultStandardScheme extends StandardScheme<engine_update_status_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, engine_update_status_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, engine_update_status_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class engine_update_status_resultTupleSchemeFactory implements SchemeFactory {
      public engine_update_status_resultTupleScheme getScheme() {
        return new engine_update_status_resultTupleScheme();
      }
    }

    private static class engine_update_status_resultTupleScheme extends TupleScheme<engine_update_status_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, engine_update_status_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, engine_update_status_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
