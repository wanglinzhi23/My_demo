/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package intellif.ifaas;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-8-31")
public class T_MulAlgFeatureExtRsp implements org.apache.thrift.TBase<T_MulAlgFeatureExtRsp, T_MulAlgFeatureExtRsp._Fields>, java.io.Serializable, Cloneable, Comparable<T_MulAlgFeatureExtRsp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("T_MulAlgFeatureExtRsp");

  private static final org.apache.thrift.protocol.TField FEATURE_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("FeatureCnt", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FORBIDEN_FIELD_DESC = new org.apache.thrift.protocol.TField("forbiden", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FEATURE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("FeatureList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new T_MulAlgFeatureExtRspStandardSchemeFactory());
    schemes.put(TupleScheme.class, new T_MulAlgFeatureExtRspTupleSchemeFactory());
  }

  public int FeatureCnt; // required
  public int forbiden; // required
  public List<T_OneAlgFeatureExtRsp> FeatureList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FEATURE_CNT((short)1, "FeatureCnt"),
    FORBIDEN((short)2, "forbiden"),
    FEATURE_LIST((short)3, "FeatureList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FEATURE_CNT
          return FEATURE_CNT;
        case 2: // FORBIDEN
          return FORBIDEN;
        case 3: // FEATURE_LIST
          return FEATURE_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FEATURECNT_ISSET_ID = 0;
  private static final int __FORBIDEN_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FEATURE_CNT, new org.apache.thrift.meta_data.FieldMetaData("FeatureCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FORBIDEN, new org.apache.thrift.meta_data.FieldMetaData("forbiden", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FEATURE_LIST, new org.apache.thrift.meta_data.FieldMetaData("FeatureList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, T_OneAlgFeatureExtRsp.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(T_MulAlgFeatureExtRsp.class, metaDataMap);
  }

  public T_MulAlgFeatureExtRsp() {
  }

  public T_MulAlgFeatureExtRsp(
    int FeatureCnt,
    int forbiden,
    List<T_OneAlgFeatureExtRsp> FeatureList)
  {
    this();
    this.FeatureCnt = FeatureCnt;
    setFeatureCntIsSet(true);
    this.forbiden = forbiden;
    setForbidenIsSet(true);
    this.FeatureList = FeatureList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public T_MulAlgFeatureExtRsp(T_MulAlgFeatureExtRsp other) {
    __isset_bitfield = other.__isset_bitfield;
    this.FeatureCnt = other.FeatureCnt;
    this.forbiden = other.forbiden;
    if (other.isSetFeatureList()) {
      List<T_OneAlgFeatureExtRsp> __this__FeatureList = new ArrayList<T_OneAlgFeatureExtRsp>(other.FeatureList.size());
      for (T_OneAlgFeatureExtRsp other_element : other.FeatureList) {
        __this__FeatureList.add(new T_OneAlgFeatureExtRsp(other_element));
      }
      this.FeatureList = __this__FeatureList;
    }
  }

  public T_MulAlgFeatureExtRsp deepCopy() {
    return new T_MulAlgFeatureExtRsp(this);
  }

  @Override
  public void clear() {
    setFeatureCntIsSet(false);
    this.FeatureCnt = 0;
    setForbidenIsSet(false);
    this.forbiden = 0;
    this.FeatureList = null;
  }

  public int getFeatureCnt() {
    return this.FeatureCnt;
  }

  public T_MulAlgFeatureExtRsp setFeatureCnt(int FeatureCnt) {
    this.FeatureCnt = FeatureCnt;
    setFeatureCntIsSet(true);
    return this;
  }

  public void unsetFeatureCnt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FEATURECNT_ISSET_ID);
  }

  /** Returns true if field FeatureCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetFeatureCnt() {
    return EncodingUtils.testBit(__isset_bitfield, __FEATURECNT_ISSET_ID);
  }

  public void setFeatureCntIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FEATURECNT_ISSET_ID, value);
  }

  public int getForbiden() {
    return this.forbiden;
  }

  public T_MulAlgFeatureExtRsp setForbiden(int forbiden) {
    this.forbiden = forbiden;
    setForbidenIsSet(true);
    return this;
  }

  public void unsetForbiden() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORBIDEN_ISSET_ID);
  }

  /** Returns true if field forbiden is set (has been assigned a value) and false otherwise */
  public boolean isSetForbiden() {
    return EncodingUtils.testBit(__isset_bitfield, __FORBIDEN_ISSET_ID);
  }

  public void setForbidenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORBIDEN_ISSET_ID, value);
  }

  public int getFeatureListSize() {
    return (this.FeatureList == null) ? 0 : this.FeatureList.size();
  }

  public java.util.Iterator<T_OneAlgFeatureExtRsp> getFeatureListIterator() {
    return (this.FeatureList == null) ? null : this.FeatureList.iterator();
  }

  public void addToFeatureList(T_OneAlgFeatureExtRsp elem) {
    if (this.FeatureList == null) {
      this.FeatureList = new ArrayList<T_OneAlgFeatureExtRsp>();
    }
    this.FeatureList.add(elem);
  }

  public List<T_OneAlgFeatureExtRsp> getFeatureList() {
    return this.FeatureList;
  }

  public T_MulAlgFeatureExtRsp setFeatureList(List<T_OneAlgFeatureExtRsp> FeatureList) {
    this.FeatureList = FeatureList;
    return this;
  }

  public void unsetFeatureList() {
    this.FeatureList = null;
  }

  /** Returns true if field FeatureList is set (has been assigned a value) and false otherwise */
  public boolean isSetFeatureList() {
    return this.FeatureList != null;
  }

  public void setFeatureListIsSet(boolean value) {
    if (!value) {
      this.FeatureList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FEATURE_CNT:
      if (value == null) {
        unsetFeatureCnt();
      } else {
        setFeatureCnt((Integer)value);
      }
      break;

    case FORBIDEN:
      if (value == null) {
        unsetForbiden();
      } else {
        setForbiden((Integer)value);
      }
      break;

    case FEATURE_LIST:
      if (value == null) {
        unsetFeatureList();
      } else {
        setFeatureList((List<T_OneAlgFeatureExtRsp>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FEATURE_CNT:
      return Integer.valueOf(getFeatureCnt());

    case FORBIDEN:
      return Integer.valueOf(getForbiden());

    case FEATURE_LIST:
      return getFeatureList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FEATURE_CNT:
      return isSetFeatureCnt();
    case FORBIDEN:
      return isSetForbiden();
    case FEATURE_LIST:
      return isSetFeatureList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof T_MulAlgFeatureExtRsp)
      return this.equals((T_MulAlgFeatureExtRsp)that);
    return false;
  }

  public boolean equals(T_MulAlgFeatureExtRsp that) {
    if (that == null)
      return false;

    boolean this_present_FeatureCnt = true;
    boolean that_present_FeatureCnt = true;
    if (this_present_FeatureCnt || that_present_FeatureCnt) {
      if (!(this_present_FeatureCnt && that_present_FeatureCnt))
        return false;
      if (this.FeatureCnt != that.FeatureCnt)
        return false;
    }

    boolean this_present_forbiden = true;
    boolean that_present_forbiden = true;
    if (this_present_forbiden || that_present_forbiden) {
      if (!(this_present_forbiden && that_present_forbiden))
        return false;
      if (this.forbiden != that.forbiden)
        return false;
    }

    boolean this_present_FeatureList = true && this.isSetFeatureList();
    boolean that_present_FeatureList = true && that.isSetFeatureList();
    if (this_present_FeatureList || that_present_FeatureList) {
      if (!(this_present_FeatureList && that_present_FeatureList))
        return false;
      if (!this.FeatureList.equals(that.FeatureList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_FeatureCnt = true;
    list.add(present_FeatureCnt);
    if (present_FeatureCnt)
      list.add(FeatureCnt);

    boolean present_forbiden = true;
    list.add(present_forbiden);
    if (present_forbiden)
      list.add(forbiden);

    boolean present_FeatureList = true && (isSetFeatureList());
    list.add(present_FeatureList);
    if (present_FeatureList)
      list.add(FeatureList);

    return list.hashCode();
  }

  @Override
  public int compareTo(T_MulAlgFeatureExtRsp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFeatureCnt()).compareTo(other.isSetFeatureCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeatureCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FeatureCnt, other.FeatureCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForbiden()).compareTo(other.isSetForbiden());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForbiden()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forbiden, other.forbiden);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeatureList()).compareTo(other.isSetFeatureList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeatureList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FeatureList, other.FeatureList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("T_MulAlgFeatureExtRsp(");
    boolean first = true;

    sb.append("FeatureCnt:");
    sb.append(this.FeatureCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("forbiden:");
    sb.append(this.forbiden);
    first = false;
    if (!first) sb.append(", ");
    sb.append("FeatureList:");
    if (this.FeatureList == null) {
      sb.append("null");
    } else {
      sb.append(this.FeatureList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class T_MulAlgFeatureExtRspStandardSchemeFactory implements SchemeFactory {
    public T_MulAlgFeatureExtRspStandardScheme getScheme() {
      return new T_MulAlgFeatureExtRspStandardScheme();
    }
  }

  private static class T_MulAlgFeatureExtRspStandardScheme extends StandardScheme<T_MulAlgFeatureExtRsp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, T_MulAlgFeatureExtRsp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FEATURE_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.FeatureCnt = iprot.readI32();
              struct.setFeatureCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FORBIDEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.forbiden = iprot.readI32();
              struct.setForbidenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FEATURE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.FeatureList = new ArrayList<T_OneAlgFeatureExtRsp>(_list16.size);
                T_OneAlgFeatureExtRsp _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new T_OneAlgFeatureExtRsp();
                  _elem17.read(iprot);
                  struct.FeatureList.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setFeatureListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, T_MulAlgFeatureExtRsp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FEATURE_CNT_FIELD_DESC);
      oprot.writeI32(struct.FeatureCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FORBIDEN_FIELD_DESC);
      oprot.writeI32(struct.forbiden);
      oprot.writeFieldEnd();
      if (struct.FeatureList != null) {
        oprot.writeFieldBegin(FEATURE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.FeatureList.size()));
          for (T_OneAlgFeatureExtRsp _iter19 : struct.FeatureList)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class T_MulAlgFeatureExtRspTupleSchemeFactory implements SchemeFactory {
    public T_MulAlgFeatureExtRspTupleScheme getScheme() {
      return new T_MulAlgFeatureExtRspTupleScheme();
    }
  }

  private static class T_MulAlgFeatureExtRspTupleScheme extends TupleScheme<T_MulAlgFeatureExtRsp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, T_MulAlgFeatureExtRsp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFeatureCnt()) {
        optionals.set(0);
      }
      if (struct.isSetForbiden()) {
        optionals.set(1);
      }
      if (struct.isSetFeatureList()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFeatureCnt()) {
        oprot.writeI32(struct.FeatureCnt);
      }
      if (struct.isSetForbiden()) {
        oprot.writeI32(struct.forbiden);
      }
      if (struct.isSetFeatureList()) {
        {
          oprot.writeI32(struct.FeatureList.size());
          for (T_OneAlgFeatureExtRsp _iter20 : struct.FeatureList)
          {
            _iter20.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, T_MulAlgFeatureExtRsp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.FeatureCnt = iprot.readI32();
        struct.setFeatureCntIsSet(true);
      }
      if (incoming.get(1)) {
        struct.forbiden = iprot.readI32();
        struct.setForbidenIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.FeatureList = new ArrayList<T_OneAlgFeatureExtRsp>(_list21.size);
          T_OneAlgFeatureExtRsp _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new T_OneAlgFeatureExtRsp();
            _elem22.read(iprot);
            struct.FeatureList.add(_elem22);
          }
        }
        struct.setFeatureListIsSet(true);
      }
    }
  }

}

