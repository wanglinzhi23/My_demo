/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package intellif.ifaas;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-8-31")
public class T_OneAlgFeatureExtRsp implements org.apache.thrift.TBase<T_OneAlgFeatureExtRsp, T_OneAlgFeatureExtRsp._Fields>, java.io.Serializable, Cloneable, Comparable<T_OneAlgFeatureExtRsp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("T_OneAlgFeatureExtRsp");

  private static final org.apache.thrift.protocol.TField ALG_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("AlgVersion", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ErrorCode", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FEATURE_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("FeatureVal", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new T_OneAlgFeatureExtRspStandardSchemeFactory());
    schemes.put(TupleScheme.class, new T_OneAlgFeatureExtRspTupleSchemeFactory());
  }

  public int AlgVersion; // required
  public int ErrorCode; // required
  public ByteBuffer FeatureVal; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ALG_VERSION((short)1, "AlgVersion"),
    ERROR_CODE((short)2, "ErrorCode"),
    FEATURE_VAL((short)3, "FeatureVal");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ALG_VERSION
          return ALG_VERSION;
        case 2: // ERROR_CODE
          return ERROR_CODE;
        case 3: // FEATURE_VAL
          return FEATURE_VAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ALGVERSION_ISSET_ID = 0;
  private static final int __ERRORCODE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ALG_VERSION, new org.apache.thrift.meta_data.FieldMetaData("AlgVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("ErrorCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FEATURE_VAL, new org.apache.thrift.meta_data.FieldMetaData("FeatureVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(T_OneAlgFeatureExtRsp.class, metaDataMap);
  }

  public T_OneAlgFeatureExtRsp() {
  }

  public T_OneAlgFeatureExtRsp(
    int AlgVersion,
    int ErrorCode,
    ByteBuffer FeatureVal)
  {
    this();
    this.AlgVersion = AlgVersion;
    setAlgVersionIsSet(true);
    this.ErrorCode = ErrorCode;
    setErrorCodeIsSet(true);
    this.FeatureVal = org.apache.thrift.TBaseHelper.copyBinary(FeatureVal);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public T_OneAlgFeatureExtRsp(T_OneAlgFeatureExtRsp other) {
    __isset_bitfield = other.__isset_bitfield;
    this.AlgVersion = other.AlgVersion;
    this.ErrorCode = other.ErrorCode;
    if (other.isSetFeatureVal()) {
      this.FeatureVal = org.apache.thrift.TBaseHelper.copyBinary(other.FeatureVal);
    }
  }

  public T_OneAlgFeatureExtRsp deepCopy() {
    return new T_OneAlgFeatureExtRsp(this);
  }

  @Override
  public void clear() {
    setAlgVersionIsSet(false);
    this.AlgVersion = 0;
    setErrorCodeIsSet(false);
    this.ErrorCode = 0;
    this.FeatureVal = null;
  }

  public int getAlgVersion() {
    return this.AlgVersion;
  }

  public T_OneAlgFeatureExtRsp setAlgVersion(int AlgVersion) {
    this.AlgVersion = AlgVersion;
    setAlgVersionIsSet(true);
    return this;
  }

  public void unsetAlgVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALGVERSION_ISSET_ID);
  }

  /** Returns true if field AlgVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetAlgVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __ALGVERSION_ISSET_ID);
  }

  public void setAlgVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALGVERSION_ISSET_ID, value);
  }

  public int getErrorCode() {
    return this.ErrorCode;
  }

  public T_OneAlgFeatureExtRsp setErrorCode(int ErrorCode) {
    this.ErrorCode = ErrorCode;
    setErrorCodeIsSet(true);
    return this;
  }

  public void unsetErrorCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
  }

  /** Returns true if field ErrorCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorCode() {
    return EncodingUtils.testBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
  }

  public void setErrorCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERRORCODE_ISSET_ID, value);
  }

  public byte[] getFeatureVal() {
    setFeatureVal(org.apache.thrift.TBaseHelper.rightSize(FeatureVal));
    return FeatureVal == null ? null : FeatureVal.array();
  }

  public ByteBuffer bufferForFeatureVal() {
    return org.apache.thrift.TBaseHelper.copyBinary(FeatureVal);
  }

  public T_OneAlgFeatureExtRsp setFeatureVal(byte[] FeatureVal) {
    this.FeatureVal = FeatureVal == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(FeatureVal, FeatureVal.length));
    return this;
  }

  public T_OneAlgFeatureExtRsp setFeatureVal(ByteBuffer FeatureVal) {
    this.FeatureVal = org.apache.thrift.TBaseHelper.copyBinary(FeatureVal);
    return this;
  }

  public void unsetFeatureVal() {
    this.FeatureVal = null;
  }

  /** Returns true if field FeatureVal is set (has been assigned a value) and false otherwise */
  public boolean isSetFeatureVal() {
    return this.FeatureVal != null;
  }

  public void setFeatureValIsSet(boolean value) {
    if (!value) {
      this.FeatureVal = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ALG_VERSION:
      if (value == null) {
        unsetAlgVersion();
      } else {
        setAlgVersion((Integer)value);
      }
      break;

    case ERROR_CODE:
      if (value == null) {
        unsetErrorCode();
      } else {
        setErrorCode((Integer)value);
      }
      break;

    case FEATURE_VAL:
      if (value == null) {
        unsetFeatureVal();
      } else {
        setFeatureVal((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ALG_VERSION:
      return Integer.valueOf(getAlgVersion());

    case ERROR_CODE:
      return Integer.valueOf(getErrorCode());

    case FEATURE_VAL:
      return getFeatureVal();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ALG_VERSION:
      return isSetAlgVersion();
    case ERROR_CODE:
      return isSetErrorCode();
    case FEATURE_VAL:
      return isSetFeatureVal();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof T_OneAlgFeatureExtRsp)
      return this.equals((T_OneAlgFeatureExtRsp)that);
    return false;
  }

  public boolean equals(T_OneAlgFeatureExtRsp that) {
    if (that == null)
      return false;

    boolean this_present_AlgVersion = true;
    boolean that_present_AlgVersion = true;
    if (this_present_AlgVersion || that_present_AlgVersion) {
      if (!(this_present_AlgVersion && that_present_AlgVersion))
        return false;
      if (this.AlgVersion != that.AlgVersion)
        return false;
    }

    boolean this_present_ErrorCode = true;
    boolean that_present_ErrorCode = true;
    if (this_present_ErrorCode || that_present_ErrorCode) {
      if (!(this_present_ErrorCode && that_present_ErrorCode))
        return false;
      if (this.ErrorCode != that.ErrorCode)
        return false;
    }

    boolean this_present_FeatureVal = true && this.isSetFeatureVal();
    boolean that_present_FeatureVal = true && that.isSetFeatureVal();
    if (this_present_FeatureVal || that_present_FeatureVal) {
      if (!(this_present_FeatureVal && that_present_FeatureVal))
        return false;
      if (!this.FeatureVal.equals(that.FeatureVal))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_AlgVersion = true;
    list.add(present_AlgVersion);
    if (present_AlgVersion)
      list.add(AlgVersion);

    boolean present_ErrorCode = true;
    list.add(present_ErrorCode);
    if (present_ErrorCode)
      list.add(ErrorCode);

    boolean present_FeatureVal = true && (isSetFeatureVal());
    list.add(present_FeatureVal);
    if (present_FeatureVal)
      list.add(FeatureVal);

    return list.hashCode();
  }

  @Override
  public int compareTo(T_OneAlgFeatureExtRsp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAlgVersion()).compareTo(other.isSetAlgVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlgVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AlgVersion, other.AlgVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorCode()).compareTo(other.isSetErrorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ErrorCode, other.ErrorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeatureVal()).compareTo(other.isSetFeatureVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeatureVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FeatureVal, other.FeatureVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("T_OneAlgFeatureExtRsp(");
    boolean first = true;

    sb.append("AlgVersion:");
    sb.append(this.AlgVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ErrorCode:");
    sb.append(this.ErrorCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("FeatureVal:");
    if (this.FeatureVal == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.FeatureVal, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class T_OneAlgFeatureExtRspStandardSchemeFactory implements SchemeFactory {
    public T_OneAlgFeatureExtRspStandardScheme getScheme() {
      return new T_OneAlgFeatureExtRspStandardScheme();
    }
  }

  private static class T_OneAlgFeatureExtRspStandardScheme extends StandardScheme<T_OneAlgFeatureExtRsp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, T_OneAlgFeatureExtRsp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ALG_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.AlgVersion = iprot.readI32();
              struct.setAlgVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ErrorCode = iprot.readI32();
              struct.setErrorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FEATURE_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.FeatureVal = iprot.readBinary();
              struct.setFeatureValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, T_OneAlgFeatureExtRsp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ALG_VERSION_FIELD_DESC);
      oprot.writeI32(struct.AlgVersion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
      oprot.writeI32(struct.ErrorCode);
      oprot.writeFieldEnd();
      if (struct.FeatureVal != null) {
        oprot.writeFieldBegin(FEATURE_VAL_FIELD_DESC);
        oprot.writeBinary(struct.FeatureVal);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class T_OneAlgFeatureExtRspTupleSchemeFactory implements SchemeFactory {
    public T_OneAlgFeatureExtRspTupleScheme getScheme() {
      return new T_OneAlgFeatureExtRspTupleScheme();
    }
  }

  private static class T_OneAlgFeatureExtRspTupleScheme extends TupleScheme<T_OneAlgFeatureExtRsp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, T_OneAlgFeatureExtRsp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAlgVersion()) {
        optionals.set(0);
      }
      if (struct.isSetErrorCode()) {
        optionals.set(1);
      }
      if (struct.isSetFeatureVal()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetAlgVersion()) {
        oprot.writeI32(struct.AlgVersion);
      }
      if (struct.isSetErrorCode()) {
        oprot.writeI32(struct.ErrorCode);
      }
      if (struct.isSetFeatureVal()) {
        oprot.writeBinary(struct.FeatureVal);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, T_OneAlgFeatureExtRsp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.AlgVersion = iprot.readI32();
        struct.setAlgVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ErrorCode = iprot.readI32();
        struct.setErrorCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.FeatureVal = iprot.readBinary();
        struct.setFeatureValIsSet(true);
      }
    }
  }

}

