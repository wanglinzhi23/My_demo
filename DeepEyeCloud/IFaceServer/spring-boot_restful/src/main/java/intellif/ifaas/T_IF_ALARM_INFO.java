/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package intellif.ifaas;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-8-31")
public class T_IF_ALARM_INFO implements org.apache.thrift.TBase<T_IF_ALARM_INFO, T_IF_ALARM_INFO._Fields>, java.io.Serializable, Cloneable, Comparable<T_IF_ALARM_INFO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("T_IF_ALARM_INFO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("TaskId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField BLACK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("BlackId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField FACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("FaceId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CONFIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("Confidence", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new T_IF_ALARM_INFOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new T_IF_ALARM_INFOTupleSchemeFactory());
  }

  public long Id; // required
  public long TaskId; // required
  public long BlackId; // required
  public long FaceId; // required
  public double Confidence; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "Id"),
    TASK_ID((short)2, "TaskId"),
    BLACK_ID((short)3, "BlackId"),
    FACE_ID((short)4, "FaceId"),
    CONFIDENCE((short)5, "Confidence");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TASK_ID
          return TASK_ID;
        case 3: // BLACK_ID
          return BLACK_ID;
        case 4: // FACE_ID
          return FACE_ID;
        case 5: // CONFIDENCE
          return CONFIDENCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TASKID_ISSET_ID = 1;
  private static final int __BLACKID_ISSET_ID = 2;
  private static final int __FACEID_ISSET_ID = 3;
  private static final int __CONFIDENCE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("TaskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BLACK_ID, new org.apache.thrift.meta_data.FieldMetaData("BlackId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FACE_ID, new org.apache.thrift.meta_data.FieldMetaData("FaceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONFIDENCE, new org.apache.thrift.meta_data.FieldMetaData("Confidence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(T_IF_ALARM_INFO.class, metaDataMap);
  }

  public T_IF_ALARM_INFO() {
  }

  public T_IF_ALARM_INFO(
    long Id,
    long TaskId,
    long BlackId,
    long FaceId,
    double Confidence)
  {
    this();
    this.Id = Id;
    setIdIsSet(true);
    this.TaskId = TaskId;
    setTaskIdIsSet(true);
    this.BlackId = BlackId;
    setBlackIdIsSet(true);
    this.FaceId = FaceId;
    setFaceIdIsSet(true);
    this.Confidence = Confidence;
    setConfidenceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public T_IF_ALARM_INFO(T_IF_ALARM_INFO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Id = other.Id;
    this.TaskId = other.TaskId;
    this.BlackId = other.BlackId;
    this.FaceId = other.FaceId;
    this.Confidence = other.Confidence;
  }

  public T_IF_ALARM_INFO deepCopy() {
    return new T_IF_ALARM_INFO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.Id = 0;
    setTaskIdIsSet(false);
    this.TaskId = 0;
    setBlackIdIsSet(false);
    this.BlackId = 0;
    setFaceIdIsSet(false);
    this.FaceId = 0;
    setConfidenceIsSet(false);
    this.Confidence = 0.0;
  }

  public long getId() {
    return this.Id;
  }

  public T_IF_ALARM_INFO setId(long Id) {
    this.Id = Id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getTaskId() {
    return this.TaskId;
  }

  public T_IF_ALARM_INFO setTaskId(long TaskId) {
    this.TaskId = TaskId;
    setTaskIdIsSet(true);
    return this;
  }

  public void unsetTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field TaskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  public long getBlackId() {
    return this.BlackId;
  }

  public T_IF_ALARM_INFO setBlackId(long BlackId) {
    this.BlackId = BlackId;
    setBlackIdIsSet(true);
    return this;
  }

  public void unsetBlackId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLACKID_ISSET_ID);
  }

  /** Returns true if field BlackId is set (has been assigned a value) and false otherwise */
  public boolean isSetBlackId() {
    return EncodingUtils.testBit(__isset_bitfield, __BLACKID_ISSET_ID);
  }

  public void setBlackIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLACKID_ISSET_ID, value);
  }

  public long getFaceId() {
    return this.FaceId;
  }

  public T_IF_ALARM_INFO setFaceId(long FaceId) {
    this.FaceId = FaceId;
    setFaceIdIsSet(true);
    return this;
  }

  public void unsetFaceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FACEID_ISSET_ID);
  }

  /** Returns true if field FaceId is set (has been assigned a value) and false otherwise */
  public boolean isSetFaceId() {
    return EncodingUtils.testBit(__isset_bitfield, __FACEID_ISSET_ID);
  }

  public void setFaceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FACEID_ISSET_ID, value);
  }

  public double getConfidence() {
    return this.Confidence;
  }

  public T_IF_ALARM_INFO setConfidence(double Confidence) {
    this.Confidence = Confidence;
    setConfidenceIsSet(true);
    return this;
  }

  public void unsetConfidence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
  }

  /** Returns true if field Confidence is set (has been assigned a value) and false otherwise */
  public boolean isSetConfidence() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
  }

  public void setConfidenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIDENCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((Long)value);
      }
      break;

    case BLACK_ID:
      if (value == null) {
        unsetBlackId();
      } else {
        setBlackId((Long)value);
      }
      break;

    case FACE_ID:
      if (value == null) {
        unsetFaceId();
      } else {
        setFaceId((Long)value);
      }
      break;

    case CONFIDENCE:
      if (value == null) {
        unsetConfidence();
      } else {
        setConfidence((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case TASK_ID:
      return Long.valueOf(getTaskId());

    case BLACK_ID:
      return Long.valueOf(getBlackId());

    case FACE_ID:
      return Long.valueOf(getFaceId());

    case CONFIDENCE:
      return Double.valueOf(getConfidence());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TASK_ID:
      return isSetTaskId();
    case BLACK_ID:
      return isSetBlackId();
    case FACE_ID:
      return isSetFaceId();
    case CONFIDENCE:
      return isSetConfidence();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof T_IF_ALARM_INFO)
      return this.equals((T_IF_ALARM_INFO)that);
    return false;
  }

  public boolean equals(T_IF_ALARM_INFO that) {
    if (that == null)
      return false;

    boolean this_present_Id = true;
    boolean that_present_Id = true;
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (this.Id != that.Id)
        return false;
    }

    boolean this_present_TaskId = true;
    boolean that_present_TaskId = true;
    if (this_present_TaskId || that_present_TaskId) {
      if (!(this_present_TaskId && that_present_TaskId))
        return false;
      if (this.TaskId != that.TaskId)
        return false;
    }

    boolean this_present_BlackId = true;
    boolean that_present_BlackId = true;
    if (this_present_BlackId || that_present_BlackId) {
      if (!(this_present_BlackId && that_present_BlackId))
        return false;
      if (this.BlackId != that.BlackId)
        return false;
    }

    boolean this_present_FaceId = true;
    boolean that_present_FaceId = true;
    if (this_present_FaceId || that_present_FaceId) {
      if (!(this_present_FaceId && that_present_FaceId))
        return false;
      if (this.FaceId != that.FaceId)
        return false;
    }

    boolean this_present_Confidence = true;
    boolean that_present_Confidence = true;
    if (this_present_Confidence || that_present_Confidence) {
      if (!(this_present_Confidence && that_present_Confidence))
        return false;
      if (this.Confidence != that.Confidence)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_Id = true;
    list.add(present_Id);
    if (present_Id)
      list.add(Id);

    boolean present_TaskId = true;
    list.add(present_TaskId);
    if (present_TaskId)
      list.add(TaskId);

    boolean present_BlackId = true;
    list.add(present_BlackId);
    if (present_BlackId)
      list.add(BlackId);

    boolean present_FaceId = true;
    list.add(present_FaceId);
    if (present_FaceId)
      list.add(FaceId);

    boolean present_Confidence = true;
    list.add(present_Confidence);
    if (present_Confidence)
      list.add(Confidence);

    return list.hashCode();
  }

  @Override
  public int compareTo(T_IF_ALARM_INFO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TaskId, other.TaskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlackId()).compareTo(other.isSetBlackId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlackId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BlackId, other.BlackId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFaceId()).compareTo(other.isSetFaceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FaceId, other.FaceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfidence()).compareTo(other.isSetConfidence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfidence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Confidence, other.Confidence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("T_IF_ALARM_INFO(");
    boolean first = true;

    sb.append("Id:");
    sb.append(this.Id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("TaskId:");
    sb.append(this.TaskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("BlackId:");
    sb.append(this.BlackId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("FaceId:");
    sb.append(this.FaceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Confidence:");
    sb.append(this.Confidence);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class T_IF_ALARM_INFOStandardSchemeFactory implements SchemeFactory {
    public T_IF_ALARM_INFOStandardScheme getScheme() {
      return new T_IF_ALARM_INFOStandardScheme();
    }
  }

  private static class T_IF_ALARM_INFOStandardScheme extends StandardScheme<T_IF_ALARM_INFO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, T_IF_ALARM_INFO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.Id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.TaskId = iprot.readI64();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BLACK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.BlackId = iprot.readI64();
              struct.setBlackIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.FaceId = iprot.readI64();
              struct.setFaceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONFIDENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Confidence = iprot.readDouble();
              struct.setConfidenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, T_IF_ALARM_INFO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.Id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeI64(struct.TaskId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLACK_ID_FIELD_DESC);
      oprot.writeI64(struct.BlackId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FACE_ID_FIELD_DESC);
      oprot.writeI64(struct.FaceId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONFIDENCE_FIELD_DESC);
      oprot.writeDouble(struct.Confidence);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class T_IF_ALARM_INFOTupleSchemeFactory implements SchemeFactory {
    public T_IF_ALARM_INFOTupleScheme getScheme() {
      return new T_IF_ALARM_INFOTupleScheme();
    }
  }

  private static class T_IF_ALARM_INFOTupleScheme extends TupleScheme<T_IF_ALARM_INFO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, T_IF_ALARM_INFO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTaskId()) {
        optionals.set(1);
      }
      if (struct.isSetBlackId()) {
        optionals.set(2);
      }
      if (struct.isSetFaceId()) {
        optionals.set(3);
      }
      if (struct.isSetConfidence()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeI64(struct.Id);
      }
      if (struct.isSetTaskId()) {
        oprot.writeI64(struct.TaskId);
      }
      if (struct.isSetBlackId()) {
        oprot.writeI64(struct.BlackId);
      }
      if (struct.isSetFaceId()) {
        oprot.writeI64(struct.FaceId);
      }
      if (struct.isSetConfidence()) {
        oprot.writeDouble(struct.Confidence);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, T_IF_ALARM_INFO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.Id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.TaskId = iprot.readI64();
        struct.setTaskIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.BlackId = iprot.readI64();
        struct.setBlackIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.FaceId = iprot.readI64();
        struct.setFaceIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.Confidence = iprot.readDouble();
        struct.setConfidenceIsSet(true);
      }
    }
  }

}

