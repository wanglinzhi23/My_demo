/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package intellif.ifaas;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-8-31")
public class T_ProgressQueryRst implements org.apache.thrift.TBase<T_ProgressQueryRst, T_ProgressQueryRst._Fields>, java.io.Serializable, Cloneable, Comparable<T_ProgressQueryRst> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("T_ProgressQueryRst");

  private static final org.apache.thrift.protocol.TField TOTAL_REQ_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("TotalReqCnt", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField FINISH_REQ_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("FinishReqCnt", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_ITEM_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("TotalItemCnt", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField FINISH_ITEM_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("FinishItemCnt", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new T_ProgressQueryRstStandardSchemeFactory());
    schemes.put(TupleScheme.class, new T_ProgressQueryRstTupleSchemeFactory());
  }

  public long TotalReqCnt; // required
  public long FinishReqCnt; // required
  public long TotalItemCnt; // required
  public long FinishItemCnt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTAL_REQ_CNT((short)1, "TotalReqCnt"),
    FINISH_REQ_CNT((short)2, "FinishReqCnt"),
    TOTAL_ITEM_CNT((short)3, "TotalItemCnt"),
    FINISH_ITEM_CNT((short)4, "FinishItemCnt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_REQ_CNT
          return TOTAL_REQ_CNT;
        case 2: // FINISH_REQ_CNT
          return FINISH_REQ_CNT;
        case 3: // TOTAL_ITEM_CNT
          return TOTAL_ITEM_CNT;
        case 4: // FINISH_ITEM_CNT
          return FINISH_ITEM_CNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALREQCNT_ISSET_ID = 0;
  private static final int __FINISHREQCNT_ISSET_ID = 1;
  private static final int __TOTALITEMCNT_ISSET_ID = 2;
  private static final int __FINISHITEMCNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_REQ_CNT, new org.apache.thrift.meta_data.FieldMetaData("TotalReqCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FINISH_REQ_CNT, new org.apache.thrift.meta_data.FieldMetaData("FinishReqCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_ITEM_CNT, new org.apache.thrift.meta_data.FieldMetaData("TotalItemCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FINISH_ITEM_CNT, new org.apache.thrift.meta_data.FieldMetaData("FinishItemCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(T_ProgressQueryRst.class, metaDataMap);
  }

  public T_ProgressQueryRst() {
  }

  public T_ProgressQueryRst(
    long TotalReqCnt,
    long FinishReqCnt,
    long TotalItemCnt,
    long FinishItemCnt)
  {
    this();
    this.TotalReqCnt = TotalReqCnt;
    setTotalReqCntIsSet(true);
    this.FinishReqCnt = FinishReqCnt;
    setFinishReqCntIsSet(true);
    this.TotalItemCnt = TotalItemCnt;
    setTotalItemCntIsSet(true);
    this.FinishItemCnt = FinishItemCnt;
    setFinishItemCntIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public T_ProgressQueryRst(T_ProgressQueryRst other) {
    __isset_bitfield = other.__isset_bitfield;
    this.TotalReqCnt = other.TotalReqCnt;
    this.FinishReqCnt = other.FinishReqCnt;
    this.TotalItemCnt = other.TotalItemCnt;
    this.FinishItemCnt = other.FinishItemCnt;
  }

  public T_ProgressQueryRst deepCopy() {
    return new T_ProgressQueryRst(this);
  }

  @Override
  public void clear() {
    setTotalReqCntIsSet(false);
    this.TotalReqCnt = 0;
    setFinishReqCntIsSet(false);
    this.FinishReqCnt = 0;
    setTotalItemCntIsSet(false);
    this.TotalItemCnt = 0;
    setFinishItemCntIsSet(false);
    this.FinishItemCnt = 0;
  }

  public long getTotalReqCnt() {
    return this.TotalReqCnt;
  }

  public T_ProgressQueryRst setTotalReqCnt(long TotalReqCnt) {
    this.TotalReqCnt = TotalReqCnt;
    setTotalReqCntIsSet(true);
    return this;
  }

  public void unsetTotalReqCnt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALREQCNT_ISSET_ID);
  }

  /** Returns true if field TotalReqCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalReqCnt() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALREQCNT_ISSET_ID);
  }

  public void setTotalReqCntIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALREQCNT_ISSET_ID, value);
  }

  public long getFinishReqCnt() {
    return this.FinishReqCnt;
  }

  public T_ProgressQueryRst setFinishReqCnt(long FinishReqCnt) {
    this.FinishReqCnt = FinishReqCnt;
    setFinishReqCntIsSet(true);
    return this;
  }

  public void unsetFinishReqCnt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINISHREQCNT_ISSET_ID);
  }

  /** Returns true if field FinishReqCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishReqCnt() {
    return EncodingUtils.testBit(__isset_bitfield, __FINISHREQCNT_ISSET_ID);
  }

  public void setFinishReqCntIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINISHREQCNT_ISSET_ID, value);
  }

  public long getTotalItemCnt() {
    return this.TotalItemCnt;
  }

  public T_ProgressQueryRst setTotalItemCnt(long TotalItemCnt) {
    this.TotalItemCnt = TotalItemCnt;
    setTotalItemCntIsSet(true);
    return this;
  }

  public void unsetTotalItemCnt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALITEMCNT_ISSET_ID);
  }

  /** Returns true if field TotalItemCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalItemCnt() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALITEMCNT_ISSET_ID);
  }

  public void setTotalItemCntIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALITEMCNT_ISSET_ID, value);
  }

  public long getFinishItemCnt() {
    return this.FinishItemCnt;
  }

  public T_ProgressQueryRst setFinishItemCnt(long FinishItemCnt) {
    this.FinishItemCnt = FinishItemCnt;
    setFinishItemCntIsSet(true);
    return this;
  }

  public void unsetFinishItemCnt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINISHITEMCNT_ISSET_ID);
  }

  /** Returns true if field FinishItemCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishItemCnt() {
    return EncodingUtils.testBit(__isset_bitfield, __FINISHITEMCNT_ISSET_ID);
  }

  public void setFinishItemCntIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINISHITEMCNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL_REQ_CNT:
      if (value == null) {
        unsetTotalReqCnt();
      } else {
        setTotalReqCnt((Long)value);
      }
      break;

    case FINISH_REQ_CNT:
      if (value == null) {
        unsetFinishReqCnt();
      } else {
        setFinishReqCnt((Long)value);
      }
      break;

    case TOTAL_ITEM_CNT:
      if (value == null) {
        unsetTotalItemCnt();
      } else {
        setTotalItemCnt((Long)value);
      }
      break;

    case FINISH_ITEM_CNT:
      if (value == null) {
        unsetFinishItemCnt();
      } else {
        setFinishItemCnt((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_REQ_CNT:
      return Long.valueOf(getTotalReqCnt());

    case FINISH_REQ_CNT:
      return Long.valueOf(getFinishReqCnt());

    case TOTAL_ITEM_CNT:
      return Long.valueOf(getTotalItemCnt());

    case FINISH_ITEM_CNT:
      return Long.valueOf(getFinishItemCnt());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTAL_REQ_CNT:
      return isSetTotalReqCnt();
    case FINISH_REQ_CNT:
      return isSetFinishReqCnt();
    case TOTAL_ITEM_CNT:
      return isSetTotalItemCnt();
    case FINISH_ITEM_CNT:
      return isSetFinishItemCnt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof T_ProgressQueryRst)
      return this.equals((T_ProgressQueryRst)that);
    return false;
  }

  public boolean equals(T_ProgressQueryRst that) {
    if (that == null)
      return false;

    boolean this_present_TotalReqCnt = true;
    boolean that_present_TotalReqCnt = true;
    if (this_present_TotalReqCnt || that_present_TotalReqCnt) {
      if (!(this_present_TotalReqCnt && that_present_TotalReqCnt))
        return false;
      if (this.TotalReqCnt != that.TotalReqCnt)
        return false;
    }

    boolean this_present_FinishReqCnt = true;
    boolean that_present_FinishReqCnt = true;
    if (this_present_FinishReqCnt || that_present_FinishReqCnt) {
      if (!(this_present_FinishReqCnt && that_present_FinishReqCnt))
        return false;
      if (this.FinishReqCnt != that.FinishReqCnt)
        return false;
    }

    boolean this_present_TotalItemCnt = true;
    boolean that_present_TotalItemCnt = true;
    if (this_present_TotalItemCnt || that_present_TotalItemCnt) {
      if (!(this_present_TotalItemCnt && that_present_TotalItemCnt))
        return false;
      if (this.TotalItemCnt != that.TotalItemCnt)
        return false;
    }

    boolean this_present_FinishItemCnt = true;
    boolean that_present_FinishItemCnt = true;
    if (this_present_FinishItemCnt || that_present_FinishItemCnt) {
      if (!(this_present_FinishItemCnt && that_present_FinishItemCnt))
        return false;
      if (this.FinishItemCnt != that.FinishItemCnt)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_TotalReqCnt = true;
    list.add(present_TotalReqCnt);
    if (present_TotalReqCnt)
      list.add(TotalReqCnt);

    boolean present_FinishReqCnt = true;
    list.add(present_FinishReqCnt);
    if (present_FinishReqCnt)
      list.add(FinishReqCnt);

    boolean present_TotalItemCnt = true;
    list.add(present_TotalItemCnt);
    if (present_TotalItemCnt)
      list.add(TotalItemCnt);

    boolean present_FinishItemCnt = true;
    list.add(present_FinishItemCnt);
    if (present_FinishItemCnt)
      list.add(FinishItemCnt);

    return list.hashCode();
  }

  @Override
  public int compareTo(T_ProgressQueryRst other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTotalReqCnt()).compareTo(other.isSetTotalReqCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalReqCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TotalReqCnt, other.TotalReqCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishReqCnt()).compareTo(other.isSetFinishReqCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishReqCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FinishReqCnt, other.FinishReqCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalItemCnt()).compareTo(other.isSetTotalItemCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalItemCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TotalItemCnt, other.TotalItemCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishItemCnt()).compareTo(other.isSetFinishItemCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishItemCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FinishItemCnt, other.FinishItemCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("T_ProgressQueryRst(");
    boolean first = true;

    sb.append("TotalReqCnt:");
    sb.append(this.TotalReqCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("FinishReqCnt:");
    sb.append(this.FinishReqCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("TotalItemCnt:");
    sb.append(this.TotalItemCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("FinishItemCnt:");
    sb.append(this.FinishItemCnt);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class T_ProgressQueryRstStandardSchemeFactory implements SchemeFactory {
    public T_ProgressQueryRstStandardScheme getScheme() {
      return new T_ProgressQueryRstStandardScheme();
    }
  }

  private static class T_ProgressQueryRstStandardScheme extends StandardScheme<T_ProgressQueryRst> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, T_ProgressQueryRst struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL_REQ_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.TotalReqCnt = iprot.readI64();
              struct.setTotalReqCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FINISH_REQ_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.FinishReqCnt = iprot.readI64();
              struct.setFinishReqCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_ITEM_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.TotalItemCnt = iprot.readI64();
              struct.setTotalItemCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FINISH_ITEM_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.FinishItemCnt = iprot.readI64();
              struct.setFinishItemCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, T_ProgressQueryRst struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOTAL_REQ_CNT_FIELD_DESC);
      oprot.writeI64(struct.TotalReqCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINISH_REQ_CNT_FIELD_DESC);
      oprot.writeI64(struct.FinishReqCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_ITEM_CNT_FIELD_DESC);
      oprot.writeI64(struct.TotalItemCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINISH_ITEM_CNT_FIELD_DESC);
      oprot.writeI64(struct.FinishItemCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class T_ProgressQueryRstTupleSchemeFactory implements SchemeFactory {
    public T_ProgressQueryRstTupleScheme getScheme() {
      return new T_ProgressQueryRstTupleScheme();
    }
  }

  private static class T_ProgressQueryRstTupleScheme extends TupleScheme<T_ProgressQueryRst> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, T_ProgressQueryRst struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTotalReqCnt()) {
        optionals.set(0);
      }
      if (struct.isSetFinishReqCnt()) {
        optionals.set(1);
      }
      if (struct.isSetTotalItemCnt()) {
        optionals.set(2);
      }
      if (struct.isSetFinishItemCnt()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTotalReqCnt()) {
        oprot.writeI64(struct.TotalReqCnt);
      }
      if (struct.isSetFinishReqCnt()) {
        oprot.writeI64(struct.FinishReqCnt);
      }
      if (struct.isSetTotalItemCnt()) {
        oprot.writeI64(struct.TotalItemCnt);
      }
      if (struct.isSetFinishItemCnt()) {
        oprot.writeI64(struct.FinishItemCnt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, T_ProgressQueryRst struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.TotalReqCnt = iprot.readI64();
        struct.setTotalReqCntIsSet(true);
      }
      if (incoming.get(1)) {
        struct.FinishReqCnt = iprot.readI64();
        struct.setFinishReqCntIsSet(true);
      }
      if (incoming.get(2)) {
        struct.TotalItemCnt = iprot.readI64();
        struct.setTotalItemCntIsSet(true);
      }
      if (incoming.get(3)) {
        struct.FinishItemCnt = iprot.readI64();
        struct.setFinishItemCntIsSet(true);
      }
    }
  }

}

